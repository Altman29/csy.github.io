<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2023/02/14/Spring/"/>
    <url>/2023/02/14/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Why-to-learn"><a href="#Why-to-learn" class="headerlink" title="Why to learn?"></a>Why to learn?</h1><ul><li>简化开发，降低企业级开发的复杂性;</li><li>框架整合，高效整合其他技术，提高企业级应用开发与运行效率;</li></ul><h1 id="How-to-learn"><a href="#How-to-learn" class="headerlink" title="How to learn?"></a>How to learn?</h1><ul><li>学习spring框架的设计思想;</li><li>学习如何操作，思考操作与思想的联系;</li><li>掌握案例熟练应用,体会思想;</li></ul><h1 id="Spring家族"><a href="#Spring家族" class="headerlink" title="Spring家族"></a>Spring家族</h1><p><strong><a href="https://spring.io/">官网&gt;&gt;&gt;spring.io&lt;&lt;&lt;</a></strong><br>Spring发展到现在已经形成了一种开发生态圈，提供若干项目，每个项目用于完成特定的功能。<br><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141650888.png"><br>其中，<code>Spring Framework</code>、<code>Spring Boot</code>、<code>Spring Cloud</code>是必须掌握的。</p><h1 id="Spring-Framework体现架构"><a href="#Spring-Framework体现架构" class="headerlink" title="Spring Framework体现架构"></a>Spring Framework体现架构</h1><p><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141651643.png"><br>可以看到官方没有提供5.x新架构图，掌握4.x即可。 </br><br>4.x架构如下图(<em>重要</em>)，<br><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141652234.png"></p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141702545.png"><br>一段业务实现，之前依赖<code>BookDaoImpl1</code>，后来业务改变，依赖<code>BookDaoImpl2</code>，就需要重新编译，重新打包、测试、上线等等，这是一种<strong>耦合度偏高</strong>的情况。<br>所以，依赖就是写了其他对象的应用么，那不写就可以了，不用主动<code>new</code>对象，由外部提供：<br><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141654541.png"><br>那么这种思想，就叫做<strong>IoC(Inversion of Control)控制反转，对象的创建控制权由程序转移到外部</strong>。<br>Spring就把这件事给做到了。那么它是怎么做到的呢？Spring内部提供了一个容器，称为IoC容器，用来充当IoC思想中的”外部”。(系统架构图中有一个Core Container，就是它)<br><br>那么，现在对象不需要new了，可以直接拿来用么？还是不行，还缺少依赖关系，类与类直接的依赖关系也被Spring搞定了，是通过依赖注入完成的，Bean与Bean之间会维护达到预期的依赖关系。到这，俩个核心思想就都出来了。这个重要思想的核心目的，可以看出来，就是解耦！不用new、不用维护依赖关系。通通交给Spring来完成，或者Spring的IoC容器来完成。</p><ul><li><p><font color="red"><strong>IoC(Inversion of Control)控制反转</strong></font></p><ul><li>使用对象时，由主动new产生对象转换为由外部提供，对象创建控制权转移到外部的思想称为控制反转;</li></ul></li><li><p>Spring技术对IoC思想进行了实现</p><ul><li>Spring提供了一个容器，称为IoC容器(Core Container)，用来充当IoC思想中的”外部”;</li><li>IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中称为Bean;</li></ul></li><li><p><font color="red"><strong>DI(Dependency Injection)依赖注入</strong></font></p><ul><li>在容器中建立Bean与Bean之间的依赖关系的整个过程，称为依赖注入。<br><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141720317.png"></li></ul></li><li><p><strong>目标: <font color="red">充分解耦</font></strong></p><ul><li>使用IoC容器管理bean(IoC)</li><li>在IoC容器内将有依赖关系的bean进行关系绑定(DI)</li></ul></li><li><p><strong>最终结果</strong></p><ul><li>使用对象时，不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系。</li></ul></li></ul><h1 id="IoC入门实例"><a href="#IoC入门实例" class="headerlink" title="IoC入门实例"></a>IoC入门实例</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>管理什么?(Service与Dao)</li><li>如何将被管理的对象告知IoC容器?(配置)</li><li>被管理的对象交给IoC容器，如何获取到IoC容器?(接口)</li><li>IoC容器得到后，如何从容器中获取bean?(接口方法)</li><li>使用spring需要导入哪些坐标?(pom)</li></ul><h2 id="IoC实例编写"><a href="#IoC实例编写" class="headerlink" title="IoC实例编写"></a>IoC实例编写</h2><p><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141834033.png"><br><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141834482.png"><br><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141834748.png"><br><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/202302141835797.png"><br><a href="https://github.com/Altman29/spring_ioc_demo/tree/master"><center>&#x3D;&#x3D;&#x3D;&#x3D;传送门&#x3D;&#x3D;&#x3D;&#x3D;</center></a></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>about chatGPT</title>
    <link href="/2023/02/14/about-chatGPT/"/>
    <url>/2023/02/14/about-chatGPT/</url>
    
    <content type="html"><![CDATA[<p>chatGPT实现原理</p><p><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/01.png"><br>基于自然语言处理技术中的预训练语言模型实现。它使用了一种叫做Transfomer的神经网络结构，通过海量语料库数据进行训练等等。除了预训练语言模型外，还有其他一些技术，如上下文编码、注意力机制等来增强模型的表现，这方面不是很专业，相信AI部门的同事有更加清晰认知。其实开发工作中，因为之前一直做移动端开发，对于AI的认知，还是在咱们公司才有幸接触到。不过也仅限于今日晴App中开放题的AI表现形式，暂时不清楚有什么其他应用。</p><hr><p>对工作和生活的影响</p><p><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/02.png"><br>官方回复已比较清晰，智能客服、智能助手、教育领域、社交娱乐。但是，个人分析，还是偏”不正规”聊天机器人，可能理解比较负面，觉得应是如Meta元宇宙之流。比如，智能客服方面，就不说智能客服了，现在的”智能”客服有大家满意的么，反正我肯定是切人工客服的，因为智能的不好用；智能助手方面，可以理解成高级siri吧，不过siri我也不怎么用，比如定个闹钟，设置个日程等？我的效率不会因为一个智能助手提高多少；社交娱乐方面，都社交了、娱乐了，我更喜欢真人，所以无趣；</p><p>作为个人，抱歉，我的认知偏负面了。可能是我相对保守，但也可能它相对保守吧。就像最近热播的狂飙中演员林家川的采访，读过史书看过三体，“经常把自己看失重了，往前看是历史洪流，筛选出不过几个名字，抬头看是宇宙深处的黑暗森林法则，那几个名字也会被抹去。再看历史，再看宇宙，然后就会觉得把自己看没了。”<br>我所理解（期待）的AI：AI应该是创造性的，应该像是新的物种起源，最起码是西部世界中那样一个人工智能机器人会突破、可以觉醒而不是我问A你答B。</p><hr><p>对开发工作中有何影响</p><p><img src="https://cdn.jsdelivr.net/gh/Altman29/ImgHost/BLOG_PIC/03.png"><br>可以看出，官方回复包含：代码生成（已尝试过，只能生成代码”片段”）、文档生成（不需要，现有框架特别成熟）、快速回答（还是对话的一种，我只发现此功能有意义）、自动化任务（也不需要，现有的技术已经很成熟，没那么多重复工作）。</p><p>就开发工作而言，它只是一个辅助工具，比如在碰到一个从未使用过的技术，可以快速问答，获得一个思路，具体开发工作就是编码还是要看个人编码能力。<br>综上所述，我认为它是一个对未知的事或物获得初印象的好用的工具。跟浏览器差不多，但是肯定强一些，比如不像百度，搜个东西，一堆广告；再比如，对一个未知的东西，不善于使用搜索引擎的话，可能搜都搜不到，这起码有上下文编码，我觉得最终你能获取到一个信息以供参考。暂时我会把它作为搜索引擎的平替，仅此而已。</p><hr><p>另外</p><p>具备科学上网梯子的有多少个，或许我们是互联网公司，可能占多数，但普通人也就听个乐，也可能乐都不乐；</p><p>如此频繁获取用户输入，我甚至觉得进不了国内，安全性方面有待考证；</p><p>即便可以普遍使用，但是就如小度一样，”小度,给我播放个炸雷”，”对不起，没有版权，给你播放个惊雷吧”，或者如元宇宙一样，已经烧了100多亿美元了，对普通人有何影响？还有谁持续在关注？</p><p>后期发展，也就接入浏览器，提高搜索性能；再高级的，我觉得不够；</p><p>So，我对此项技术不看好，可能只是资本的狂欢；</p>]]></content>
    
    
    
    <tags>
      
      <tag>chatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/09/hello-world/"/>
    <url>/2022/11/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>category1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tags1</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
