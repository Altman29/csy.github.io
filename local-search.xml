<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>备忘系列-zookeeper</title>
    <link href="/posts/5326b2b2/"/>
    <url>/posts/5326b2b2/</url>
    
    <content type="html"><![CDATA[<p>sadasd</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>云原生之DevOps</title>
    <link href="/posts/9393e822/"/>
    <url>/posts/9393e822/</url>
    
    <content type="html"><![CDATA[<p>123123ss拾叁</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生之kubeSphere</title>
    <link href="/posts/68893475/"/>
    <url>/posts/68893475/</url>
    
    <content type="html"><![CDATA[<p>1111222</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubeSphere</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生之k8s</title>
    <link href="/posts/7b28abd7/"/>
    <url>/posts/7b28abd7/</url>
    
    <content type="html"><![CDATA[<p>kkk8s<br>11</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-nginx</title>
    <link href="/posts/c06c050/"/>
    <url>/posts/c06c050/</url>
    
    <content type="html"><![CDATA[<p>2323</p>]]></content>
    
    
    <categories>
      
      <category>网络应用组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程安全</tag>
      
      <tag>nginx</tag>
      
      <tag>反向代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-netty</title>
    <link href="/posts/75dbf2b5/"/>
    <url>/posts/75dbf2b5/</url>
    
    <content type="html"><![CDATA[<p>是sadasd</p>]]></content>
    
    
    <categories>
      
      <category>网络应用组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>netty</tag>
      
      <tag>io</tag>
      
      <tag>nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-mongodb</title>
    <link href="/posts/c9d19155/"/>
    <url>/posts/c9d19155/</url>
    
    <content type="html"><![CDATA[<p>1212</p>]]></content>
    
    
    <categories>
      
      <category>nosql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
      <tag>nosql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-solr</title>
    <link href="/posts/7aa76e65/"/>
    <url>/posts/7aa76e65/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>nosql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nosql</tag>
      
      <tag>solr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-xxl-job</title>
    <link href="/posts/89b2e006/"/>
    <url>/posts/89b2e006/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxl-job</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-mysql</title>
    <link href="/posts/bb4eda82/"/>
    <url>/posts/bb4eda82/</url>
    
    <content type="html"><![CDATA[<p>333311</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-redis</title>
    <link href="/posts/554b12af/"/>
    <url>/posts/554b12af/</url>
    
    <content type="html"><![CDATA[<p>redis is good<br>2333</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-seata</title>
    <link href="/posts/6235e4a0/"/>
    <url>/posts/6235e4a0/</url>
    
    <content type="html"><![CDATA[<p>asd221</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>seata</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-sentinel</title>
    <link href="/posts/60bdb85a/"/>
    <url>/posts/60bdb85a/</url>
    
    <content type="html"><![CDATA[<p>收到22111</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sentinel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-ELK</title>
    <link href="/posts/9b53a343/"/>
    <url>/posts/9b53a343/</url>
    
    <content type="html"><![CDATA[<p>elk…ss</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>nosql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nosql</tag>
      
      <tag>elasticsearch</tag>
      
      <tag>logstash</tag>
      
      <tag>kibana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-SpringAMQP</title>
    <link href="/posts/8e215a30/"/>
    <url>/posts/8e215a30/</url>
    
    <content type="html"><![CDATA[<p>11ss</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AMQP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-rabbitMQ</title>
    <link href="/posts/d4befa93/"/>
    <url>/posts/d4befa93/</url>
    
    <content type="html"><![CDATA[<p>啊啊啊啊啊啊</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-gateway</title>
    <link href="/posts/4d88743d/"/>
    <url>/posts/4d88743d/</url>
    
    <content type="html"><![CDATA[<p>112</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-nacos</title>
    <link href="/posts/2c2c4e78/"/>
    <url>/posts/2c2c4e78/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关微服务-dubbo</title>
    <link href="/posts/198ade24/"/>
    <url>/posts/198ade24/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认识微服务体系</title>
    <link href="/posts/ffffd0ab/"/>
    <url>/posts/ffffd0ab/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单体应用的困境</title>
    <link href="/posts/6fe0354c/"/>
    <url>/posts/6fe0354c/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2020终章</title>
    <link href="/posts/bd0587f7/"/>
    <url>/posts/bd0587f7/</url>
    
    <content type="html"><![CDATA[<p>奥术大师发的</p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2020年度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>elementUI case</title>
    <link href="/posts/2c7fc5c1/"/>
    <url>/posts/2c7fc5c1/</url>
    
    <content type="html"><![CDATA[<p>爱上大时代elementUI</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elementUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue case</title>
    <link href="/posts/888f2d51/"/>
    <url>/posts/888f2d51/</url>
    
    <content type="html"><![CDATA[<p>是vueasdad</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bootstrap case</title>
    <link href="/posts/acf88edb/"/>
    <url>/posts/acf88edb/</url>
    
    <content type="html"><![CDATA[<p>bootstrapss112</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular case</title>
    <link href="/posts/2f5c2e2e/"/>
    <url>/posts/2f5c2e2e/</url>
    
    <content type="html"><![CDATA[<p>爱上大时代sss</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重构法则(下)</title>
    <link href="/posts/915cdc75/"/>
    <url>/posts/915cdc75/</url>
    
    <content type="html"><![CDATA[<p>重构下</p>]]></content>
    
    
    <categories>
      
      <category>重构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重构</tag>
      
      <tag>架构</tag>
      
      <tag>设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重构法则(上)</title>
    <link href="/posts/8847ed34/"/>
    <url>/posts/8847ed34/</url>
    
    <content type="html"><![CDATA[<p>重构1sss</p>]]></content>
    
    
    <categories>
      
      <category>重构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重构</tag>
      
      <tag>架构</tag>
      
      <tag>设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-swagger</title>
    <link href="/posts/a9fb96f4/"/>
    <url>/posts/a9fb96f4/</url>
    
    <content type="html"><![CDATA[<p>ss阿达达斯swa</p>]]></content>
    
    
    <categories>
      
      <category>swagger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-docker</title>
    <link href="/posts/14e7ef72/"/>
    <url>/posts/14e7ef72/</url>
    
    <content type="html"><![CDATA[<p>doc</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-maven使用指北</title>
    <link href="/posts/cc2d81c9/"/>
    <url>/posts/cc2d81c9/</url>
    
    <content type="html"><![CDATA[<p>mvn llalal</p>]]></content>
    
    
    <categories>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-git使用指北</title>
    <link href="/posts/2581ce52/"/>
    <url>/posts/2581ce52/</url>
    
    <content type="html"><![CDATA[<p>ggg11</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘系列-jenkins自动化与持续集成</title>
    <link href="/posts/aeac244/"/>
    <url>/posts/aeac244/</url>
    
    <content type="html"><![CDATA[<p>京津冀</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis is good. And plus is better.</title>
    <link href="/posts/85fa2e33/"/>
    <url>/posts/85fa2e33/</url>
    
    <content type="html"><![CDATA[<p>sss1111</p>]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
      <tag>mybatis-plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于SpringBoot</title>
    <link href="/posts/8358769a/"/>
    <url>/posts/8358769a/</url>
    
    <content type="html"><![CDATA[<p>llkkl123123</p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于SpringMVC</title>
    <link href="/posts/b3998b21/"/>
    <url>/posts/b3998b21/</url>
    
    <content type="html"><![CDATA[<p>ss213123</p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Spring</title>
    <link href="/posts/ed0120ab/"/>
    <url>/posts/ed0120ab/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring、SpringMVC、SpringBoot，开整</title>
    <link href="/posts/72086715/"/>
    <url>/posts/72086715/</url>
    
    <content type="html"><![CDATA[<p>事实上asdad</p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM从入门到放弃</title>
    <link href="/posts/a4f048b3/"/>
    <url>/posts/a4f048b3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>垃圾回收算符</tag>
      
      <tag>内存模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA多线程编程探索</title>
    <link href="/posts/6aabc494/"/>
    <url>/posts/6aabc494/</url>
    
    <content type="html"><![CDATA[<p>多线程啦啦啦</p>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
      <tag>并行</tag>
      
      <tag>同步</tag>
      
      <tag>异步</tag>
      
      <tag>互斥</tag>
      
      <tag>线程安全</tag>
      
      <tag>悲观锁</tag>
      
      <tag>乐观锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重拾设计模式（三）</title>
    <link href="/posts/bd826a18/"/>
    <url>/posts/bd826a18/</url>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote><p>实现一个商场收银软件，营业员根据客户购买的商品单价和数量收费。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201056028.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201057372.png"></p><blockquote><p>如果要去商场对商品搞活动，所有商品打八折呢。<br>那不就是totalPrices后面乘以0.8么？<br>那难道商场活动结束了，再改造一次代码么？然后再用改后的程序把所有机器全部安装一次么？还有可能周年庆，打五折的情况，如何处理？<br>那再加一个下拉框，选择商品活动呢？</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201100218.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201059095.png"></p><blockquote><p>这比刚才灵活性上是好多了，不过重复代码很多，像Convert.ToDouble()，你这里就写了8遍，而且4个分支要执行的语句除了打折多少以外几乎没什么不同，应该考虑重构一下。不过这还不是最主要的，现在我的需求又来了，商场的活动加大，需要有满300返100的促销算法，怎么办？</p></blockquote><h3 id="简单工厂实现"><a href="#简单工厂实现" class="headerlink" title="简单工厂实现"></a>简单工厂实现</h3><blockquote><p>面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类。打一折和打九折只是形式的不同，抽象分析出来，所有的打折算法都是一样的，所以打折算法应该是一个类。好了，空话已说了太多，写出来才是真的懂。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201104978.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201105121.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201105619.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201105338.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201105903.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201106421.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201106166.png"></p><blockquote><p>简单工厂模式虽然也能解决这个问题，但这个模式只是解决对象的创建问题，而且由于工厂本身包括了所有的收费方式，商场是可能经常性地更改打折额度和返利额度，每次维护或扩展收费方式都要改动这个工厂，以致代码需重新编译部署，这真的是很糟糕的处理方式，所以用它不是最好的办法。面对算法的时常变动，应该有更好的办法。</p></blockquote><h3 id="策略模式实现"><a href="#策略模式实现" class="headerlink" title="策略模式实现"></a>策略模式实现</h3><blockquote><p>策略模式（Strategy）：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201114498.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201115485.png"><br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201115807.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201115497.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201116484.png"></p><blockquote><p>写的CashSuper就是抽象策略，而正常收费CashNormal、打折收费CashRebate和返利收费CashReturn就是三个具体策略，也就是策略模式中说的具体算法。</p><p>模仿策略模式的基本代码，改写一下你的程序。<br>其实不麻烦，原来写的CashSuper、CashNormal、CashRebate和CashReturn都不用更改了，只要加一个CashContext类，并改写一下客户端就行了。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201118128.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201119104.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201119863.png"></p><blockquote><p>代码是模仿着写出来了。但我感觉这样子做不又回到了原来的老路了吗，在客户端去判断用哪一个算法？<br>有没有什么好办法，把这个判断的过程从客户端程序转移走呢？<br>难道简单工厂就一定要是一个单独的类吗？难道不可以与策略模式的Context结合？</p></blockquote><h3 id="策略与简单工厂结合"><a href="#策略与简单工厂结合" class="headerlink" title="策略与简单工厂结合"></a>策略与简单工厂结合</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201121336.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201122776.png"></p><blockquote><p>原来简单工厂模式并非只有建一个工厂类的做法，还可以这样子做。此时比刚才的模仿策略模式的写法要清楚多了，客户端代码简单明了。</p></blockquote><blockquote><p>观察一下，找出它们的不同之处。<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201123227.png"></p></blockquote><blockquote><p>简单工厂模式我需要让客户端认识两个类， CashSuper和CashFactory，而策略模式与简单工厂结合的用法，客户端就只需要认识一个类CashContext就可以了。耦合更加降低。</p><p>在客户端实例化的是CashContext的对象，调用的是CashContext的方法GetResult，这使得具体的收费算法彻底地与客户端分离。连算法的父类CashSuper都不让客户端认识了。</p></blockquote><hr><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p class="note note-primary">观察者模式是一种行为设计模式，用于定义对象之间的一对多依赖关系，当一个对象的状态发生变化时，其所有依赖对象都会自动收到通知并进行相应的更新。</p><p>一个软件系统里面包含了各种对象，就像一片欣欣向荣的森林充满了各种生物一样。在一片森林中，各种生物彼此依赖和约束，形成一个个生物链。一种生物的状态变化会造成其他一些生物的相应行动，每一个生物都处于别的生物的互动之中。</p><p>同样，一个软件系统常常要求在某一个对象的状态发生变化的时候，某些其他的对象做出相应的改变。做到这一点的设计方案有很多，但是为了使系统能够易于复用，应该选择低耦合度的设计方案。减少对象之间的耦合有利于系统的复用，但是同时设计师需要使这些低耦合度的对象之间能够维持行动的协调一致，保证高度的协作。观察者模式是满足这一要求的各种设计方案中最重要的一种。</p><p>下面以一个简单的示意性实现为例，讨论观察者模式的结构。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402211139342.png"></p><p>观察者模式所涉及的角色有：</p><p>●　　<strong>抽象主题(Subject)角色：</strong> 抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。</p><p>●　　<strong>具体主题(ConcreteSubject)角色：</strong> 将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。</p><p>●　　<strong>抽象观察者(Observer)角色：</strong> 为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。</p><p>●　　<strong>具体观察者(ConcreteObserver)角色：</strong> 存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。</p><p><strong>抽象主题角色类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来保存注册的观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Observer&gt;();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册观察者对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> observer    观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span>&#123;<br>        <br>        list.add(observer);<br>        System.out.println(<span class="hljs-string">&quot;Attached an observer&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除观察者对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> observer    观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span>&#123;<br>        <br>        list.remove(observer);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通知所有注册的观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">(String newState)</span>&#123;<br>        <br>        <span class="hljs-keyword">for</span>(Observer observer : list)&#123;<br>            observer.update(newState);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>具体主题角色类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String state;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String newState)</span>&#123;<br>        state = newState;<br>        System.out.println(<span class="hljs-string">&quot;主题状态为：&quot;</span> + state);<br>        <span class="hljs-comment">//状态发生改变，通知各个观察者</span><br>        <span class="hljs-built_in">this</span>.nodifyObservers(state);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抽象观察者角色类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新接口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> state    更新的状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String state)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>具体观察者角色类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-comment">//观察者的状态</span><br>    <span class="hljs-keyword">private</span> String observerState;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 更新观察者的状态，使其与目标的状态保持一致</span><br><span class="hljs-comment">         */</span><br>        observerState = state;<br>        System.out.println(<span class="hljs-string">&quot;状态为：&quot;</span>+observerState);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建主题对象</span><br>        <span class="hljs-type">ConcreteSubject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject</span>();<br>        <span class="hljs-comment">//创建观察者对象</span><br>        <span class="hljs-type">Observer</span> <span class="hljs-variable">observer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver</span>();<br>        <span class="hljs-comment">//将观察者对象登记到主题对象上</span><br>        subject.attach(observer);<br>        <span class="hljs-comment">//改变主题对象的状态</span><br>        subject.change(<span class="hljs-string">&quot;new state&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果</strong>：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402211146366.png"></p><p>在运行时，这个客户端首先创建了具体主题类的实例，以及一个观察者对象。然后，它调用主题对象的attach()方法，将这个观察者对象向主题对象登记，也就是将它加入到主题对象的聚集中去。</p><p>这时，客户端调用主题的change()方法，改变了主题对象的内部状态。主题对象在状态发生变化时，调用超类的notifyObservers()方法，通知所有登记过的观察者对象。</p><h3 id="推模型和拉模型"><a href="#推模型和拉模型" class="headerlink" title="推模型和拉模型"></a>推模型和拉模型</h3><p>在观察者模式中，又分为推模型和拉模型两种方式。<br>●　　<strong>推模型</strong><br>主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。<br>●　　<strong>拉模型</strong><br>主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p><p>根据上面的描述，发现前面的例子就是典型的推模型，下面给出一个拉模型的实例。</p><p><strong>拉模型的抽象观察者类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新接口</span><br><span class="hljs-comment">     * 拉模型通常都是把主题对象当做参数传递。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject 传入主题对象，方面获取相应的主题对象的状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Subject subject)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拉模型的具体观察者类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-comment">//观察者的状态</span><br>    <span class="hljs-keyword">private</span> String observerState;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Subject subject)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 更新观察者的状态，使其与目标的状态保持一致</span><br><span class="hljs-comment">         */</span><br>        observerState = ((ConcreteSubject)subject).getState();<br>        System.out.println(<span class="hljs-string">&quot;观察者状态为：&quot;</span>+observerState);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拉模型的抽象主题类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">　　拉模型的抽象主题类主要的改变是nodifyObservers()方法。在循环通知观察者的时候，也就是循环调用观察者的update()方法的时候，传入的参数不同了。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来保存注册的观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span>    List&lt;Observer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Observer&gt;();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册观察者对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> observer    观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span>&#123;<br>        <br>        list.add(observer);<br>        System.out.println(<span class="hljs-string">&quot;Attached an observer&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除观察者对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> observer    观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span>&#123;<br>        <br>        list.remove(observer);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通知所有注册的观察者对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nodifyObservers</span><span class="hljs-params">()</span>&#123;<br>        <br>        <span class="hljs-keyword">for</span>(Observer observer : list)&#123;<br>            observer.update(<span class="hljs-built_in">this</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拉模型的具体主题类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">　　跟推模型相比，有一点变化，就是调用通知观察者的方法的时候，不需要传入参数了。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String state;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String newState)</span>&#123;<br>        state = newState;<br>        System.out.println(<span class="hljs-string">&quot;主题状态为：&quot;</span> + state);<br>        <span class="hljs-comment">//状态发生改变，通知各个观察者</span><br>        <span class="hljs-built_in">this</span>.nodifyObservers();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="两种模式的比较"><a href="#两种模式的比较" class="headerlink" title="两种模式的比较"></a>两种模式的比较</h3><p>■　　推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。</p><p>■　　推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。</p><hr><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p class="note note-primary">命令模式是一种行为设计模式，它允许您将请求封装成对象，使得请求的发送者和接收者彻底解耦。在命令模式中，请求被封装成一个命令对象，这个命令对象可以被传递和存储，从而允许对请求进行参数化和延迟执行。</p><p>命令模式包含以下关键角色：</p><ul><li><strong>Command（命令）</strong>：定义了执行请求的接口。</li><li><strong>ConcreteCommand（具体命令）</strong>：实现了 Command 接口，并封装了请求的接收者。</li><li><strong>Receiver（接收者）</strong>：执行实际操作的对象。</li><li><strong>Invoker（调用者）</strong>：负责调用命令对象执行请求。</li><li><strong>Client（客户端）</strong>：创建命令对象并设置其接收者。</li></ul><p>下面是一个简单的 Java 代码示例，演示了如何使用命令模式来实现一个简单的遥控器控制灯泡的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Command 接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// ConcreteCommand 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">private</span> Light light;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOnCommand</span><span class="hljs-params">(Light light)</span> &#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.turnOn();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Receiver 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is on&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOff</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is off&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Invoker 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">private</span> Command command;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommand</span><span class="hljs-params">(Command command)</span> &#123;<br>        <span class="hljs-built_in">this</span>.command = command;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pressButton</span><span class="hljs-params">()</span> &#123;<br>        command.execute();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Client 类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建接收者对象</span><br>        <span class="hljs-type">Light</span> <span class="hljs-variable">light</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>();<br><br>        <span class="hljs-comment">// 创建命令对象并设置其接收者</span><br>        <span class="hljs-type">Command</span> <span class="hljs-variable">lightOnCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOnCommand</span>(light);<br><br>        <span class="hljs-comment">// 创建调用者对象并设置命令对象</span><br>        <span class="hljs-type">RemoteControl</span> <span class="hljs-variable">remoteControl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteControl</span>();<br>        remoteControl.setCommand(lightOnCommand);<br><br>        <span class="hljs-comment">// 模拟按下按钮，执行命令</span><br>        remoteControl.pressButton(); <span class="hljs-comment">// 输出：Light is on</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>在这个示例中，我们创建了一个遥控器（Invoker），并设置了一个命令（Command）来控制灯泡（Receiver）。当我们按下按钮时，调用者会执行命令，命令又会调用接收者执行相应的操作。</p><p>命令模式是一种非常有用的设计模式，它可以将请求封装成对象，从而允许您以参数化的方式进行方法调用、队列请求、日志记录和撤销操作等。</p><p>命令模式非常灵活，允许您轻松地扩展和修改功能。例如，您可以添加新的具体命令类来实现不同的操作，而不需要修改现有的代码。这种可扩展性使得命令模式在面对变化需求时非常有用。</p></blockquote><hr><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p class="note note-primary">模板方法模式是一种行为设计模式，它在一个方法中定义了一个算法的骨架，而将一些步骤的具体实现延迟到子类中。这样，可以在不改变算法结构的情况下，重新定义算法的某些步骤。模板方法模式提供了一种代码复用的方式，同时允许更容易地对算法进行定制。</p><p>模板方法模式包含以下关键角色：</p><ul><li><strong>AbstractClass（抽象类）</strong>：定义了一个模板方法，其中包含算法的骨架和一些步骤的具体实现。</li><li><strong>ConcreteClass（具体类）</strong>：实现了抽象类中的某些步骤，完成算法的具体实现。</li></ul><p>下面是一个简单的示例，演示了如何使用模板方法模式来制作咖啡和茶：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类：饮料</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-comment">// 模板方法，定义了制作饮料的步骤</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareBeverage</span><span class="hljs-params">()</span> &#123;<br>        boilWater();<br>        brew();<br>        pourInCup();<br>        <span class="hljs-keyword">if</span> (customerWantsCondiments()) &#123;<br>            addCondiments();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 抽象方法，由子类实现</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 具体方法，共享实现</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">boilWater</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Boiling water&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourInCup</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Pouring into cup&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 钩子方法，子类可以选择性地覆盖</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">customerWantsCondiments</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体类：咖啡</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dripping Coffee through filter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Adding Sugar and Milk&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体类：茶</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Steeping the tea&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Adding Lemon&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">customerWantsCondiments</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 茶不加调料</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Beverage</span> <span class="hljs-variable">coffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>();<br>        System.out.println(<span class="hljs-string">&quot;Making coffee...&quot;</span>);<br>        coffee.prepareBeverage();<br><br>        System.out.println();<br><br>        <span class="hljs-type">Beverage</span> <span class="hljs-variable">tea</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>();<br>        System.out.println(<span class="hljs-string">&quot;Making tea...&quot;</span>);<br>        tea.prepareBeverage();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个示例中，<code>Beverage</code> 是抽象类，定义了制作饮料的模板方法 <code>prepareBeverage()</code>，以及一些共享的具体方法。<code>Coffee</code> 和 <code>Tea</code> 是具体类，分别实现了 <code>brew()</code> 和 <code>addCondiments()</code> 方法，以完成制作咖啡和茶的过程。</p><p><strong>JDK 中的应用</strong></p><p>在 JDK 中，模板方法模式被广泛应用。其中一个典型的例子就是在 <code>java.util.AbstractList</code> 类中。这个类实现了 <code>java.util.List</code> 接口，提供了 <code>equals()</code> 和 <code>hashCode()</code> 方法的默认实现，这些方法都是模板方法。以下是 <code>AbstractList</code> 类中的部分核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java.util.AbstractList 类中的部分代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractCollection</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">// 省略其他方法</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> List)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        Iterator&lt;E&gt; e1 = iterator();<br>        ListIterator&lt;?&gt; e2 = ((List&lt;?&gt;) o).listIterator();<br>        <span class="hljs-keyword">while</span> (e1.hasNext() &amp;&amp; e2.hasNext()) &#123;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> e1.next();<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> e2.next();<br>            <span class="hljs-keyword">if</span> (!(o1==<span class="hljs-literal">null</span> ? o2==<span class="hljs-literal">null</span> : o1.equals(o2))) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> !(e1.hasNext() || e2.hasNext());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (E e : <span class="hljs-built_in">this</span>) &#123;<br>            hashCode = <span class="hljs-number">31</span> * hashCode + (e == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : e.hashCode());<br>        &#125;<br>        <span class="hljs-keyword">return</span> hashCode;<br>    &#125;<br><br>    <span class="hljs-comment">// 省略其他方法</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>equals()</code> 和 <code>hashCode()</code> 方法就是模板方法，它们定义了算法的骨架，具体的比较和哈希计算操作由子类实现。</p><p>模板方法模式是一种非常有用的设计模式，它提供了一种代码复用的方式，并允许在不改变算法结构的情况下，重新定义算法的某些步骤。在 JDK 中，模板方法模式被广泛应用于各种类库和框架中，如集合框架、IO 操作等。</p><hr><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p class="note note-primary">状态模式（State Pattern）是一种行为设计模式，它允许对象在其内部状态改变时改变其行为。这种模式的关键是将对象的状态封装成不同的类，并将行为委托给当前状态对象。状态模式可以使得对象的状态转换更加清晰、简单，并且避免了使用大量的条件语句。</p><p><strong>角色介绍</strong></p><ul><li><strong>Context（上下文）</strong>：定义客户端感兴趣的接口，维护一个当前状态对象。</li><li><strong>State（状态）</strong>：定义一个接口，用于封装与 Context 相关的行为。</li><li><strong>ConcreteState（具体状态）</strong>：实现 State 接口的具体状态类，负责处理与状态相关的操作。</li></ul><p><strong>应用示例</strong></p><p>下面是一个简单的示例，演示了如何使用状态模式来实现一个电梯控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 上下文类：电梯</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Elevator</span> &#123;<br>    <span class="hljs-keyword">private</span> State state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Elevator</span><span class="hljs-params">()</span> &#123;<br>        state = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClosedState</span>(); <span class="hljs-comment">// 初始化为关闭状态</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        state.open(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        state.close(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        state.move(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 状态接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Elevator elevator)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Elevator elevator)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(Elevator elevator)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体状态类：关闭状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosedState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Opening the door...&quot;</span>);<br>        elevator.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenState</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The door is already closed.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Moving the elevator...&quot;</span>);<br>        elevator.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MovingState</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体状态类：打开状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The door is already open.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Closing the door...&quot;</span>);<br>        elevator.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClosedState</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cannot move while the door is open.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体状态类：运行状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MovingState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cannot open the door while the elevator is moving.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cannot close the door while the elevator is moving.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(Elevator elevator)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The elevator is already moving.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Elevator</span> <span class="hljs-variable">elevator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Elevator</span>();<br><br>        elevator.open();<br>        elevator.close();<br>        elevator.move();<br>        elevator.open();<br>        elevator.move();<br>        elevator.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个示例中，<code>Elevator</code> 类是上下文类，负责维护当前状态，并将状态相关的操作委托给当前状态对象。<code>State</code> 接口定义了状态的行为，具体状态类实现了该接口，并负责处理与状态相关的操作。</p><p><strong>JDK 中的应用</strong></p><p>在 JDK 中，状态模式被广泛应用。其中一个典型的例子就是在 <code>java.awt.Component</code> 类中。这个类表示可视化组件，其中的 <code>setVisible()</code> 方法就是使用了状态模式。以下是 <code>Component</code> 类中的部分核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java.awt.Component 类中的部分代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> visible;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVisible</span><span class="hljs-params">(<span class="hljs-type">boolean</span> visible)</span> &#123;<br>        <span class="hljs-built_in">this</span>.visible = visible;<br>        <span class="hljs-keyword">if</span> (visible) &#123;<br>            <span class="hljs-comment">// 显示组件的相关操作</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 隐藏组件的相关操作</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 其他方法</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Component</code> 类维护了一个 <code>visible</code> 属性，用于表示组件的可见状态。根据这个状态的改变，<code>setVisible()</code> 方法会执行不同的操作，从而改变组件的行为。</p><p>状态模式是一种非常有用的设计模式，它可以使得对象在其内部状态改变时改变其行为。通过将状态封装成不同的类，并委托给当前状态对象处理相关操作，状态模式使得代码更加清晰、简单，并且避免了使用大量的条件语句。</p><hr><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p class="note note-primary">责任链模式（Chain of Responsibility Pattern）是一种行为设计模式，它允许多个对象都有机会处理请求，从而避免了请求的发送者和接收者之间的耦合关系。在责任链模式中，请求沿着一个链条传递，直到有一个对象处理它为止。</p><p><strong>角色介绍</strong></p><ul><li><strong>Handler（处理器）</strong>：定义了处理请求的接口，并维护了一个指向下一个处理器的引用。</li><li><strong>ConcreteHandler（具体处理器）</strong>：实现了处理器接口的具体处理器类，负责处理它所能处理的请求，并在不能处理时将请求传递给下一个处理器</li></ul><p><strong>应用示例</strong></p><p>考虑一个简单的购买审批系统，其中包含三个级别的审批人：经理、副总裁和总裁。如果购买金额小于等于1000元，经理可以直接批准；如果金额在1000到5000元之间，需要副总裁审批；如果金额超过5000元，需要总裁审批。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 处理器接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Approver</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest request)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体处理器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Approver</span> &#123;<br>    <span class="hljs-keyword">private</span> Approver nextApprover;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request.getAmount() &lt;= <span class="hljs-number">1000</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Manager approves purchase request #&quot;</span> + request.getId());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nextApprover != <span class="hljs-literal">null</span>) &#123;<br>            nextApprover.processRequest(request);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;No one can handle the purchase request #&quot;</span> + request.getId());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextApprover</span><span class="hljs-params">(Approver nextApprover)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nextApprover = nextApprover;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VicePresident</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Approver</span> &#123;<br>    <span class="hljs-keyword">private</span> Approver nextApprover;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request.getAmount() &lt;= <span class="hljs-number">5000</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Vice President approves purchase request #&quot;</span> + request.getId());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nextApprover != <span class="hljs-literal">null</span>) &#123;<br>            nextApprover.processRequest(request);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;No one can handle the purchase request #&quot;</span> + request.getId());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextApprover</span><span class="hljs-params">(Approver nextApprover)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nextApprover = nextApprover;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">President</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Approver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(PurchaseRequest request)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;President approves purchase request #&quot;</span> + request.getId());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 请求类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PurchaseRequest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> amount;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PurchaseRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.amount = amount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAmount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> amount;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构建责任链</span><br>        <span class="hljs-type">Approver</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>();<br>        <span class="hljs-type">Approver</span> <span class="hljs-variable">vicePresident</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VicePresident</span>();<br>        <span class="hljs-type">Approver</span> <span class="hljs-variable">president</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">President</span>();<br><br>        manager.setNextApprover(vicePresident);<br>        vicePresident.setNextApprover(president);<br><br>        <span class="hljs-comment">// 创建购买请求</span><br>        <span class="hljs-type">PurchaseRequest</span> <span class="hljs-variable">request1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PurchaseRequest</span>(<span class="hljs-number">1</span>, <span class="hljs-number">800</span>);<br>        <span class="hljs-type">PurchaseRequest</span> <span class="hljs-variable">request2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PurchaseRequest</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3500</span>);<br>        <span class="hljs-type">PurchaseRequest</span> <span class="hljs-variable">request3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PurchaseRequest</span>(<span class="hljs-number">3</span>, <span class="hljs-number">7000</span>);<br><br>        <span class="hljs-comment">// 处理购买请求</span><br>        manager.processRequest(request1);<br>        manager.processRequest(request2);<br>        manager.processRequest(request3);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>JDK 中的应用</strong></p><p>在 JDK 中，责任链模式被广泛应用。其中一个典型的例子是 Servlet 中的过滤器链。Servlet 过滤器链是一系列过滤器按照顺序链接在一起，每个过滤器负责处理请求或者将请求传递给下一个过滤器。以下是 Servlet 过滤器链的核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FilterChain</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Filter</code> 接口代表一个过滤器，其中的 <code>doFilter()</code> 方法负责处理请求或者将请求传递给下一个过滤器。而 <code>FilterChain</code> 接口表示一个过滤器链，其中的 <code>doFilter()</code> 方法将请求传递给下一个过滤器。</p><hr><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><p class="note note-primary">解释器模式（Interpreter Pattern）是一种行为设计模式，用于定义一个语言的文法，并且提供解释器来解释该语言中的语句。这种模式将语言中的语句表示为抽象语法树，并提供一种方式来递归地解释该树中的节点。</p><p><strong>角色介绍</strong></p><ul><li><strong>AbstractExpression（抽象表达式）</strong>：声明了一个抽象的解释方法 <code>interpret()</code>，所有的具体表达式都继承自该抽象类。</li><li><strong>TerminalExpression（终结符表达式）</strong>：实现了抽象表达式接口，表示语言中的终结符，即不可再分解的最小单元。</li><li><strong>NonterminalExpression（非终结符表达式）</strong>：实现了抽象表达式接口，表示语言中的非终结符，即可再分解的复合单元。</li><li><strong>Context（上下文）</strong>：包含解释器需要的一些全局信息或状态。</li></ul><p><strong>应用示例</strong></p><p>假设我们需要实现一个简单的表达式解析器，可以解析简单的四则运算表达式，例如 <code>1 + 2 - 3 * 4</code>。我们可以使用解释器模式来实现这个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象表达式接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span>;<br>&#125;<br><br><span class="hljs-comment">// 终结符表达式：数字</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumberExpression</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 非终结符表达式：加法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> Expression left;<br>    <span class="hljs-keyword">private</span> Expression right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">return</span> left.interpret(context) + right.interpret(context);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 非终结符表达式：减法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubstractExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> Expression left;<br>    <span class="hljs-keyword">private</span> Expression right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SubstractExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">return</span> left.interpret(context) - right.interpret(context);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 非终结符表达式：乘法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiplyExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> Expression left;<br>    <span class="hljs-keyword">private</span> Expression right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MultiplyExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-keyword">return</span> left.interpret(context) * right.interpret(context);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 上下文类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-comment">// 如果需要的话，可以在这里添加一些上下文信息</span><br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构建解释器表达式树：1 + 2 - 3 * 4</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubstractExpression</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddExpression</span>( <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(<span class="hljs-number">1</span>), <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(<span class="hljs-number">2</span>) <br>            ), <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultiplyExpression</span>( <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(<span class="hljs-number">3</span>), <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(<span class="hljs-number">4</span>) <br>            )<br>        );<br><br>        <span class="hljs-comment">// 创建上下文对象</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br><br>        <span class="hljs-comment">// 解释表达式并输出结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> expression.interpret(context);<br>        System.out.println(<span class="hljs-string">&quot;Result: &quot;</span> + result); <span class="hljs-comment">// 输出：-9</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>解释器模式是一种在特定场景下非常有用的设计模式，它可以帮助我们构建简单的语言解释器，实现对特定语言的解析和执行。通过将语言表示为抽象语法树，并提供一种递归的解释方式，解释器模式使得对复杂语言的处理变得简单、清晰。</p><hr><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p class="note note-primary">中介者模式（Mediator Pattern）是一种行为设计模式，它允许对象之间通过一个中介对象进行通信，而不直接相互引用。这种模式可以减少对象之间的耦合，使系统更易于维护和扩展。</p><p><strong>角色介绍</strong></p><ul><li><strong>Mediator（中介者）</strong>：定义了一个接口用于与各个同事对象通信。</li><li><strong>ConcreteMediator（具体中介者）</strong>：实现了中介者接口，负责协调各个同事对象之间的交互。</li><li><strong>Colleague（同事）</strong>：定义了一个接口用于与中介者进行通信。</li><li><strong>ConcreteColleague（具体同事）</strong>：实现了同事接口，每个具体同事对象都知道中介者对象，并通过中介者对象来与其他同事对象通信。</li></ul><p><strong>应用示例</strong></p><p>考虑一个简单的聊天室系统，其中有多个用户可以在聊天室中发送消息。我们可以使用中介者模式来实现该聊天室系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中介者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ChatMediator</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message, User user)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体中介者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRoom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChatMediator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message, User user)</span> &#123;<br>        System.out.println(user.getName() + <span class="hljs-string">&quot; sends message: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 同事接口</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">protected</span> ChatMediator mediator;<br>    <span class="hljs-keyword">protected</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(ChatMediator mediator, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(String message)</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicUser</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BasicUser</span><span class="hljs-params">(ChatMediator mediator, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(mediator, name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        mediator.sendMessage(message, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot; receives message: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ChatMediator</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatRoom</span>();<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicUser</span>(mediator, <span class="hljs-string">&quot;Alice&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicUser</span>(mediator, <span class="hljs-string">&quot;Bob&quot;</span>);<br><br>        mediator.sendMessage(<span class="hljs-string">&quot;Hello, everyone!&quot;</span>, user1);<br>        user2.sendMessage(<span class="hljs-string">&quot;Hi, Alice!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>中介者模式是一种非常有用的设计模式，它可以帮助我们降低系统中对象之间的耦合度，提高代码的可维护性和可扩展性。通过引入一个中介者对象来管理对象之间的通信，中介者模式使得系统更易于理解和修改。</p><hr><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p class="note note-primary">访问者模式（Visitor Pattern）是一种行为设计模式，用于在不修改现有代码的情况下，向对象结构中添加新操作。该模式将操作封装到访问者对象中，并在对象结构中的每个元素上应用访问者，从而实现新的操作。</p><p><strong>角色介绍</strong></p><ul><li><strong>Visitor（访问者）</strong>：定义了一个访问方法，用于接受不同类型元素的访问。</li><li><strong>ConcreteVisitor（具体访问者）</strong>：实现了访问者接口，提供了对元素的具体访问逻辑。</li><li><strong>Element（元素）</strong>：定义了一个接受访问者的方法，用于接受访问者的访问。</li><li><strong>ConcreteElement（具体元素）</strong>：实现了元素接口，提供了对访问者的具体接受方法。</li><li><strong>ObjectStructure（对象结构）</strong>：维护了一个元素的集合，并提供了一个接受访问者的方法。</li></ul><p><strong>应用示例</strong></p><p>假设我们有一个简单的图形界面系统，其中包含不同类型的图形元素，如圆形、矩形等。我们希望对这些图形元素进行不同的操作，比如计算面积、绘制等。我们可以使用访问者模式来实现这个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 访问者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShapeVisitor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Circle circle)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Rectangle rectangle)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体访问者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShapeVisitor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Circle circle)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> Math.PI * Math.pow(circle.getRadius(), <span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;Area of circle: &quot;</span> + area);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Rectangle rectangle)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> rectangle.getWidth() * rectangle.getHeight();<br>        System.out.println(<span class="hljs-string">&quot;Area of rectangle: &quot;</span> + area);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 元素接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(ShapeVisitor visitor)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体元素类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getRadius</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> radius;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(ShapeVisitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> width, <span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.width = width;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWidth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(ShapeVisitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 对象结构类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeCollection</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Shape&gt; shapes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addShape</span><span class="hljs-params">(Shape shape)</span> &#123;<br>        shapes.add(shape);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(ShapeVisitor visitor)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Shape shape : shapes) &#123;<br>            shape.accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ShapeCollection</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeCollection</span>();<br>        collection.addShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">5</span>));<br>        collection.addShape(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br><br>        <span class="hljs-type">ShapeVisitor</span> <span class="hljs-variable">areaVisitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AreaVisitor</span>();<br>        collection.accept(areaVisitor);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>访问者模式是一种非常有用的设计模式，它可以帮助我们在不修改现有代码的情况下，向对象结构中添加新的操作。通过将操作封装到访问者对象中，并在对象结构中的每个元素上应用访问者，访问者模式使得代码更加灵活和易于扩展。</p><hr><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><p class="note note-primary">备忘录模式（Memento Pattern）是一种行为设计模式，用于捕获对象的内部状态，并在不破坏对象封装性的情况下将其保存在外部，并在需要时恢复对象状态。这种模式有助于实现撤销操作和历史记录功能。</p><p><strong>角色介绍</strong></p><ul><li><strong>Originator（发起人）</strong>：负责创建备忘录对象，并可以使用备忘录对象恢复自身状态。</li><li><strong>Memento（备忘录）</strong>：负责存储发起人对象的内部状态。</li><li><strong>Caretaker（管理者）</strong>：负责保存备忘录对象，并在需要时将其返回给发起人对象。</li></ul><p><strong>应用示例</strong></p><p>假设我们有一个简单的文本编辑器，用户可以在其中输入文本，并且可以通过撤销功能回到之前的状态。我们可以使用备忘录模式来实现这个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 备忘录类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextMemento</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String text;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextMemento</span><span class="hljs-params">(String text)</span> &#123;<br>        <span class="hljs-built_in">this</span>.text = text;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 发起人类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextEditor</span> &#123;<br>    <span class="hljs-keyword">private</span> String text;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(String text)</span> &#123;<br>        <span class="hljs-built_in">this</span>.text = text;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TextMemento <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMemento</span>(text);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restore</span><span class="hljs-params">(TextMemento memento)</span> &#123;<br>        <span class="hljs-built_in">this</span>.text = memento.getText();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 管理者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">History</span> &#123;<br>    <span class="hljs-keyword">private</span> Stack&lt;TextMemento&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(TextMemento memento)</span> &#123;<br>        stack.push(memento);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TextMemento <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stack.pop();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TextEditor</span> <span class="hljs-variable">editor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEditor</span>();<br>        <span class="hljs-type">History</span> <span class="hljs-variable">history</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">History</span>();<br><br>        editor.setText(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>        history.push(editor.save());<br>        System.out.println(<span class="hljs-string">&quot;Current text: &quot;</span> + editor.getText());<br><br>        editor.setText(<span class="hljs-string">&quot;Java Design Patterns&quot;</span>);<br>        history.push(editor.save());<br>        System.out.println(<span class="hljs-string">&quot;Current text: &quot;</span> + editor.getText());<br><br>        <span class="hljs-comment">// 撤销一次</span><br>        editor.restore(history.pop());<br>        System.out.println(<span class="hljs-string">&quot;Current text after undo: &quot;</span> + editor.getText());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>在这个示例中，<code>TextEditor</code> 类充当了发起人角色，负责创建备忘录对象并保存和恢复状态。</li><li><code>TextMemento</code> 类充当了备忘录角色，负责存储发起人对象的内部状态。</li><li><code>History</code> 类充当了管理者角色，负责保存备忘录对象，并在需要时将其返回给发起人对象。</li></ul><p>备忘录模式是一种非常有用的设计模式，它可以帮助我们实现撤销操作和历史记录功能，而不破坏对象的封装性。通过将对象的状态保存在外部，并在需要时恢复状态，备忘录模式使得程序更加灵活和易于维护。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>行为型模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重拾设计模式（二）</title>
    <link href="/posts/509408b0/"/>
    <url>/posts/509408b0/</url>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p class="note note-primary">适配器模式（Adapter Pattern）将一个类的接口转换成客户端所希望的另一个接口，适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><blockquote><p>用电器做例子，笔记本电脑的插头一般都是三相的，即除了阳极、阴极外，还有一个地极。而有些地方的电源插座却只有两极，没有地极。电源插座与笔记本电脑的电源插头不匹配使得笔记本电脑无法使用。这时候一个三相到两相的转换器（适配器）就能解决此问题，而这正像是本模式所做的事情。</p></blockquote><p>适配器模式有<strong>类的适配器模式</strong>和<strong>对象的适配器模式</strong>两种不同的形式。</p><h3 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h3><p class="note note-primary">类的适配器模式把适配的类的API转换成为目标类的API。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201630926.png"></p><p>在上图中可以看出，Adaptee类并没有sampleOperation2()方法，而客户端则期待这个方法。为使客户端能够使用Adaptee类，提供一个中间环节，即类Adapter，把Adaptee的API与Target类的API衔接起来。Adapter与Adaptee是继承关系，这决定了这个适配器模式是类的。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201631845.png"></p><p><strong>Target</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这是源类Adaptee也有的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation1</span><span class="hljs-params">()</span>; <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这是源类Adapteee没有的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation2</span><span class="hljs-params">()</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>上面给出的是目标角色的源代码，这个角色是以一个JAVA接口的形式实现的。可以看出，这个接口声明了两个方法：sampleOperation1()和sampleOperation2()。而源角色Adaptee是一个具体类，它有一个sampleOperation1()方法，但是没有sampleOperation2()方法。</p><p><strong>Adaptee</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation1</span><span class="hljs-params">()</span>&#123;&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>适配器角色Adapter扩展了Adaptee,同时又实现了目标(Target)接口。由于Adaptee没有提供sampleOperation2()方法，而目标接口又要求这个方法，因此适配器角色Adapter实现了这个方法。</p><p><strong>Adapter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Adaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 由于源类Adaptee没有方法sampleOperation2()</span><br><span class="hljs-comment">     * 因此适配器补充上这个方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//写相关的代码</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a>对象的适配器模式</h3><p class="note note-primary">与类的适配器模式一样，对象的适配器模式把被适配的类的API转换成为目标类的API，与类的适配器模式不同的是，对象的适配器模式不是使用继承关系连接到Adaptee类，而是使用委派关系连接到Adaptee类</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201634934.png"></p><p>从上图可以看出，Adaptee类并没有sampleOperation2()方法，而客户端则期待这个方法。为使客户端能够使用Adaptee类，需要提供一个包装(Wrapper)类Adapter。这个包装类包装了一个Adaptee的实例，从而此包装类能够把Adaptee的API与Target类的API衔接起来。Adapter与Adaptee是委派关系，这决定了适配器模式是对象的。</p><p><strong>Target</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这是源类Adaptee也有的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation1</span><span class="hljs-params">()</span>; <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这是源类Adapteee没有的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation2</span><span class="hljs-params">()</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Adaptee</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation1</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Adapter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> &#123;<br>    <span class="hljs-keyword">private</span> Adaptee adaptee;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adapter</span><span class="hljs-params">(Adaptee adaptee)</span>&#123;<br>        <span class="hljs-built_in">this</span>.adaptee = adaptee;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 源类Adaptee有方法sampleOperation1</span><br><span class="hljs-comment">     * 因此适配器类直接委派即可</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.adaptee.sampleOperation1();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 源类Adaptee没有方法sampleOperation2</span><br><span class="hljs-comment">     * 因此由适配器类需要补充此方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sampleOperation2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//写相关的代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类适配器和对象适配器"><a href="#类适配器和对象适配器" class="headerlink" title="类适配器和对象适配器"></a>类适配器和对象适配器</h3><p>●<strong>类适配器</strong>使用对象继承的方式，是静态的定义方式；而<strong>对象适配器</strong>使用对象组合的方式，是动态组合的方式。</p><p>●<strong>对于类适配器</strong>，由于适配器直接继承了Adaptee，使得适配器不能和Adaptee的子类一起工作，因为继承是静态的关系，当适配器继承了Adaptee后，就不可能再去处理  Adaptee的子类了。</p><p> <strong>对于对象适配器</strong>，一个适配器可以把多种不同的源适配到同一个目标。换言之，同一个适配器可以把源类和它的子类都适配到目标接口。因为对象适配器采用的是对象组合的关系，只要对象类型正确，是不是子类都无所谓。</p><p>●<strong>对于类适配器</strong>，适配器可以重定义Adaptee的部分行为，相当于子类覆盖父类的部分实现方法。</p><p> <strong>对于对象适配器</strong>，要重定义Adaptee的行为比较困难，这种情况下，需要定义Adaptee的子类来实现重定义，然后让适配器组合子类。虽然重定义Adaptee的行为比较困难，但是想要增加一些新的行为则方便的很，而且新增加的行为可同时适用于所有的源。</p><p>●<strong>对于类适配器</strong>，仅仅引入了一个对象，并不需要额外的引用来间接得到Adaptee。</p><p> <strong>对于对象适配器</strong>，需要额外的引用来间接得到Adaptee。</p><p><strong>建议尽量使用对象适配器的实现方式</strong>，多用合成&#x2F;聚合、少用继承。当然，具体问题具体分析，根据需要来选用实现方式，最适合的才是最好的。</p><h3 id="缺省适配模式"><a href="#缺省适配模式" class="headerlink" title="缺省适配模式"></a>缺省适配模式</h3><p class="note note-primary">缺省适配(Default Adapter)模式为一个接口提供缺省实现，这样子类型可以从这个缺省实现进行扩展，而不必从原有接口进行扩展。作为适配器模式的一个特例，缺省是适配模式在JAVA语言中有着特殊的应用。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201706389.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AbstractService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serviceOperation1</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">serviceOperation2</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">serviceOperation3</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AbstractService</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serviceOperation1</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">serviceOperation2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">serviceOperation3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以看到，接口AbstractService要求定义三个方法，分别是serviceOperation1()、serviceOperation2()、serviceOperation3()；而抽象适配器类ServiceAdapter则为这三种方法都提供了平庸的实现。因此，任何继承自抽象类ServiceAdapter的具体类都可以选择它所需要的方法实现，而不必理会其他的不需要的方法。</p><p><strong>适配器模式的用意</strong>是要改变源的接口，以便于目标接口相容。<strong>缺省适配的用意稍有不同</strong>，它是为了方便建立一个不平庸的适配器类而提供的一种平庸实现。</p><p>在任何时候，如果不准备实现一个接口的所有方法时，就可以使用“缺省适配模式”制造一个抽象类，给出所有方法的平庸的具体实现。这样，从这个抽象类再继承下去的子类就不必实现所有的方法了。</p></blockquote><hr><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p class="note note-primary">桥接模式的本质是把抽象(Abstraction)与行为实现(Implementation)分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展，基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。</p><p><strong>示例</strong></p><p>一个咖啡店卖咖啡，卖出的咖啡可以从几个角度来看：</p><ol><li><p>口味：摩卡、拿铁、美式等；</p></li><li><p>容量：大杯、中杯、小杯等；</p></li><li><p>添加物：牛奶、糖、蜂蜜等；</p></li><li><p>温度：热、常温、冷等；</p></li></ol><p>如果需要设计一个点餐系统，来生成咖啡订单，如何在系统中将上面说到的拥有4个属性的咖啡生成呢？</p><p><strong>第一种方法</strong></p><p>为每种咖啡组合编写不同的类，如下</p><ol><li><p>大杯热牛奶摩卡类；</p></li><li><p>中杯热牛奶摩卡类；</p></li><li><p>小杯热牛奶摩卡类；</p></li><li><p>大杯热蜂蜜摩卡类； ……</p></li></ol><p>试想一下，需要多少各类？假设4个维度分别可选的值是a、b、c、d，那么需要定义的类就是a x b x c x d种。而且每种属性都是固化到特定的类，没法复用，按照这个方法要定义3x3x3x3&#x3D;81个类。</p><p><strong>第二种方法</strong></p><p>针对第一种方法，我们能不能单独定义每种属性，并让每种属性能够复用，然后将他们组合&#x2F;聚合起来形成一杯咖啡呢？这样就减少每个属性的重复定义了。 例如： 1. 口味：摩卡、拿铁、美式等分别定义一个类；3个类 2. 容量：大杯、中杯、小杯等分别定义一个类；3个类 3. 添加物：牛奶、糖、蜂蜜等分别定义一个类；3个类 4. 温度：热、常温、冷等分别定义一个类；3个类</p><p>如果能够找到一种方法把这4个维度组合起来，是不是总的类数就变成a+b+c+d&#x3D;3+3+3+3&#x3D;12个类？类的数量锐减。</p><p>那么如何将这个4个维度组合起来实现一杯咖啡呢？</p><p><strong>桥接模式的原理</strong></p><p class="note note-primary">桥接模式就是为了实现上面的第二种方法的，先进行抽象，然后通过桥接将属性连接起来。</p><p>看一下下面原理图（初步思路）：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201725509.png"></p><p>再优化一下，进一步思路如下图：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201726170.png"></p><p>想一下，咖啡的最重要的属性就是口味（也可以说是本质的属性），其它的属性相对来说不是最重要的，那么我们就让口味直接通过继承的方式实现属性的集成，其它三个属性为了提升替换性&#x2F;重用性，可以也进行一个抽象类的定义，然后去具体实现。</p><p>这样设计后，通过组合&#x2F;聚合实现了咖啡多个属性的集成，减少了类的数量。</p><p>图中组合&#x2F;聚合关系就是桥接模式中Bridge的核心要义，通过组合&#x2F;聚合将多个属性连接起来的。</p><p>最后就形成了桥接模式的通用示意图，如下：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201730057.png"></p><p>**桥接模式的角色：</p><ul><li><p> <strong>抽象化(Abstraction)角色</strong>：抽象化给出的定义，并保存一个对实现化对象的引用，就是上面所说的Coffe抽象类。</p></li><li><p><strong>修正抽象化(RefinedAbstraction)角色</strong>：扩展抽象化角色，改变和修正父类对抽象化的定义，就是上面的<strong>口味实现类</strong>。  </p></li><li><p><strong>实现化(Implementor)角色</strong>：这个角色给出实现化角色的接口，但不给出具体的实现。必须指出的是，这个接口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。实现化角色应当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一层的操作。就是上面的<strong>容量、温度、添加物抽象类</strong>。  </p></li><li><p><strong>具体实现化(ConcreteImplementor)角色</strong>：这个角色给出实现化角色接口的具体实现，就是上面的<strong>容量、温度、添加物实现类</strong>。</p></li></ul><blockquote><ol><li>抽象化(Abstraction)角色：Coffe抽象类-AbstractCoffe类的定义</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractCoffe</span> &#123;<br>    <span class="hljs-comment">// 重点：此处就是连接其它属性的关键，通过成员变量的方式聚合了其它属性</span><br>    ICapacity capacity;<br>    IAdditives additives;<br>    ITemperature temperature;<br><br>    <span class="hljs-comment">// 此处通过有参构造的方式接受客户端想要的咖啡属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractCoffe</span><span class="hljs-params">(ICapacity capacity,IAdditives additives,ITemperature temperature)</span>&#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        <span class="hljs-built_in">this</span>.additives = additives;<br>        <span class="hljs-built_in">this</span>.temperature = temperature;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Order</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>修正抽象化(RefinedAbstraction)角色:口味实现类-MocaCoffe类定义</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MocaCoffe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractCoffe</span>&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MocaCoffe</span><span class="hljs-params">(ICapacity capacity,IAdditives additives,ITemperature temperature)</span>&#123;<br>        <span class="hljs-built_in">super</span>(capacity, additives, temperature);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Order</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始制作摩卡咖啡：&quot;</span>);<br>        capacity.SetCupCapacity();<br>        additives.AddAdditives();<br>        temperature.SetTemperature();<br>        System.out.println(count+<span class="hljs-string">&quot; 杯Moca Coffe制作完成！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//本例中就实现了一种类型，就是摩卡，还可以实现其它的口味类型，代码类似，此处就省略了。</span><br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>实现化(Implementor)角色:容量、温度、添加物抽象类-ICapacity、ITemperature、IAdditives抽象类定义</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）容量抽象类ICapacity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICapacity</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetCupCapacity</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（2）温度抽象类ITemperature</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITemperature</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetTemperature</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（3）添加物抽象类IAdditives</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAdditives</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AddAdditives</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol start="4"><li>具体实现化(ConcreteImplementor)角色:容量、温度、添加物实现类-Capacity、Temperature、Additives抽象类定义</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">（1）Capacity实现类-3种</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 大杯</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LargeCapacity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICapacity</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetCupCapacity</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;制作杯子尺寸：Large&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//中杯</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiddleCapacity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICapacity</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetCupCapacity</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;制作杯子尺寸：Middle&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//小杯</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallCapacity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICapacity</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetCupCapacity</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;制作杯子尺寸：Small&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">（2）Temperature实现类-3种</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 热饮</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotTemperature</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITemperature</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetTemperature</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;加热温度至：Hot&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 冷饮</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NormalTemperature</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITemperature</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetTemperature</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;加热温度至：Normal&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 常温</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ColdTemperature</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ITemperature</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetTemperature</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;加热温度至：Cold&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">（3）Additives实现类-2种</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 加奶</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MilkAdditives</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAdditives</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AddAdditives</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;添加 MILK 成功！&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 加糖</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SugarAdditives</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAdditives</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AddAdditives</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;添加 SUGAR 成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol start="5"><li>客户端类定义</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 客户端传入想要的咖啡各个属性的具体对象</span><br>        <span class="hljs-type">AbstractCoffe</span> <span class="hljs-variable">mocaCoffe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MocaCoffe</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MiddleCapacity</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">SugarAdditives</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">ColdTemperature</span>());<br>        mocaCoffe.Order(<span class="hljs-number">4</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>抽象与实现分离，扩展能力强，符合开闭原则。  </p></li><li><p>实现细节对客户透明。  </p></li><li><p>减少了因为继承带来的类爆炸。</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>抽象难度大；  </p></li><li><p>类之间的关系变得复杂。</p></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><p>某个类有多个的维度的变化，如果用继承就会使项目变的臃肿，会产生许多的子类。  </p></li><li><p>抽象的部分和实现的部分都应该可以扩展。</p></li></ul><hr><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p class="note note-primary">组合模式（Composite Pattern）是一种结构型设计模式，允许你将对象组合成树形结构以表示“整体-部分”关系。组合模式使得客户端对单个对象和组合对象的使用具有一致性，从而可以将复杂的对象结构简化为一组简单的递归关系。<br/>在组合模式中，对象被组织成树形结构，其中包括复合对象（组合）和叶子对象。复合对象可以包含多个叶子对象和其他复合对象，而叶子对象不能包含任何其他对象。这些对象具有相同的接口，客户端可以通过相同的方式使用它们。</p><p>组合模式通过以下几个组件实现：</p><ol><li>抽象组件（Component）：定义了组合对象和叶子对象的公共接口。</li><li>叶子组件（Leaf Component）：表示组合中的叶子对象，不能包含任何子对象。</li><li>复合组件（Composite Component）：表示组合中的复合对象，可以包含其他叶子对象和复合对象。</li><li>客户端（Client）：使用组合对象的客户端，通过组件的公共接口与组合对象进行交互。</li></ol><p>组合模式的优点包括：</p><ol><li>简化客户端代码：客户端可以像处理单个对象一样处理组合对象，无需关心其内部结构和类型。</li><li>灵活性：可以动态地添加或删除组合对象，而无需更改现有代码。</li><li>可扩展性：可以通过添加新的叶子和复合对象扩展现有组合对象。</li><li>符合单一职责原则：组合对象只负责管理其子对象，而具体的对象操作则交由叶子对象或复合对象实现。</li></ol><p>一个简单的组合模式示例是一个文件系统，其中目录可以包含其他目录和文件。在这种情况下，文件和目录都可以看作是组合对象，它们具有相同的接口，可以相互组合。这种结构可以通过组合模式实现，并将目录和文件表示为组合对象的复合和叶子。</p><p><strong>在Java中实现的简单demo</strong></p><blockquote><p>1.定义抽象组件（Component）接口，它是组合对象和叶子对象的公共接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.定义叶子组件（Leaf Component）类，它表示组合中的叶子对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 叶子对象的具体操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.定义复合组件（Composite Component）类，它表示组合中的复合对象，可以包含其他叶子对象和复合对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Component&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 复合对象的具体操作</span><br>        <span class="hljs-keyword">for</span> (Component child : children) &#123;<br>            child.operation();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span> &#123;<br>        children.add(component);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span> &#123;<br>        children.remove(component);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Component <span class="hljs-title function_">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> children.get(index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>4.定义客户端（Client）类，使用组合对象的客户端，通过组件的公共接口与组合对象进行交互。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">leaf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>();<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">leaf2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>();<br><br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">composite1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>();<br>        composite1.add(leaf1);<br>        composite1.add(leaf2);<br><br>        <span class="hljs-type">Component</span> <span class="hljs-variable">leaf3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>();<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">leaf4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>();<br><br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">composite2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>();<br>        composite2.add(leaf3);<br>        composite2.add(leaf4);<br>        composite2.add(composite1);<br><br>        composite2.operation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在这个例子中，我们创建了一个复合对象，它包含两个叶子对象和一个嵌套的复合对象。客户端代码可以像处理单个对象一样处理组合对象，而无需关心其内部结构和类型。在这个例子中，我们通过调用 <code>composite2.operation()</code> 方法，递归调用了复合对象和叶子对象的 <code>operation()</code> 方法。</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>当你需要表示对象的整体-部分层次结构时，可以使用组合模式。例如，文件系统中的目录和文件，GUI中的窗口和控件，组织结构图中的部门和员工等。</li><li>当你希望客户端能够统一处理复合对象和叶子对象时，可以使用组合模式。例如，你<strong>希望像处理单个对象一样处理组合对象，而无需区分它们的内部结构和类型</strong>。</li><li>当你需要以递归方式遍历复合对象中的所有元素时，可以使用组合模式。例如，你希望对文件系统中的目录和文件进行递归遍历，或对组织结构图中的部门和员工进行递归遍历。</li><li>当你需要添加或删除组合对象中的子元素时，可以使用组合模式。例如，你需要在文件系统中添加或删除目录和文件，或在组织结构图中添加或删除部门和员工。</li></ol><p>总之，组合模式适用于需要表示对象的整体-部分层次结构，并希望以统一的方式处理复合对象和叶子对象的场景。它可以使得代码更加灵活、易于扩展，并且符合面向对象设计的开闭原则。</p><hr><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p class="note note-primary">装饰器模式（Decorator Pattern）属于设计模式中的结构型模式，它是作为现有的类的一个包装。实现方式一般是创建一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。在想要增强某个对象的功能但是又不想改变该对象的代码时，可以引入装饰器模式。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201753494.png"></p><p>抽象组件（Component）：定义了原始对象和装饰器对象的共同接口，可以是抽象类或接口。<br>具体组件（ConcreteComponent）：实现了抽象组件接口，是需要被装饰的原始对象。<br>抽象装饰器（Decorator）：继承了抽象组件，持有一个抽象组件对象的引用，并定义了与抽象组件相同的接口。<br>具体装饰器（ConcreteDecorator）：继承了抽象装饰器，通过对抽象组件进行装饰，添加额外的功能。</p><p><strong>Component</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ConcreteComponent</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cappuccino</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;上一杯卡布奇诺！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Decorator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    Coffee coffee;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Decorator</span><span class="hljs-params">(Coffee coffee)</span> &#123;<br>        <span class="hljs-built_in">this</span>.coffee = coffee;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span> &#123;<br>        coffee.drink();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ConcreteDecorator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteDecorator</span><span class="hljs-params">(Coffee coffee)</span> &#123;<br>        <span class="hljs-built_in">super</span>(coffee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;上一杯加糖后的卡布奇诺！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//原对象</span><br>    <span class="hljs-type">Coffee</span> <span class="hljs-variable">cappuccino</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cappuccino</span>();<br>    cappuccino.drink();<br>    <span class="hljs-comment">//装饰对象</span><br>    <span class="hljs-type">Coffee</span> <span class="hljs-variable">decorator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteDecorator</span>(cappuccino);<br>    decorator.drink();<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p class="note note-primary">为子系统的接口提供一组统一的入口。外观模式定义了一个高层接口，这个接口使得子系统的更加容易使用。</p><p>在外观模式中，一个子系统的外部与其内部通信通过一个统一的外观类进行，外观类将客户类与子系统的内部复杂性分隔，使得客户类只需要与外观角色打交道，而不需要与子系统内部的很多其他对象交互。</p><p>外观模式是<strong>迪米特法则</strong>的一种具体实现，通过引入一个外观角色降低原有系统的复杂度，同时降低客户类与子系统的耦合度。</p><blockquote><p><strong>迪米特法则：</strong> 每一个软件单元对其他单元都只有最少的信息，而且局限于那些与本单元密切相关的软件单元。迪米特法则要求一个软件实体应该尽可能少地与其他实体发生相互作用。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402202050224.png"></p><p>一个典型的用户与一个系统（汽车）中的多个子系统（动力系统，离合器，变速器，油门）进行交互的情形，用户需要和所有的子系统交互，才能完成自己想要实现的功能，这其实是极不合理的，也极容易出错。</p><p>首先来看看各个子系统的定义，包括：动力系统、离合器、加速器、变速器四个子系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动力系统</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerSystem</span> &#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 汽车发动</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startUp</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;汽车发动。。。。&quot;</span>);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 汽车熄火</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeDown</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;汽车熄火。。。。&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 离合器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClutchSystem</span> &#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 踩下离合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">press</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;踩下离合。。。。&quot;</span>);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 松开离合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;松开离合。。。。&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 变速器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransmissionSystem</span> &#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 挂挡操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> gear 所挂档位</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shift</span><span class="hljs-params">(<span class="hljs-type">int</span> gear)</span> &#123;<br><span class="hljs-keyword">switch</span> (gear) &#123;<br><span class="hljs-keyword">case</span> -<span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;挂倒档。。。。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;挂空档。。。。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;挂一档。。。。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(<span class="hljs-string">&quot;挂二档。。。。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;挂三档。。。。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>System.out.println(<span class="hljs-string">&quot;挂四档。。。。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>System.out.println(<span class="hljs-string">&quot;挂五档。。。。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加速器，即油门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AcceleratorSystem</span> &#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 踩下油门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">press</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;踩下油门。。。。&quot;</span>);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 松开油门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;松开油门。。。。&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来该看看外观的定义了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 外观类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Facade</span> &#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 示意方法，停车起步</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parkingStart</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 创建需要转调的子系统对象实例</span><br><span class="hljs-type">ClutchSystem</span> <span class="hljs-variable">clutchSystem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClutchSystem</span>();<br><span class="hljs-type">TransmissionSystem</span> <span class="hljs-variable">transmissionSystem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransmissionSystem</span>();<br><span class="hljs-type">AcceleratorSystem</span> <span class="hljs-variable">acceleratorSystem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceleratorSystem</span>();<br><span class="hljs-comment">// 转调子系统的功能</span><br>clutchSystem.press();<br>transmissionSystem.shift(<span class="hljs-number">1</span>);<br>clutchSystem.release();<br>acceleratorSystem.press();<br>System.out.println(<span class="hljs-string">&quot;汽车开始动了。。。。&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个客户端类测试一下，示例代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <br><span class="hljs-type">PowerSystem</span> <span class="hljs-variable">powerSystem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PowerSystem</span>();<br><span class="hljs-comment">// 发动汽车</span><br><span class="hljs-comment">// 此处作为示意，用户可以跳过外观，直接与子系统进行交互</span><br>powerSystem.startUp();<br><span class="hljs-comment">// 创建外观实例</span><br><span class="hljs-type">Facade</span> <span class="hljs-variable">facade</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Facade</span>();<br><span class="hljs-comment">// 停车起步</span><br>facade.parkingStart();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">并未把“发动汽车”这个步骤一并加入的Facade对象中，主要是为了作一个示意：根据实际需要，用户是可以越过Facade层，直接与子系统进行交互的。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">汽车发动。。。。<br>踩下离合。。。。<br>挂一档。。。。<br>松开离合。。。。<br>踩下油门。。。。<br>汽车开始动了。。。。<br></code></pre></td></tr></table></figure><h3 id="抽象外观类"><a href="#抽象外观类" class="headerlink" title="抽象外观类"></a>抽象外观类</h3><p class="note note-primary">在上述外观模式中，如果需要增加或删除与外观类交互的子系统类，必须修改原有代码，**违背开闭原则**，因此可以通过引入**抽象外观类**对系统进行改进。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402202056641.png"></p><p>引入抽象外观类之后，客户端可以针对抽象层编程，对于新的业务需求，不需要修改原有的外观类，直接增加一个新的具体外观类即可，符合开闭原则。</p><hr><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p class="note note-primary">享元模式（Flyweight Pattern）是一种结构型设计模式，它旨在通过共享对象来最大限度地减少内存使用和提高性能。</p>>享元模式的核心思想是将对象的状态（内部数据）分为内部状态（Intrinsic State）和外部状态（Extrinsic State）。内部状态是对象可以共享的状态，它独立于对象的场景，可以被多个对象共享。外部状态是对象特定于场景的状态，它不可共享，每个对象需要自己管理。>>享元模式的关键是引入一个享元工厂（Flyweight Factory），它负责创建和管理享元对象。当客户端需要对象时，它首先向享元工厂请求对象。如果对象已存在，享元工厂直接返回现有对象；如果对象不存在，享元工厂创建一个新的对象，并在需要时进行共享。<p>以下是享元模式的组成部分：</p><ol><li>享元接口（Flyweight）：定义共享对象的接口，包括操作共享状态的方法。</li><li>具体享元（Concrete Flyweight）：实现享元接口，并存储内部状态。</li><li>享元工厂（Flyweight Factory）：负责创建和管理享元对象，确保对象的共享和复用。</li></ol><p>下面是一个简单的 Java 代码示例，演示了如何使用享元模式来共享数字对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// Flyweight 接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Number</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNumber</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// ConcreteFlyweight 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteNumber</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Number</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNumber</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Printing number: &quot;</span> + value);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// FlyweightFactory 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Integer, Number&gt; numberMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Number <span class="hljs-title function_">getNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!numberMap.containsKey(value)) &#123;<br>            numberMap.put(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteNumber</span>(value));<br>        &#125;<br>        <span class="hljs-keyword">return</span> numberMap.get(value);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 获取共享的数字对象</span><br>        <span class="hljs-type">Number</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> NumberFactory.getNumber(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> NumberFactory.getNumber(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">// 输出结果</span><br>        number1.printNumber(); <span class="hljs-comment">// 输出：Printing number: 5</span><br>        number2.printNumber(); <span class="hljs-comment">// 输出：Printing number: 10</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个示例中，<code>NumberFactory</code> 充当享元工厂的角色，负责创建和管理数字对象。当客户端请求一个数字时，工厂首先检查对象是否已存在，如果存在则返回已有的对象，如果不存在则创建一个新的对象并添加到工厂中。这样就实现了数字对象的共享，避免了重复创建，节省了内存资源。</p><p>享元模式是一种非常有用的设计模式，可以在系统中存在大量相似对象时节省内存资源。通过共享对象的状态，可以显著减少对象的数量，提高系统的性能和效率。在实际开发中，我们可以根据具体的需求来应用享元模式，从而优化系统的设计和实现。</p><hr><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p class="note note-primary">代理模式是一种结构型设计模式，其主要目的是为其他对象提供一种代理以控制对这个对象的访问。代理对象通常充当客户端和实际对象之间的中介，它可以在访问实际对象之前或之后执行一些额外的操作，例如权限控制、延迟加载、缓存等。</p><p>代理模式包含以下关键角色：</p><ul><li><strong>Subject（抽象主题）</strong>：定义了代理对象和真实对象的公共接口，客户端通过这个接口访问真实对象和代理对象。</li><li><strong>RealSubject（真实主题）</strong>：定义了真实对象，是代理对象所代表的真实内容。</li><li><strong>Proxy（代理）</strong>：保存了一个引用，使得代理可以访问实际主题，同时提供了与主题相同的接口，客户端通过代理访问真实主题。</li></ul><p>下面是一个简单的 Java 代码示例，演示了如何使用代理模式来控制对实际对象的访问，并在访问前后执行额外的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Subject 接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// RealSubject 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> String filename;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealImage</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>        loadFromDisk(filename);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Displaying &quot;</span> + filename);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadFromDisk</span><span class="hljs-params">(String filename)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Loading &quot;</span> + filename + <span class="hljs-string">&quot; from disk&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Proxy 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> RealImage realImage;<br>    <span class="hljs-keyword">private</span> String filename;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyImage</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//延迟加载</span><br>        <span class="hljs-keyword">if</span> (realImage == <span class="hljs-literal">null</span>) &#123;<br>            realImage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealImage</span>(filename);<br>        &#125;<br>        realImage.display();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Image</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyImage</span>(<span class="hljs-string">&quot;test.jpg&quot;</span>);<br><br>        <span class="hljs-comment">// 图像将从磁盘加载</span><br>        image.display();<br>        System.out.println();<br><br>        <span class="hljs-comment">// 图像将不会从磁盘加载</span><br>        image.display();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个示例中，<code>Image</code> 接口定义了图片展示的公共方法 <code>display()</code>。<code>RealImage</code> 类表示真实的图片对象，而 <code>ProxyImage</code> 类充当了代理，负责控制对真实图片对象的访问。当客户端首次调用 <code>display()</code> 方法时，<code>ProxyImage</code> 会创建一个真实图片对象，并调用其 <code>display()</code> 方法展示图片。之后再次调用 <code>display()</code> 方法时，由于已经创建了真实图片对象，代理将直接调用真实图片对象的 <code>display()</code> 方法展示图片。</p><p>再来看一个关于缓存的示例，<strong>缓存</strong>是指将经常使用的数据存储在临时存储区域中，以加快数据访问速度。通过代理模式，我们可以在代理类中添加缓存逻辑，然后在访问真实对象之前先检查缓存是否存在。下面是一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// 接口：数据访问</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">DataAccessor</span> &#123;<br>    String <span class="hljs-title function_">getData</span><span class="hljs-params">(String key)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体实现类：真实数据访问</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealDataAccessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataAccessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span><span class="hljs-params">(String key)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Fetching data from database for key: &quot;</span> + key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Data for &quot;</span> + key;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理类：缓存代理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CachingProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataAccessor</span> &#123;<br>    <span class="hljs-keyword">private</span> DataAccessor realDataAccessor;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; cache;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CachingProxy</span><span class="hljs-params">()</span> &#123;<br>        realDataAccessor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealDataAccessor</span>();<br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cache.containsKey(key)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Retrieving data from cache for key: &quot;</span> + key);<br>            <span class="hljs-keyword">return</span> cache.get(key);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> realDataAccessor.getData(key);<br>            cache.put(key, data);<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建缓存代理</span><br>        <span class="hljs-type">DataAccessor</span> <span class="hljs-variable">dataAccessor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CachingProxy</span>();<br><br>        <span class="hljs-comment">// 第一次访问时从数据库获取数据，并缓存起来</span><br>        System.out.println(dataAccessor.getData(<span class="hljs-string">&quot;key1&quot;</span>));<br><br>        <span class="hljs-comment">// 第二次访问时直接从缓存获取数据</span><br>        System.out.println(dataAccessor.getData(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个示例中，<code>CachingProxy</code> 是缓存代理类，它在访问真实对象之前先检查缓存是否存在数据。</p><p>通过代理模式，我们可以很容易地实现延迟加载、权限控制、缓存等功能，并且不需要修改原始对象的代码，从而增强了代码的可维护性和灵活性。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>结构性模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重拾设计模式（一）</title>
    <link href="/posts/b138f59e/"/>
    <url>/posts/b138f59e/</url>
    
    <content type="html"><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><blockquote><p>请用C++、Java、C#或VB.NET任意一种面向对象语言实现一个计算器控制台程序，要求输入两个数和运算符号，得到结果。</p></blockquote><p>可以直接写，如下所示：<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041828241.png"></p><p>“且先不说出题人的意思，单就你现在的代码，就有很多不足的地方需要改进。”</p><ul><li>A、B、C、D命名不规范；</li><li>判断分支全用if，意味着每个条件都要判断；</li><li>除数为0会产生错误；</li><li>等等；</li></ul><p>最重要一点是，<strong>没有体现出面向对象</strong>的意思。</p><p><strong>考虑通过封装、继承、多态把程序的耦合度降低；<br>考虑用设计模式使得程序更加的灵活，容易修改，并且易于复用；</strong></p><p>试着以面向对象的形式改写例子：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042113078.png"><br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042113911.png"></p><p>首先是一个运算类，它有两个Number属性，主要用于计算器的前后数，然后有一个虚方法GetResult()，用于得到结果，然后我把加减乘除都写成了运算类的子类，继承它后，重写了GetResult()方法，这样如果要修改任何一个算法，就不需要提供其他算法的代码了。但问题来了，<strong>我如何让计算器知道我是希望用哪一个算法呢</strong>？</p><p>现在的问题其实就是如何去实例化对象的问题，教你一招‘简单工厂模式’，也就是说，到底要实例化谁，将来会不会增加实例化的对象，比如增加开根运算，这是很容易变化的地方，应该考虑用一个单独的类来做这个创造实例的过程，这就是工厂，来，我们看看这个类如何写。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042117297.png"></p><p>只需要输入特定的符号，工厂就实例化出合适的对象，通过多态，返回父类的方式实现计算器的结果：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042118942.png"></p><p>Q：如果有一天我们需要更改加法运算，我们只需要改哪里；</p><p>A：改OperationAdd就可以了。</p><p>Q：那么我们需要增加各种复杂运算，比如平方根，立方根，自然对数，正弦余弦等，如何做？</p><p>A：只要增加相应的运算子类，并且还需要去修改运算类工厂，在switch中增加分支。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042121776.png"></p><hr><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>再来看看工厂方法模式，与简单工厂模式还是有些差异。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042125151.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042126986.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042126723.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402042126384.png"></p><p><strong>简单工厂VS工厂方法</strong></p><blockquote><p>如果我现在需要增加其他运算，比如求M数的N次方，或者求M数的N次方根，这些功能的增加，在简单工厂里，我是先去加‘求M数的N次方’功能类，然后去更改工厂方法，当中加‘Case’语句来做判断，现在用了工厂方法，加功能类没问题，再加相关的工厂类，这也没问题，但要我再去更改客户端，这不等于不但没有减化难度，反而增加了很多类和方法，把复杂性增加了吗？为什么要这样？</p></blockquote><p>这其实就是工厂方法模式和简单工厂的区别所在。<strong>简单工厂模式的最大优点在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</strong></p><p>但问题也就在这里，如你所说，如果要加一个‘求M数的N次方’的功能，我们是一定需要给运算工厂类的方法里加‘Case’的分支条件的，修改原有的类？这可不是好办法，这就等于说，我们不但对扩展开放了，对修改也开放了，<strong>违背了开闭原则</strong>。</p><p>而<strong>工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在的，也就是说，工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行。你想要加功<br>能，本来是改工厂类的，而现在是修改客户端</strong>！</p><p><strong>工厂方法克服了简单工厂违背开放-封闭原则的缺点，又保持了封装对象创建过程的优点。</strong></p><hr><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身负责保存它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201501805.png"></p><blockquote><p>Singleton类，定义一个GetInstance操作，允许客户访问它的唯一实例。GetInstance是一个静态方法，主要负责创建自己的唯一实例。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201502791.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201502277.png"></p><h4 id="多线程时的单例"><a href="#多线程时的单例" class="headerlink" title="多线程时的单例"></a>多线程时的单例</h4><p class="note note-warning">多线程的程序中，多个线程同时，注意是同时访问Singleton类，调用GetInstance()方法，会有可能造成创建多个实例的。</p><blockquote><p>可以给进程一把锁来处理。这里需要解释一下lock语句的涵义，lock是确保当一个线程位于代码的临界区时，另一个线程不进入临界区。如果其他线程试图进入锁定的代码，则它将一直等待（即被阻止），直到该对象被释放。</p></blockquote><blockquote><p>线程安全的单例实现方式有很多，这里记录四种常见的。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201511950.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201511780.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201515253.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201512884.png"></p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><blockquote><p>虽然静态内部类方式实现单例模式通常被认为是线程安全的，但是有一种情况可能会导致它不安全，即在反序列化时。</p><p>在 Java 中，如果一个类可序列化（即实现了 <code>Serializable</code> 接口），那么它的实例可以被序列化为字节流，并在需要时反序列化成对象。但是，在反序列化过程中，会通过调用类的无参构造函数来创建对象，而不会调用类的任何其他构造函数。这就意味着，如果我们不小心让一个静态内部类单例模式的外部类可序列化，然后尝试对其进行反序列化，就会产生一个新的实例。</p><p>以静态内部类方式举例，要解决这个问题，可以通过增加一个特殊的方法 <code>readResolve()</code> 来解决。<code>readResolve()</code> 方法会在反序列化后调用，它允许我们返回原始的单例实例，而不是新创建的实例。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201518754.png"></p><hr><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示的意图时，我们需要应用于一个设计模式，‘建造者（Builder）模式’，又叫生成器模式。主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201520989.png"></p><blockquote><p>比如创建一个手机，需要cpu，主板、内存、屏幕等，通过一个代码示例可以很清晰的得知建造者模式的用途：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.pattern.builder3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">private</span> String cpu;<br>    <span class="hljs-keyword">private</span> String screen;<br>    <span class="hljs-keyword">private</span> String memory;<br>    <span class="hljs-keyword">private</span> String mainboard;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Phone&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//私有构造</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Phone</span><span class="hljs-params">(Builder builder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cpu = builder.cpu;<br>        <span class="hljs-built_in">this</span>.screen = builder.screen;<br>        <span class="hljs-built_in">this</span>.memory = builder.memory;<br>        <span class="hljs-built_in">this</span>.mainboard = builder.mainboard;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>        <span class="hljs-keyword">private</span> String cpu;<br>        <span class="hljs-keyword">private</span> String screen;<br>        <span class="hljs-keyword">private</span> String memory;<br>        <span class="hljs-keyword">private</span> String mainboard;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">cpu</span><span class="hljs-params">(String cpu)</span> &#123;<br>            <span class="hljs-built_in">this</span>.cpu = cpu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">screen</span><span class="hljs-params">(String screen)</span> &#123;<br>            <span class="hljs-built_in">this</span>.screen = screen;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">memory</span><span class="hljs-params">(String memory)</span> &#123;<br>            <span class="hljs-built_in">this</span>.memory = memory;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">mainboard</span><span class="hljs-params">(String mainboard)</span> &#123;<br>            <span class="hljs-built_in">this</span>.mainboard = mainboard;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>(<span class="hljs-built_in">this</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.pattern.builder3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>.Builder()<br>                .cpu(<span class="hljs-string">&quot;intel&quot;</span>)<br>                .mainboard(<span class="hljs-string">&quot;华硕&quot;</span>)<br>                .memory(<span class="hljs-string">&quot;金士顿&quot;</span>)<br>                .screen(<span class="hljs-string">&quot;三星&quot;</span>).build();<br>        System.out.println(phone);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象<br>1.如果你需要复制一些对象， 同时又希望代码独立于这些对象所属的具体类， 可以使用原型模式。<br>2.如果子类的区别仅在于其对象的初始化方式， 那么你可以使用该模式来减少子类的数量。 别人创建这些子类的目的可能是为了创建特定类型的对象。<br>3.Spring中原型bean的创建，就是原型模式的应用</p></blockquote><blockquote><p>原型模式的克隆分为浅克隆和深克隆。<br>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原  有属性所指向的对象的内存地址。<br>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201536440.png"></p><h4 id="古老方法"><a href="#古老方法" class="headerlink" title="古老方法"></a>古老方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 羊 实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> &#123;<br> <br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 产地</span><br>    <span class="hljs-keyword">public</span> SheepAddress sheepAddress;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sheep</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sheep</span><span class="hljs-params">(String name, SheepAddress sheepAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sheepAddress = sheepAddress;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Sheep&#123;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;, sheepAddress=&quot;</span> + sheepAddress +<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, sheepAddress);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> SheepAddress <span class="hljs-title function_">getSheepAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sheepAddress;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSheepAddress</span><span class="hljs-params">(SheepAddress sheepAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sheepAddress = sheepAddress;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 羊产地</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepAddress</span> &#123;<br> <br>    <span class="hljs-comment">//省</span><br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-comment">//市</span><br>    <span class="hljs-keyword">private</span> String city;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepAddress</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepAddress</span><span class="hljs-params">(String province, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SheepAddress&#123;province=&quot;</span> + province + <span class="hljs-string">&quot;, city=&#x27;&quot;</span> + city + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(province, city);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getProvince</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> province;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProvince</span><span class="hljs-params">(String province)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtTest</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>(<span class="hljs-string">&quot;多莉&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepAddress</span>(<span class="hljs-string">&quot;内蒙古&quot;</span>, <span class="hljs-string">&quot;呼和浩特市&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;sheep对象的hashcode:&quot;</span> + sheep.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode:&quot;</span> + sheep.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值：&quot;</span> + sheep);<br> <br>        <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>(<span class="hljs-string">&quot;多莉1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepAddress</span>(<span class="hljs-string">&quot;内蒙古1&quot;</span>, <span class="hljs-string">&quot;呼和浩特市1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;sheep对象的hashcode:&quot;</span> + sheep1.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode:&quot;</span> + sheep1.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值：&quot;</span> + sheep1);<br> <br>        <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>(<span class="hljs-string">&quot;多莉2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepAddress</span>(<span class="hljs-string">&quot;内蒙古2&quot;</span>, <span class="hljs-string">&quot;呼和浩特市2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;sheep对象的hashcode:&quot;</span> + sheep2.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode:&quot;</span> + sheep2.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值：&quot;</span> + sheep2);<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">sheep对象的hashcode:-150317243 sheepAddress对象的hashcode:-173282477 属性值：Sheep&#123;name=&#x27;多莉, sheepAddress=SheepAddress&#123;province=内蒙古, city=&#x27;呼和浩特市&#125;&#125;<br>sheep对象的hashcode:-364921810 sheepAddress对象的hashcode:-1076816753 属性值：Sheep&#123;name=&#x27;多莉1, sheepAddress=SheepAddress&#123;province=内蒙古1, city=&#x27;呼和浩特市1&#125;&#125;<br>sheep对象的hashcode:-364921747 sheepAddress对象的hashcode:-1076816721 属性值：Sheep&#123;name=&#x27;多莉2, sheepAddress=SheepAddress&#123;province=内蒙古2, city=&#x27;呼和浩特市2&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原型设计模式：浅拷贝，创建一只多莉羊并实现其Cloneable接口</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepClone06</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br> <br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 产地</span><br>    <span class="hljs-keyword">public</span> SheepAddress06 sheepAddress;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepClone06</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepClone06</span><span class="hljs-params">(String name, SheepAddress06 sheepAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sheepAddress = sheepAddress;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printSheep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;是一只克隆羊！&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, sheepAddress);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SheepClone06&#123;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;, sheepAddress=&quot;</span> + sheepAddress + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> SheepAddress06 <span class="hljs-title function_">getSheepAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sheepAddress;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSheepAddress</span><span class="hljs-params">(SheepAddress06 sheepAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sheepAddress = sheepAddress;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 羊的产区</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepAddress06</span> &#123;<br> <br>    <span class="hljs-comment">//省</span><br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-comment">//市</span><br>    <span class="hljs-keyword">private</span> String city;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepAddress06</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepAddress06</span><span class="hljs-params">(String province, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SheepAddress06&#123;province=&#x27;&quot;</span> + province + <span class="hljs-string">&quot;&#x27;, city=&#x27;&quot;</span> + city + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getProvince</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> province;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProvince</span><span class="hljs-params">(String province)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原型设计模式是一种创建型设计模式，允许一个对象再创建另一个可定制的对象，无需知道如何创建对象的细节，</span><br><span class="hljs-comment"> * springmvc框架中的单例（singleton）与多例（prototype）正是基于该设计模式而设计的。</span><br><span class="hljs-comment"> * 原型设计模式分为俩种，一种是浅拷贝，另一种是深拷贝。浅拷贝指的是对于基本数据类型和引用类型的变量通过值传递和引用传递，</span><br><span class="hljs-comment"> * 通俗易懂的说法就是，原对象的任何更改都会影响到克隆对象。而深拷贝是通过完整的克隆，重新创建一个新的对象，</span><br><span class="hljs-comment"> * 原对象的更改不会影响到克隆对象。浅拷贝通过实现Cloneable接口，重写clone方法实现。</span><br><span class="hljs-comment"> * 深拷贝可以通过重写clone方法或者实现Serializable序列化接口，通过序列化实现对象深拷贝。</span><br><span class="hljs-comment"> * 多用于复杂对象的创建，简化对象创建过程。本节我们以克隆多莉羊为例，实现原型模式的一个案例。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 原型设计模式：浅拷贝，创建一只多莉羊并实现其Cloneable接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtTest06</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">SheepClone06</span> <span class="hljs-variable">sheep</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepClone06</span>(<span class="hljs-string">&quot;多莉&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepAddress06</span>(<span class="hljs-string">&quot;内蒙古&quot;</span>, <span class="hljs-string">&quot;呼和浩特市&quot;</span>));<br>        sheep.printSheep();<br>        System.out.println(<span class="hljs-string">&quot;sheep对象--&gt;hashcode值:&quot;</span> + sheep.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode值:&quot;</span> + sheep.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值：&quot;</span> + sheep);<br>        <span class="hljs-comment">//调用克隆方法克隆一只多莉羊</span><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;开始浅拷贝SheepClone对象...&quot;</span>);<br>        <span class="hljs-type">SheepClone06</span> <span class="hljs-variable">cloneSheep</span> <span class="hljs-operator">=</span> (SheepClone06) sheep.clone();<br>        cloneSheep.printSheep();<br>        <span class="hljs-comment">//更改多莉羊的产地</span><br>        sheep.getSheepAddress().setProvince(<span class="hljs-string">&quot;新疆&quot;</span>);<br>        sheep.getSheepAddress().setCity(<span class="hljs-string">&quot;乌鲁木齐&quot;</span>);<br>        <span class="hljs-comment">//克隆的多莉羊属性</span><br>        System.out.println(<span class="hljs-string">&quot;克隆sheep对象--&gt;hashcode值:&quot;</span> + cloneSheep.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode值:&quot;</span> + cloneSheep.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值: &quot;</span> + cloneSheep);<br> <br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;两个对象值分别为 sheep=&quot;</span> + sheep +<span class="hljs-string">&quot; cloneSheep=&quot;</span>+cloneSheep);<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201540459.png"></p><blockquote><p> 从上面的案例可以看出，修改复制的新对象属性内容，会影响之前的对象属性值。<br> 1) 对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将 该属性值复制一份给新的对象。<br> 2) 对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类 的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成 员变量值<br> 3) 前面我们克隆羊就是浅拷贝<br> 4) 浅拷贝是使用默认的 clone()方法来实现 sheep &#x3D; (Sheep) super.clone(); </p></blockquote><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepClone07</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>, Serializable &#123;<br> <br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 产地</span><br>    <span class="hljs-keyword">public</span> SheepAddress07 sheepAddress;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepClone07</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepClone07</span><span class="hljs-params">(String name, SheepAddress07 sheepAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sheepAddress = sheepAddress;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printSheep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;是一只克隆羊！&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, sheepAddress);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SheepClone07&#123;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;, sheepAddress=&quot;</span> + sheepAddress + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方式一： 通过重写clone方法实现深拷贝</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-comment">//完成对属性为基本数据类型和String的克隆</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">deep</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.clone();<br>        <span class="hljs-type">SheepClone07</span> <span class="hljs-variable">sheepClone</span> <span class="hljs-operator">=</span> (SheepClone07) deep;<br>        sheepClone.sheepAddress = (SheepAddress07) sheepAddress.clone();<br>        <span class="hljs-keyword">return</span> sheepClone;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方式二： 通过序列化反序列化实现深拷贝(推荐使用)</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">deepClone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建流对象</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//序列化</span><br>            bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>            oos.writeObject(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-comment">//反序列化</span><br>            bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>            <span class="hljs-type">SheepClone07</span> <span class="hljs-variable">sheepClone</span> <span class="hljs-operator">=</span> (SheepClone07) ois.readObject();<br>            <span class="hljs-keyword">return</span> sheepClone;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                bos.close();<br>                oos.close();<br>                bis.close();<br>                ois.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>                System.out.println(e2.getMessage());<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> SheepAddress07 <span class="hljs-title function_">getSheepAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sheepAddress;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSheepAddress</span><span class="hljs-params">(SheepAddress07 sheepAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sheepAddress = sheepAddress;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepAddress07</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>, Serializable &#123;<br> <br>    <span class="hljs-comment">//省</span><br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-comment">//市</span><br>    <span class="hljs-keyword">private</span> String city;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepAddress07</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SheepAddress07</span><span class="hljs-params">(String province, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br> <br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SheepAddress07&#123;province=&#x27;&quot;</span> + province + <span class="hljs-string">&quot;&#x27;, city=&#x27;&quot;</span> + city + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getProvince</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> province;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProvince</span><span class="hljs-params">(String province)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProtTest07</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">SheepClone07</span> <span class="hljs-variable">sheep</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepClone07</span>(<span class="hljs-string">&quot;多莉&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SheepAddress07</span>(<span class="hljs-string">&quot;内蒙古&quot;</span>, <span class="hljs-string">&quot;呼和浩特市&quot;</span>));<br>        sheep.printSheep();<br>        System.out.println(<span class="hljs-string">&quot;sheep对象--&gt;hashcode值:&quot;</span> + sheep.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode值:&quot;</span> + sheep.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值：&quot;</span> + sheep);<br> <br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;开始深拷贝方式一SheepClone对象(通过重写clone方法实现深拷贝)...&quot;</span>);<br>        <span class="hljs-type">SheepClone07</span> <span class="hljs-variable">cloneSheepOne</span> <span class="hljs-operator">=</span> (SheepClone07) sheep.clone();<br>        cloneSheepOne.setName(<span class="hljs-string">&quot;绵羊&quot;</span>);<br>        cloneSheepOne.printSheep();<br>        System.out.println(<span class="hljs-string">&quot;克隆sheep对象--&gt;hashcode值:&quot;</span> + cloneSheepOne.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode值:&quot;</span> + cloneSheepOne.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值: &quot;</span> + cloneSheepOne);<br> <br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;开始深拷贝方式二序列化SheepClone对象(通过序列化反序列化实现深拷贝)...&quot;</span>);<br>        <span class="hljs-type">SheepClone07</span> <span class="hljs-variable">cloneSheepTwo</span> <span class="hljs-operator">=</span> (SheepClone07) sheep.deepClone();<br>        cloneSheepTwo.printSheep();<br>        System.out.println(<span class="hljs-string">&quot;克隆sheep对象--&gt;hashcode值:&quot;</span> + cloneSheepTwo.hashCode() + <span class="hljs-string">&quot; sheepAddress对象的hashcode值:&quot;</span> + cloneSheepTwo.sheepAddress.hashCode() + <span class="hljs-string">&quot; 属性值: &quot;</span> + cloneSheepTwo);<br> <br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;两个对象值分别为 sheep=&quot;</span> + sheep +<span class="hljs-string">&quot; cloneSheepOne=&quot;</span>+cloneSheepOne+<span class="hljs-string">&quot; cloneSheepTwo=&quot;</span>+cloneSheepTwo);<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201543458.png"></p><blockquote><p>深拷贝基本介绍</p><ol><li>复制对象的所有基本数据类型的成员变量值</li><li>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变 量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对 整个对象进行拷贝</li><li>深拷贝实现方式</li></ol><ul><li>重写clone方法来实现深拷贝</li><li>通过对象序列化实现深拷贝(推荐)</li></ul><p>原型模式的注意事项和细节</p><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。</li><li>不用重新初始化对象，而是动态地获得对象运行时的状态。</li><li>如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码。</li><li>在实现深克隆的时候可能需要比较复杂的代码。</li><li>缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有 的类进行改造时，需要修改其源代码，违背了ocp原则。</li></ol></blockquote><hr><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>抽象工厂模式为一个产品家族提供了统一的创建接口。当需要这个产品家族的某一系列的时候，可以从抽象工厂中选出相对应的系列来创建一个具体的工厂类别。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><p><strong>相关术语：</strong></p><ul><li><p><strong>产品等级结构：</strong>产品的继承结构，与类的继承相似。例如笔记本是一个抽象的类，那么华为笔记本、苹果和联想笔记本就是其子类。</p></li><li><p><strong>产品族：</strong>指同一个工厂生产的，位于不同的产品等级结构的一组产品。例如华为笔记本、手机、路由器等都产自华为，笔记本的等级结构不同，构成一个产品族。</p></li><li><p><strong>抽象工厂：</strong>是一个接口，抽象工厂模式的核心，包含对多个产品等级结构的声明，任何工厂类都必须实现这个接口。</p></li><li><p><strong>具体工厂：</strong>是抽象工厂的实现，负责实例化某个产品族中的产品对象。例如华为工厂生产华为笔记本、手机、路由器等。</p></li></ul><h3 id="产品族和产品等级结构图"><a href="#产品族和产品等级结构图" class="headerlink" title="产品族和产品等级结构图"></a>产品族和产品等级结构图</h3><p>我们以一个品牌为一个产品族，电脑、手机、路由器为产品等级，每一个品牌都有自己的产品族，这就构成一个完整产品群；</p><p>横向代表一族，纵向代表一个等级，横纵交集代表某一个品牌的某一个产品（比如下图中交集的点为电脑），请看下图；</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201602502.png"></p><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p>这个类图其实比较简单，简单说明下：</p><p><strong>产品顶级接口</strong>：主要被产品抽象类实现；</p><p><strong>产品抽象类</strong>：某个具体产品要实现的类；</p><p><strong>具体实现类</strong>：具体产品实现，比如华为路由器实现自抽象类AbstractRouter；</p><p><strong>工厂接口</strong>：工厂接口中定义创建每个产品方法；</p><p><strong>具体华为工厂</strong>：实现工厂接口，创建华为一族产品（路由器、手机、电脑）；</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201604768.png"></p><h3 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h3><blockquote><p>代码中我们以华为产品为例，分别定义华为电脑、手机、路由器产品，从UML类图中可以看出我们的产品结构层级比较清晰，现在我们先设计我们产品。</p></blockquote><p><strong>产品顶级接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义产品接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterfaceProduct</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义计算机抽象类并实现产品InterfaceProduct 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义计算机产品抽象类，并实现产品接口InterfaceProduct</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractComputers</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfaceProduct</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义手机抽象类并实现产品InterfaceProduct 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义手机抽象类，并实现产品接口InterfaceProduct</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractPhone</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfaceProduct</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义路由器抽象类并实现产品InterfaceProduct 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义路由器产品抽象类，并实现InterfaceProduct接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractRouter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfaceProduct</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义华为电脑具体实现类，继承AbstractComputers抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 华为电脑实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaWeiComputer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractComputers</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;华为笔记本&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义华为手机具体实现类，继承AbstractPhone抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  *  华为手机实现类，</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaWeiPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractPhone</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;华为手机&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义华为路由器具体实现类，继承AbstractRouter抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 华为路由器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaWeiRouter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRouter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;华为品牌路由器&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">下面开始定义工厂</p><p><strong>定义工厂接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.factory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.InterfaceProduct;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义产品工厂接口,</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterfactFactory</span> &#123;<br>    <span class="hljs-comment">//手机产品</span><br>    InterfaceProduct <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//电脑产品</span><br>    InterfaceProduct <span class="hljs-title function_">createComputer</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//路由器产品</span><br>    InterfaceProduct <span class="hljs-title function_">createRouter</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>具体工厂实现类，实现 InterfactFactory  接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.factory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.HuaWeiComputer;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.HuaWeiPhone;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.HuaWeiRouter;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.InterfaceProduct;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * **华为工厂**</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaWeiFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfactFactory</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建电脑对象并返回</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InterfaceProduct <span class="hljs-title function_">createComputer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaWeiComputer</span>();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建手机对象并返回</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InterfaceProduct <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaWeiPhone</span>();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建路由器对象并返回</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InterfaceProduct <span class="hljs-title function_">createRouter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaWeiRouter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.factory.HuaWeiFactory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.factory.InterfactFactory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.InterfaceProduct;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象工厂模式测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建华为品牌工厂</span><br>        <span class="hljs-type">InterfactFactory</span> <span class="hljs-variable">huawei</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaWeiFactory</span>();<br>        <span class="hljs-comment">//通过华为工厂获取华为电脑对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> huawei.createComputer();<br>        computer.get();<br>        <span class="hljs-comment">//通过华为工厂获取华为手机对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> huawei.createPhone();<br>        phone.get();<br>        <span class="hljs-comment">//通过华为工厂获取华为路由器对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">router</span> <span class="hljs-operator">=</span> huawei.createRouter();<br>        router.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201611533.png"></p><h3 id="扩展展品族"><a href="#扩展展品族" class="headerlink" title="扩展展品族"></a>扩展展品族</h3><blockquote><p>抽象工厂模式<strong>对于横向扩展方便，对于纵向扩展非常困难</strong>，也就是说：假如我们要扩展一个新的品牌，比如扩展一个小米品牌，小米产品有电脑、手机、路由器，扩展新品牌就是横向扩展，非常方便，但是我们要给小米添加一个电饭煲产品却非常困难，这就是纵向扩展，所以在使用抽象工厂模式时一定要选择合适的场景，也就是在不同场景中使用最适合的模式才是设计模式的精髓。</p></blockquote><p><strong>小米电脑</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小米电脑，继承自 AbstractComputers 抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiComputer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractComputers</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小米电脑&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小米手机</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小米手机，继承自 AbstractPhone 抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractPhone</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小米手机&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小米路由器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.product;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 小米路由器，继承自 AbstractRouter 抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiRouter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRouter</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小米路由器&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>添加小米具体工厂类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory.factory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.InterfaceProduct;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.MiComputer;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.MiPhone;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.MiRouter;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小米工厂，实现 InterfactFactory 接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfactFactory</span>&#123;<br>    <span class="hljs-comment">//小米手机</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InterfaceProduct <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiPhone</span>();<br>    &#125;<br>    <span class="hljs-comment">//小米电脑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InterfaceProduct <span class="hljs-title function_">createComputer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiComputer</span>();<br>    &#125;<br>    <span class="hljs-comment">//小米路由器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InterfaceProduct <span class="hljs-title function_">createRouter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiRouter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后编写测试类，<strong>代码中红色字体为新扩展的品牌产品</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pattern.abstractfactory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.factory.HuaWeiFactory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.factory.InterfactFactory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.factory.MiFactory;<br><span class="hljs-keyword">import</span> pattern.abstractfactory.product.InterfaceProduct;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象工厂模式测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建华为品牌工厂</span><br>        <span class="hljs-type">InterfactFactory</span> <span class="hljs-variable">huawei</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaWeiFactory</span>();<br>        <span class="hljs-comment">// 通过华为工厂获取华为电脑对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> huawei.createComputer();<br>        computer.get();<br>        <span class="hljs-comment">// 通过华为工厂获取华为手机对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> huawei.createPhone();<br>        phone.get();<br>        <span class="hljs-comment">// 通过华为工厂获取华为路由器对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">router</span> <span class="hljs-operator">=</span> huawei.createRouter();<br>        router.get();<br><br>        <span class="hljs-comment">// 创建小米品牌工厂</span><br>        <span class="hljs-type">InterfactFactory</span> <span class="hljs-variable">Mifactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiFactory</span>();<br>        <span class="hljs-comment">// 通过小米工厂获取小米电脑对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">micomputer</span> <span class="hljs-operator">=</span> Mifactory.createComputer();<br>        micomputer.get();<br>        <span class="hljs-comment">// 通过小米工厂获取小米手机对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">miphone</span> <span class="hljs-operator">=</span> Mifactory.createPhone();<br>        miphone.get();<br>        <span class="hljs-comment">// 通过小米工厂获取小米路由器对象</span><br>        <span class="hljs-type">InterfaceProduct</span> <span class="hljs-variable">mirouter</span> <span class="hljs-operator">=</span> Mifactory.createRouter();<br>        mirouter.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402201615661.png"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>创建者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重拾设计模式（零）- 朝花夕拾</title>
    <link href="/posts/77e3381c/"/>
    <url>/posts/77e3381c/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>设计模式是在软件设计中经常出现的问题的通用解决方案。这些解决方案是经过反复验证和证明的，并且被广泛接受和应用于软件开发中。设计模式提供了一种可重用的思想框架，可以帮助开发人员更有效地解决常见问题，并提高代码的可维护性、可读性和可扩展性。</p><p>编程是一门技术，更加是一门艺术，不能只满足于写完代码运行结果正确就完事，时常考虑如何让代码更加简练，更加容易维护，容易扩展和复用，只有这样才可以真正得到提高。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>设计模式的使用应该遵循一些基本的设计原则，这些原则有助于编写更清晰、灵活、可维护和可扩展的代码。以下是一些常见的设计原则：</p><ol><li><p><strong>单一职责原则（Single Responsibility Principle - SRP）：</strong> 一个类应该只有一个修改的理由。每个类都应该专注于一项任务，避免一个类担负过多的职责。</p></li><li><p><strong>开闭原则（Open-Closed Principle - OCP）：</strong> 软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。可以通过接口和抽象类实现。</p></li><li><p><strong>里氏替换原则（Liskov Substitution Principle - LSP）：</strong> 派生类应该能够替换其基类而不影响程序的正确性。即，子类应该能够替代父类并保持程序的行为一致性。</p></li><li><p><strong>依赖倒置原则（Dependency Inversion Principle - DIP）：</strong> 高层模块不应该依赖于底层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，而细节应该依赖于抽象。</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle - ISP）：</strong> 客户端不应该强制依赖于它们不使用的接口。一个类不应该被强制实现它用不到的接口。</p></li><li><p><strong>迪米特法则（Law of Demeter，LoD，又称最少知识原则）：</strong> 一个对象应该对其他对象有最少的了解。避免在一个类中调用过多其他类的方法，减少耦合性。</p></li><li><p><strong>合成复用原则（Composition&#x2F;Aggregation Reuse Principle - CARP）：</strong> 首选使用组合&#x2F;聚合而不是继承来实现复用。通过组合可以更灵活地实现对象间的关系。</p></li><li><p><strong>优先使用对象组合，而不是类继承（Favor Composition Over Inheritance）：</strong> 对象组合通常比类继承更加灵活，能够减少耦合性并支持代码重用。</p></li></ol><p>这些原则通常被认为是良好面向对象设计的基石，它们相互交织，协同工作，帮助设计出符合软件工程最佳实践的系统结构。在实践中，根据具体情况灵活运用这些原则，有助于构建更健壮和可维护的软件系统。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041803749.png"></p><p>UML（Unified Modeling Language）类图是一种用于描述系统中的类、对象及它们之间关系的图形化建模工具。它是一种强大的面向对象的建模语言，被广泛用于软件开发和系统设计。以下是类图的主要元素和介绍：</p><ol><li><p><strong>类（Class）：</strong> 类是对现实世界中一组相似对象的抽象，它定义了对象的属性和行为。在类图中，类通常用一个矩形框表示，矩形框分为三个部分：类名、属性（字段）和方法。</p></li><li><p><strong>关联（Association）：</strong> 关联表示类之间的关系，描述一个类的实例和另一个类的实例之间的连接。关联可以是单向的或双向的，可以具有方向性，也可以是多重性的，表示一个类中的实例与另一个类中的实例之间的关系。</p></li><li><p><strong>聚合（Aggregation）：</strong> 表示一种弱的拥有关系，整体对象可以包含部分对象，但部分对象并不是整体对象的一部分。聚合用一条带有空心菱形的直线表示。</p></li><li><p><strong>组合（Composition）：</strong> 表示一种强的拥有关系，整体对象包含部分对象，部分对象是整体对象的一部分。组合用一条带有实心菱形的直线表示。</p></li><li><p><strong>泛化（Generalization）：</strong> 表示类之间的继承关系，其中一个类是另一个类的子类。泛化用一条带有空心三角箭头的直线表示。</p></li><li><p><strong>接口（Interface）：</strong> 表示一个类或一组类的契约，它规定了这些类应该实现的一组方法。接口用带有&lt;<interface>&gt;标记的小矩形表示。</p></li><li><p><strong>依赖（Dependency）：</strong> 表示一个类使用了另一个类的服务，但是并不拥有对方的对象。依赖关系用一条带有箭头的虚线表示。</p></li><li><p><strong>多重性（Multiplicity）：</strong> 表示关联、聚合或组合关系中每个端点的实例数目。例如，1..* 表示一个或多个实例。</p></li></ol><p>UML类图是软件开发中非常有用的工具，它能够清晰地展示系统中的类、对象和它们之间的关系，帮助开发人员理解系统结构、设计和实现。通过类图，开发团队能够更好地沟通和协作，确保系统的正确性和可维护性。</p><h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><p><strong>创建型模式</strong></p><ol><li><p><strong>工厂方法模式（Factory Method Pattern）</strong> ：定义一个创建对象的接口，但是让子类决定实例化哪个类。工厂方法使得一个类的实例化延迟到其子类。</p></li><li><p><strong>抽象工厂模式（Abstract Factory Pattern）</strong> ：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p></li><li><p><strong>单例模式（Singleton Pattern）</strong> ：确保一个类只有一个实例，并提供一个全局访问点。</p></li><li><p><strong>建造者模式（Builder Pattern）</strong> ：将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。</p></li><li><p><strong>原型模式（Prototype Pattern）</strong> ：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></li></ol><p><strong>结构型模式</strong></p><ol><li><p><strong>适配器模式（Adapter Pattern）</strong> ：将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的类可以一起工作。</p></li><li><p><strong>桥接模式（Bridge Pattern）</strong> ：将抽象部分与它的实现部分分离，使它们可以独立变化。</p></li><li><p><strong>组合模式（Composite Pattern）</strong> ：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p></li><li><p><strong>装饰器模式（Decorator Pattern）</strong> ：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p></li><li><p><strong>外观模式（Facade Pattern）</strong> ：为子系统中的一组接口提供一个统一的接口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p></li><li><p><strong>享元模式（Flyweight Pattern）</strong> ：运用共享技术有效地支持大量细粒度的对象。</p></li><li><p><strong>代理模式（Proxy Pattern）</strong> ：为其他对象提供一种代理以控制对这个对象的访问。</p></li></ol><p><strong>行为型模式</strong></p><ol><li><p><strong>责任链模式（Chain of Responsibility Pattern）</strong> ：为请求创建一个接收者对象的链，使得多个对象都有机会处理该请求。在请求发送者和接收者之间解耦。</p></li><li><p><strong>命令模式（Command Pattern）</strong> ：将一个请求封装成一个对象，从而使用户可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p></li><li><p><strong>解释器模式（Interpreter Pattern）</strong> ：给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p></li><li><p><strong>迭代器模式（Iterator Pattern）</strong> ：提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p></li><li><p><strong>中介者模式（Mediator Pattern）</strong> ：用一个中介对象封装一系列对象的交互，中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p></li><li><p><strong>备忘录模式（Memento Pattern）</strong> ：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p></li><li><p><strong>观察者模式（Observer Pattern）</strong> ：定义对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p></li><li><p><strong>状态模式（State Pattern）</strong> ：允许对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p></li><li><p><strong>策略模式（Strategy Pattern）</strong> ：定义一系列的算法，把它们封装起来，并且使它们可以相互替换。策略模式使得算法可以独立于使用它的客户而变化。</p></li><li><p><strong>模板方法模式（Template Method Pattern）</strong> ：定义一个操作中的算法的框架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></li><li><p><strong>访问者模式（Visitor Pattern）</strong> ：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（十二）- 其他</title>
    <link href="/posts/98b3bf1e/"/>
    <url>/posts/98b3bf1e/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近看到一本很有趣的书，《算法图解》。对一些算法描述的非常清晰、直观、有趣。这里简单记录一些读书笔记。</p></blockquote><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>假设你的计算机存储了很多乐曲。对于每个乐队，你都记录了其作品被播放的次数。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041629883.png"></p><p>你要将这个列表按播放次数从多到少的顺序排列，从而将你喜欢的乐队排序。该如何做呢？一种办法是遍历这个列表，找出作品播放次数最多的乐队，并将该乐队添加到一个新列表中。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041630942.png"><br>继续这样做，找出播放次数第二多的乐队。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041631736.png"></p><p>继续这样做，将得到一个有序的列表。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041631559.png"></p><p>接下来，分析一下它时间复杂度。要找出播放次数最多的乐队，必须检查列表中的每个元素。正如你刚才看到的，这需要的时间为O(n)。因此对于这种时间为O(n)的操作，你需要执行n次。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041634338.png"><br>需要的总时间为O(n×n)，即O(n²)。</p><p>排序算法很有用。你现在可以对如下内容进行排序：</p><ul><li>电话薄中的人名</li><li>旅行日期</li><li>电子邮件，从新到旧</li><li>等等</li></ul><p>示例代码</p><p>将数组元素按从小到大的顺序排列。先编写一个用于找出数组中最小元素的函数。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041639433.png"></p><p>现在可以使用这个函数来编写选择排序算法了。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041640898.png"></p><p>选择排序是一种灵巧的算法，但是速度不是很快。快速排序是一种更快的排序算法，其运行时间为O(n log n)。</p><h2 id="分而治之D-amp-C"><a href="#分而治之D-amp-C" class="headerlink" title="分而治之D&amp;C"></a>分而治之D&amp;C</h2><blockquote><p>一种著名的递归式问题解决方法。</p><p>分而治之的原理：<br>1.找出简单的基线条件；<br>2.确定如何缩小问题的规模，使其符合基线条件；<br>D&amp;C并非用于解决问题的算法，而是一种解决问题的思路。</p></blockquote><p>一个简单的例子，给定一个数组，</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041646083.png"><br>需要将这些数字相加，并返回结果。使用循环很容易完成这种任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">defsum(arr): <br>total=<span class="hljs-number">0</span> <br>forx <span class="hljs-keyword">in</span> arr: <br>total+= x <br><span class="hljs-keyword">return</span> total <br><span class="hljs-built_in">print</span> <span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>但如何使用递归函数来完成这种任务呢？</p><p><strong>第一步</strong>：找出基线条件。最简单的数组什么样呢？请想想这个问题，再接着往下读。如果数组不包含任何元素或只包含一个元素，计算总和将非常容易。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041649064.png"><br>因此，这就是基线条件。</p><p><strong>第二步</strong>：每次递归调用都必须离空数组更近一步。如何缩小问题的规模呢？下面是一种办法。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041650285.png"></p><p>这两个版本的结果都为12，但在第二个版本中，给函数sum传递的数组更短。换言之，这缩小了问题的规模！</p><p>函数sum的工作原理类似于下面这样。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041651529.png"></p><p>这个函数的运行过程如下。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041651359.png"></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>快速排序是一种常用的排序算法，比选择排序快得多。例如，C语言标准库中的函数qsort实现的就是快速排序。快速排序也使用了D&amp;C。</p></blockquote><p>下面来使用快速排序对数组进行排序。对排序算法来说，最简单的数组什么样呢？还记得前一节的“提示”吗？就是根本不需要排序的数组。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041657372.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">array</span>): <br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array)&lt;<span class="hljs-number">2</span>: <br><span class="hljs-keyword">return</span> array<br></code></pre></td></tr></table></figure><p>因此，基线条件为数组为空或只包含<strong>一</strong>个元素。在这种情况下，只需原样返回数组——根本就不用排序。</p><p>我们来看看更长的数组。对包含<strong>两</strong>个元素的数组进行排序也很容易。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041659123.png"><br>包含三个元素的数组呢？</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041700889.png"></p><p>别忘了，你要使用D&amp;C，因此需要将数组分解，直到满足基线条件。下面介绍<strong>快速排序的工作原理</strong>。首先，从数组中<strong>选择一个元素</strong>，这个元素被称为<strong>基准值</strong>(pivot)。稍后再介绍如何选择合适的基准值。我们暂时将数组的第一个元素用作基准值。接下来，找出比基准值小的元素以及比基准值大的元素。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041701782.png"><br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041701748.png"></p><p>这被称为分区(partitioning)。现在你有：</p><ul><li>一个由所有小于基准值的数字组成的子数组；</li><li>基准值；</li><li>一个由所有大于基准值的数组组成的子数组。</li></ul><p>这里只是进行了分区，得到的两个子数组是无序的。但如果这两个数组是有序的，对整个数组进行排序将非常容易。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041702668.png"></p><p>如果子数组是有序的，就可以像下面这样合并得到一个有序的数组：左边的数组+基准值+右边的数组。在这里，就是[10,15]+[33]+[]，结果为有序数组[10,15,33]。</p><p>如何对子数组进行排序呢？对于包含两个元素的数组（左边的子数组）以及空数组（右边的子数组），快速排序知道如何将它们排序，因此只要对这两个子数组进行快速排序，再合并结果，就能得到一个有序数组！</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041704511.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202402041705539.png"></p><p>快速排序的性能高度依赖于你选择的基准值。假设你总是将第一个元素用作基准值，且要处理的数组是有序的。由于快速排序算法不检查输入数组是否有序，因此它依然尝试对其进行排序。最糟糕的情况运行时间是O(n²)。</p>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（十一）- 哈希表</title>
    <link href="/posts/3cbe22a9/"/>
    <url>/posts/3cbe22a9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>哈希表是一种功能强大的数据结构，其操作速度快，还能以不同的方式建立数据模型。</p><p>结合散列函数和数组来创建散列表。<br>散列表的查找、插入和删除都非常快。<br>散列表适用于模拟映射关系。<br>负载因子一旦超过0.7，就该调整散列表的长度。<br>散列表可用于缓存数据，例如Web服务器的缓存。<br>散列表非常适合用于防止重复。</p></blockquote><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><blockquote><p>几乎根本不需要自己去实现散列表，因为各种编程语言基本都会提供。不过为了为了掌握，还是敲一边加深印象把。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 哈希表  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 给每份数据分配一个编号，放入数组、  </span><br><span class="hljs-comment"> * 建立编号与数组索引的关系，将来可以通过编号快速查找到数据。  </span><br><span class="hljs-comment"> * 存在问题：  </span><br><span class="hljs-comment"> * 1.理想情况下，数组容纳所有数据，但是不现实，因为数组需要连续内存存储的；  </span><br><span class="hljs-comment"> * 2.现实是不能说为了容纳所有数据造一个超大数组，编号也有可能重复的；  </span><br><span class="hljs-comment"> * 解决：  </span><br><span class="hljs-comment"> * 1.有限长度的数组，以【拉链】方式存储数据；  </span><br><span class="hljs-comment"> * 2.允许编号适当重复，通过数据自身进行区分；  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTable</span> &#123;  <br>  <br>    <span class="hljs-comment">//节点类  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> &#123;  <br>        <span class="hljs-type">int</span> hash;<span class="hljs-comment">//哈希码  </span><br>        Object key;<span class="hljs-comment">//键  </span><br>        <span class="hljs-keyword">public</span> Object value;<span class="hljs-comment">//值  </span><br>        <span class="hljs-keyword">public</span> Entry next;<span class="hljs-comment">//下一个节点  </span><br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Entry</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key, Object value)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.hash = hash;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> Entry[] table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[<span class="hljs-number">16</span>];<span class="hljs-comment">//哈希表，数组，每个元素是一个链表的头节点  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//元素个数  </span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">loadFactor</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<span class="hljs-comment">//负载因子 16*0.75=12  也叫阈值  </span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">threshold</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (table.length * loadFactor);<span class="hljs-comment">//阈值 用变量记录，后面可以复用  </span><br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * ！！！  </span><br><span class="hljs-comment">     * 求模运算替换为位运算  </span><br><span class="hljs-comment">     *  -前提：数组长度必须是2的n次方  </span><br><span class="hljs-comment">     *  -hash % 数组长度 等价与 hash &amp; (数组长度-1)  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-comment">/**     * 查询  </span><br><span class="hljs-comment">     * 根据hash码获取Value  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> hash &amp; (table.length - <span class="hljs-number">1</span>);  <br>        <span class="hljs-keyword">if</span> (table[idx] == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> table[idx];<span class="hljs-comment">//头节点  </span><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">if</span> (p.key == key) <span class="hljs-keyword">return</span> p.value;  <br>            p = p.next;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 向hash表存入新key value，  </span><br><span class="hljs-comment">     * 分三种情况：  </span><br><span class="hljs-comment">     * 找到空位，直接插入  </span><br><span class="hljs-comment">     * 找链表，如果key已存在，替换value  </span><br><span class="hljs-comment">     * 找链表，如果key不存在，插入链表尾部  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key, Object value)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> hash &amp; (table.length - <span class="hljs-number">1</span>);<span class="hljs-comment">//hash &amp; (数组长度-1)  </span><br>        <span class="hljs-keyword">if</span> (table[idx] == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//1.找到空位 直接插入  </span><br>            table[idx] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(hash, key, value);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-comment">//2.无空位，找链表。如果key已存在，替换value  </span><br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> table[idx];  <br>            <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">if</span> (p.key.equals(key)) &#123;  <br>                    p.value = value;<span class="hljs-comment">//更新  </span><br>                    <span class="hljs-keyword">return</span>;  <br>                &#125;  <br>                <span class="hljs-keyword">if</span> (p.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">break</span>;  <br>                p = p.next;  <br>            &#125;  <br>            <span class="hljs-comment">//3.找链表，如果key不存在，插入链表尾部  </span><br>            p.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(hash, key, value);  <br>        &#125;  <br>        size++;  <br>        <span class="hljs-keyword">if</span> (size &gt; threshold) &#123;  <br>            resize();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 根据hash 删除，返回删除的value  </span><br><span class="hljs-comment">     */</span>    Object <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> hash &amp; (table.length - <span class="hljs-number">1</span>);<span class="hljs-comment">//hash &amp; (数组长度-1)  </span><br>        <span class="hljs-keyword">if</span> (table[idx] == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> table[idx];<span class="hljs-comment">//头节点  </span><br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//前一个节点  </span><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">if</span> (p.key.equals(key)) &#123;<span class="hljs-comment">//找到了 删除  </span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;  <br>                <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//删除的是头节点  </span><br>                    table[idx] = p.next;  <br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//删除的是中间节点  </span><br>                    prev.next = p.next;  <br>                &#125;  <br>                size--;  <br>                <span class="hljs-keyword">return</span> value;  <br>            &#125;  <br>            prev = p;<span class="hljs-comment">//记录前一个节点  </span><br>            p = p.next;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 扩容  </span><br><span class="hljs-comment">     * &lt;p&gt;  </span><br><span class="hljs-comment">     * 负载因子 = size / table.length  </span><br><span class="hljs-comment">     * 不易过小也不易过大，  </span><br><span class="hljs-comment">     * 过小，浪费，空间利用率低  </span><br><span class="hljs-comment">     * 过大，快满了，效率低  </span><br><span class="hljs-comment">     * &lt;p&gt;  </span><br><span class="hljs-comment">     * 3/4 也是 0.75是经验值 比较合适  </span><br><span class="hljs-comment">     * 扩容之后，会重新计算每个元素的位置  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">()</span> &#123;  <br>        Entry[] newTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[table.length &lt;&lt; <span class="hljs-number">2</span>];<span class="hljs-comment">//新数组 容量是原来的2倍  </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; table.length; i++) &#123;  <br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> table[i];<span class="hljs-comment">//头节点  </span><br>            <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-type">Entry</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>                <span class="hljs-type">Entry</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>                <span class="hljs-type">Entry</span> <span class="hljs-variable">aHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>                <span class="hljs-type">Entry</span> <span class="hljs-variable">bHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>                <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>                    <span class="hljs-comment">//拆分链表 移动到新数组  </span><br>                <span class="hljs-comment">/*  </span><br><span class="hljs-comment">                拆分规律：  </span><br><span class="hljs-comment">                    一个链表最多拆分成两个链表  </span><br><span class="hljs-comment">                    hash&amp;table.length 为0的一组  </span><br><span class="hljs-comment">                    hash&amp;table.length 为1的一组  </span><br><span class="hljs-comment">                 */</span>                    <span class="hljs-keyword">if</span> ((p.hash &amp; table.length) == <span class="hljs-number">0</span>) &#123;  <br>                        <span class="hljs-comment">//a组  </span><br>                        <span class="hljs-keyword">if</span> (a != <span class="hljs-literal">null</span>) &#123;  <br>                            a.next = p;  <br>                        &#125; <span class="hljs-keyword">else</span> &#123;  <br>                            aHead = p;<span class="hljs-comment">//记录头节点  </span><br>                        &#125;  <br>                        a = p;  <br>                    &#125; <span class="hljs-keyword">else</span> &#123;  <br>                        <span class="hljs-comment">//b组  </span><br>                        <span class="hljs-keyword">if</span> (b != <span class="hljs-literal">null</span>) &#123;  <br>                            b.next = p;  <br>                        &#125; <span class="hljs-keyword">else</span> &#123;  <br>                            bHead = p;<span class="hljs-comment">//记录头节点  </span><br>                        &#125;  <br>                        b = p;  <br>                    &#125;  <br>                    p = p.next;  <br>                &#125;  <br>                <span class="hljs-comment">//a、b组，各自的头节点重置规律  </span><br>                <span class="hljs-comment">//a:保持索引位置不变  </span><br>                <span class="hljs-comment">//b:索引位置=原索引位置+原数组长度  </span><br>                <span class="hljs-keyword">if</span> (a != <span class="hljs-literal">null</span>) &#123;  <br>                    a.next = <span class="hljs-literal">null</span>;  <br>                    newTable[i] = aHead;  <br>                &#125;  <br>                <span class="hljs-keyword">if</span> (b != <span class="hljs-literal">null</span>) &#123;  <br>                    b.next = <span class="hljs-literal">null</span>;  <br>                    newTable[i + table.length] = bHead;  <br>                &#125;  <br>            &#125;        &#125;        table = newTable;  <br>        threshold = (<span class="hljs-type">int</span>) (table.length * loadFactor);<span class="hljs-comment">//更新阈值size  </span><br>    &#125;  <br>  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * hash 改造  </span><br><span class="hljs-comment">     * &lt;p&gt;  </span><br><span class="hljs-comment">     * hash码，一种简单的方式，可以直接使用jdk的 object.hashCode()  </span><br><span class="hljs-comment">     * 所以上述 get、put、remove方法都可以加一个重载，去掉hash参数  </span><br><span class="hljs-comment">     */</span>  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;  <br>        <span class="hljs-keyword">return</span> key.hashCode();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);  <br>        <span class="hljs-keyword">return</span> get(hash, key);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Object key, Object value)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);  <br>        put(hash, key, value);  <br>    &#125;  <br>  <br>    Object <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);  <br>        <span class="hljs-keyword">return</span> remove(hash, key);  <br>    &#125;  <br>  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（十）- 红黑树</title>
    <link href="/posts/c47e1f8e/"/>
    <url>/posts/c47e1f8e/</url>
    
    <content type="html"><![CDATA[<blockquote><p>红黑树也是一种自平衡的二叉搜索树，较之AVL，插入和删除旋转次数更少。性能上要稍微高一些。因为判断平衡的依据是不同的，之前AVL树是判断左右子树高度差是不是超过了1，超过1表示不平衡。而红黑树判断平衡是另一种规则。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>红黑树特性：</p><ul><li>1.所有节点都有俩种颜色：红与黑</li><li>2.所有null视为黑色</li><li>3.红色节点不能相邻，(判断平衡的主要依据)</li><li>4.根节点时黑色</li><li>5.从根到任意一个叶子节点，路径中的黑色节点数一样(判断平衡的主要依据)</li></ul><p>不满足这些特性的都是不平衡的红黑树。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309220920490.png"></p><h2 id="是否是红黑树？"><a href="#是否是红黑树？" class="headerlink" title="是否是红黑树？"></a>是否是红黑树？</h2><h3 id="树1"><a href="#树1" class="headerlink" title="树1"></a>树1</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221519546.png"></p><p class="note note-danger">不是红黑树。因为违反了第3条：红色节点不能相邻。</p><h3 id="树2"><a href="#树2" class="headerlink" title="树2"></a>树2</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221521761.png"></p><p class="note note-danger">不是红黑树。因为违反了第5条：从根到任意一个叶子节点，路径中黑色节点数一样。右边重，左边轻，是不平衡的。</p><h3 id="树3"><a href="#树3" class="headerlink" title="树3"></a>树3</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221522358.png"></p><p class="note note-success">是红黑树。关键的3,4,5条特性都满足。</p><h3 id="树4"><a href="#树4" class="headerlink" title="树4"></a>树4</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221524531.png"></p><p class="note note-danger">这个和上一个类似，但是它并不是平衡的。<br>因为没有考虑null值。<br>那什么时候需要考虑null呢，就是当叶子节点没有自己的兄弟的时候，这个时候就需要把null加进来考虑。</p><p>如果加入null值，如下图， 6到2的右孩子只有俩个黑色，而6到1或者8的孩子都是3个黑色，所以是不平衡的。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221526990.png"></p><p class="note note-warning">那为什么树3是平衡的红黑树呢？可以把null考虑进来，可以看出根到任意叶子节点的黑色数都是3，所以是平衡的。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221531405.png"></p><p class="note note-primary">判断是否平衡有一点经验总结。<br>如果叶子节点是红色，可以不用不用care。<br>如果叶子节点就一个黑色，没有兄弟节点，那肯定是不平衡的。<br>红色节点无所谓，黑色节点肯定要成对出现的。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221539104.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> redblack;  <br>  <br><span class="hljs-keyword">import</span> com.sun.org.apache.regexp.internal.RE;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBlackTree</span> &#123;  <br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;  <br>        RED, BLACK;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> Node root;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;  <br>        <span class="hljs-type">int</span> key;  <br>        Object value;  <br>        Node left;  <br>        Node right;  <br>        Node parent;<span class="hljs-comment">//父节点 因为红黑树的删除和新增经常用到父节点  </span><br>        <span class="hljs-type">Color</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> Color.RED;<span class="hljs-comment">//默认刚创建出来新节点是为红色  </span><br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> key, Object value)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>        &#125;  <br>  <br>        <span class="hljs-comment">//是否是左孩子 常用工具方法  </span><br>        <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeftChild</span><span class="hljs-params">()</span> &#123;  <br>            <span class="hljs-comment">//如果父节点不为空且父节点的left是自身则是左孩子  </span><br>            <span class="hljs-keyword">return</span> parent != <span class="hljs-literal">null</span> &amp;&amp; parent.left == <span class="hljs-built_in">this</span>;  <br>        &#125;  <br>  <br>        <span class="hljs-comment">//叔叔 常用工具方法  </span><br>        Node <span class="hljs-title function_">uncle</span><span class="hljs-params">()</span> &#123;  <br>            <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span> || parent.parent == <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没有爷爷就没有叔叔  </span><br>            &#125;  <br>            <span class="hljs-keyword">if</span> (parent.isLeftChild()) &#123;  <br>                <span class="hljs-keyword">return</span> parent.parent.right;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">return</span> parent.parent.left;  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-comment">//兄弟 常用工具方法  </span><br>        Node <span class="hljs-title function_">sibling</span><span class="hljs-params">()</span> &#123;  <br>            <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没父亲就没兄弟  </span><br>            &#125;  <br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isLeftChild()) &#123;  <br>                <span class="hljs-keyword">return</span> parent.right;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">return</span> parent.left;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//判断红、黑  </span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRed</span><span class="hljs-params">(Node node)</span> &#123;  <br>        <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span> &amp;&amp; node.color == Color.RED;  <br>    &#125;  <br>  <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBlack</span><span class="hljs-params">(Node node)</span> &#123;  <br>        <span class="hljs-keyword">return</span> node == <span class="hljs-literal">null</span> || node.color == Color.BLACK;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//右选 1.parent的处理 2.旋转后新根的父子关系  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node pink)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> pink.parent;<span class="hljs-comment">//pink不平衡的节点  </span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">yellow</span> <span class="hljs-operator">=</span> pink.left;<span class="hljs-comment">//yellow新根  </span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">green</span> <span class="hljs-operator">=</span> yellow.right;<span class="hljs-comment">//green要换爹的  </span><br>        <span class="hljs-keyword">if</span> (green != <span class="hljs-literal">null</span>) &#123;  <br>            green.parent = pink;  <br>        &#125;  <br>        yellow.right = pink;<span class="hljs-comment">//顶上去  </span><br>        yellow.parent = parent;  <br>        pink.left = green;  <br>        pink.parent = yellow;  <br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) &#123;  <br>            root = yellow;  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent.left == pink) &#123;  <br>            parent.left = yellow;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            parent.right = yellow;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//左旋  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node pink)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> pink.parent;<span class="hljs-comment">//pink不平衡的节点  </span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">yellow</span> <span class="hljs-operator">=</span> pink.right;<span class="hljs-comment">//yellow新根  </span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">green</span> <span class="hljs-operator">=</span> yellow.left;<span class="hljs-comment">//green要换爹的  </span><br>        <span class="hljs-keyword">if</span> (green != <span class="hljs-literal">null</span>) &#123;  <br>            green.parent = pink;  <br>        &#125;  <br>        yellow.left = pink;<span class="hljs-comment">//顶上去  </span><br>        yellow.parent = parent;  <br>        pink.right = green;  <br>        pink.parent = yellow;  <br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) &#123;  <br>            root = yellow;  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent.right == pink) &#123;  <br>            parent.right = yellow;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            parent.left = yellow;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 新增或更新  </span><br><span class="hljs-comment">     * 找空位，找到之后根据k-v创建新的节点对象，然后根父节点建立好父子关系，新增操作就算完成了。  </span><br><span class="hljs-comment">     * 如果没有找到空位，就根据key的大小不断的向左找向右找。  </span><br><span class="hljs-comment">     * 如果找相同的key，就是更新。  </span><br><span class="hljs-comment">     * &lt;p&gt;  </span><br><span class="hljs-comment">     * 正常增，遇到红红不平衡进行调整  </span><br><span class="hljs-comment">     * 红红不平衡细分有四种case。  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, Object value)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//记录新增节点的父节点  </span><br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            parent = p;  <br>            <span class="hljs-keyword">if</span> (key &lt; p.key) &#123;  <br>                p = p.left;  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.key &lt; key) &#123;  <br>                p = p.right;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                p.value = value;<span class="hljs-comment">//更新  </span><br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">inserted</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value);  <br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) root = inserted;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; parent.key) &#123;  <br>            parent.left = inserted;  <br>            inserted.parent = parent;<span class="hljs-comment">//1.维护parent属性  </span><br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            parent.right = inserted;  <br>            inserted.parent = parent;<span class="hljs-comment">//1.维护parent属性  </span><br>        &#125;  <br>        fixRedRed(inserted);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//修复红红  </span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixRedRed</span><span class="hljs-params">(Node x)</span> &#123;  <br>        <span class="hljs-comment">//case 1.插入节点是根节点，变黑集合  </span><br>        <span class="hljs-keyword">if</span> (x == root) &#123;  <br>            x.color = Color.BLACK;  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-comment">//case 2.插入节点父亲是黑色，无需调整  </span><br>        <span class="hljs-keyword">if</span> (isBlack(x.parent)) &#123;  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-comment">/*  </span><br><span class="hljs-comment">        case 3.当红红相邻，叔叔为红色时  </span><br><span class="hljs-comment">        需要将父亲、叔叔变黑、祖父变红，然后对祖父做递归处理  </span><br><span class="hljs-comment">         */</span>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> x.parent;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">uncle</span> <span class="hljs-operator">=</span> x.uncle();  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">grandparent</span> <span class="hljs-operator">=</span> parent.parent;  <br>        <span class="hljs-keyword">if</span> (isRed(uncle)) &#123;  <br>            parent.color = Color.BLACK;  <br>            uncle.color = Color.BLACK;  <br>            grandparent.color = Color.RED;  <br>            fixRedRed(grandparent);  <br>        &#125;  <br>  <br>        <span class="hljs-comment">//case 4.  </span><br>        <span class="hljs-keyword">if</span> (parent.isLeftChild() &amp;&amp; x.isLeftChild()) &#123;<span class="hljs-comment">//LL  </span><br>            parent.color = Color.BLACK;  <br>            grandparent.color = Color.RED;  <br>            rightRotate(grandparent);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent.isLeftChild() &amp;&amp; !x.isLeftChild()) &#123;<span class="hljs-comment">//RL  </span><br>            leftRotate(parent);<span class="hljs-comment">//使之变成LL case  </span><br>            x.color = Color.BLACK;  <br>            grandparent.color = Color.RED;  <br>            rightRotate(grandparent);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!parent.isLeftChild() &amp;&amp; !x.isLeftChild()) &#123;<span class="hljs-comment">//RR  </span><br>            parent.color = Color.BLACK;  <br>            grandparent.color = Color.RED;  <br>            leftRotate(grandparent);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//LR  </span><br>            rightRotate(parent);<span class="hljs-comment">////使之变成RR case  </span><br>            x.color = Color.BLACK;  <br>            grandparent.color = Color.RED;  <br>            leftRotate(grandparent);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找删除节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;  <br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">if</span> (key &lt; p.key) &#123;  <br>                p = p.left;  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.key &lt; key) &#123;  <br>                p = p.right;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">return</span> p;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找剩余节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findReplaced</span><span class="hljs-params">(Node deleted)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (deleted.left == <span class="hljs-literal">null</span> &amp;&amp; deleted.right == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (deleted.left == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> deleted.right;  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (deleted.right == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> deleted.left;  <br>        &#125;  <br>        <span class="hljs-comment">//有俩个孩子，要找后继节点(右子树的最左)  </span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> deleted.right;  <br>        <span class="hljs-keyword">while</span> (s.left != <span class="hljs-literal">null</span>) &#123;  <br>            s = s.left;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> s;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 删除  </span><br><span class="hljs-comment">     * 正常删、会用到李代桃僵的技巧，遇到黑黑不平衡进行调整  </span><br><span class="hljs-comment">     * 黑黑不平衡细分有6种case。  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">deleted</span> <span class="hljs-operator">=</span> find(key);  <br>        <span class="hljs-keyword">if</span> (deleted == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;  <br>        doRemove(deleted);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRemove</span><span class="hljs-params">(Node deleted)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">replaced</span> <span class="hljs-operator">=</span> findReplaced(deleted);  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> deleted.parent;  <br>        <span class="hljs-keyword">if</span> (replaced == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有孩子  </span><br>            <span class="hljs-comment">//case 1.删的根节点  </span><br>            <span class="hljs-keyword">if</span> (deleted == root) &#123;  <br>                root = <span class="hljs-literal">null</span>;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">if</span> (isBlack(deleted)) &#123;<span class="hljs-comment">//删除到节点时黑，剩余的也是黑，双黑(null也是黑)  </span><br>                    <span class="hljs-comment">//复杂调整  </span><br>                    fixDoubleBlack(deleted);<span class="hljs-comment">//先调整平衡，下面在删除  </span><br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    <span class="hljs-comment">//红色叶子，无需任何处理  </span><br>                &#125;  <br>                <span class="hljs-comment">//case 2.不是根节点 并没有孩子  </span><br>                <span class="hljs-keyword">if</span> (deleted.isLeftChild()) &#123;  <br>                    parent.left = <span class="hljs-literal">null</span>;  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    parent.right = <span class="hljs-literal">null</span>;  <br>                &#125;  <br>                deleted.parent = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help GC  </span><br>            &#125;  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (deleted.left == <span class="hljs-literal">null</span> || deleted.right == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//有一个孩子  </span><br>            <span class="hljs-keyword">if</span> (deleted == root) &#123;  <br>                <span class="hljs-comment">//case 1.删的根节点  </span><br>                root.key = replaced.key;  <br>                root.value = replaced.value;  <br>                root.left = root.right = <span class="hljs-literal">null</span>;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-comment">//case 2.不是根节点 并有一个孩子  </span><br>                <span class="hljs-keyword">if</span> (deleted.isLeftChild()) &#123;  <br>                    parent.left = replaced;  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    parent.right = replaced;  <br>                &#125;  <br>                replaced.parent = parent;  <br>                deleted.left = deleted.right = deleted.parent = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help GC  </span><br>                <span class="hljs-keyword">if</span> (isBlack(deleted) &amp;&amp; isBlack(replaced)) &#123;<span class="hljs-comment">//删除到节点时黑，剩余的也是黑，双黑  </span><br>                    <span class="hljs-comment">//复杂调整  </span><br>                    fixDoubleBlack(replaced);<span class="hljs-comment">//上面先删除了，再调整  </span><br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    <span class="hljs-comment">//case 2  </span><br>                    replaced.color = Color.BLACK;  <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-comment">//有俩个孩子，找到后继，替换，删除后继节点  </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> deleted.key;  <br>        deleted.key = replaced.key;  <br>        replaced.key = t;  <br>  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> deleted.value;  <br>        deleted.value = replaced.value;  <br>        replaced.value = v;  <br>        doRemove(replaced);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 处理双黑  </span><br><span class="hljs-comment">     * 删除到节点和剩下的节点都是黑，触发双黑，双黑的意思是，整个路径上少一个黑！需要调整  </span><br><span class="hljs-comment">     * case 3：被调整节点的兄弟为红，此时俩个侄子定为黑（过度情况，需要转换成4或5，通过旋转）  </span><br><span class="hljs-comment">     * case 4：被调整节点的兄弟为黑，俩个侄子都为黑  </span><br><span class="hljs-comment">     * case 5：被调整节点的兄弟为黑，至少一个红侄子  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixDoubleBlack</span><span class="hljs-params">(Node x)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (x == root) &#123;<span class="hljs-comment">//递归结束条件  </span><br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> x.parent;<span class="hljs-comment">//父  </span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">sibling</span> <span class="hljs-operator">=</span> x.sibling();<span class="hljs-comment">//兄弟  </span><br>        <span class="hljs-comment">//case 3:兄弟节点是红色  </span><br>        <span class="hljs-keyword">if</span> (isRed(sibling)) &#123;  <br>            <span class="hljs-keyword">if</span> (x.isLeftChild()) &#123;<span class="hljs-comment">//旋转  </span><br>                leftRotate(parent);  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                rightRotate(parent);  <br>            &#125;  <br>            parent.color = Color.RED;<span class="hljs-comment">//换色  </span><br>            sibling.color = Color.BLACK;  <br>            fixDoubleBlack(x);  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-comment">//case 4:兄弟节点是黑色，俩个侄子都是黑  </span><br>        <span class="hljs-keyword">if</span> (sibling != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">if</span> (isBlack(sibling.left) &amp;&amp; isBlack(sibling.right)) &#123;  <br>                sibling.color = Color.RED;  <br>                <span class="hljs-keyword">if</span> (isRed(parent)) &#123;  <br>                    parent.color = Color.BLACK;  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    fixDoubleBlack(parent);  <br>                &#125;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-comment">//case 5:兄弟是黑色，但是侄子有红色  </span><br>                <span class="hljs-comment">//LL 兄弟是左孩子，左侄子是红  </span><br>                <span class="hljs-keyword">if</span> (sibling.isLeftChild() &amp;&amp; isRed(sibling.left)) &#123;  <br>                    rightRotate(parent);  <br>                    sibling.left.color = Color.BLACK;  <br>                    sibling.color = parent.color;  <br>                &#125;  <br>                <span class="hljs-comment">//LR 兄弟是左孩子，右侄子是红  </span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sibling.isLeftChild() &amp;&amp; isRed(sibling.right)) &#123;  <br>                    sibling.right.color = parent.color;  <br>                    leftRotate(sibling);  <br>                    rightRotate(parent);  <br>                &#125;  <br>                <span class="hljs-comment">//RR 兄弟是右孩子，右侄子是红  </span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!sibling.isLeftChild() &amp;&amp; isRed(sibling.left)) &#123;  <br>                    sibling.left.color = parent.color;  <br>                    rightRotate(sibling);  <br>                    leftRotate(parent);  <br>                &#125;  <br>                <span class="hljs-comment">//RL 兄弟是右孩子，左侄子是红  </span><br>                <span class="hljs-keyword">else</span> &#123;  <br>                    leftRotate(parent);  <br>                    sibling.right.color = Color.BLACK;  <br>                    sibling.color = parent.color;  <br>                &#125;  <br>                parent.color = Color.BLACK;  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            fixDoubleBlack(parent);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p><strong>旋转前</strong></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221548839.png"></p><p><strong>旋转后</strong></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221550900.png"></p><p>理解旋转，对照图，标记颜色有助于帮助理解，和代码实现。</p><p>📌<em>旋转前</em>：<br>yellow是pink的左孩子；<code>Node yellow = pink.left</code><br>green是yellow的右孩子；<code>Node green = yellow.right</code><br>📌<em>旋转后</em>：<br>yellow要顶上去，成为新根；<br>pink要下去，成为yellow的右孩子；<code>yellow.right = pink</code><br>而且pink的左孩子变成了green； <code>pink.left = green</code></p><p>到这一步，如果是AVL树就完事了，不过红黑树还要维护一个parent，🙃 还需要继续处理，并且要把新根yellow的父子关系直接在旋转这个方法里给搭建好；</p><p>接下来就把pink、yellow、green的parent属性处理好。</p><p>1️⃣ 处理green的parent：<br>旋转前，green的parent是yellow；<br>旋转后，green的parent是pink；<br>所以green的parent要重新赋值，当然green并不一定存在，所以需要一个判断：<br><code>if(green != null) green.parent = pink;</code></p><p>2️⃣ 处理yellow的parent：<br>旋转前，yellow的parent是pink；<br>旋转后，yellow成了pink的parent；<br>该图列不存在5,8的parent，但是可能存在，所以，<br><code>yellow.parent = pink.parent</code> 等价于 <code>yellow.parent = parent</code>，<br>因为这个parent就是通过<code>Node parent = pink.parent</code>拿到的。</p><p>3️⃣ 处理pink的parent：<br>旋转后，pink的parent变成了yellow；<br>所以<code>pink.parent = yellow</code></p><p><strong>还有一件事</strong>，就是处理好新根的父子关系，该图例有些特殊，直接就是根了，看一下下面图例：</p><p><strong>旋转前</strong></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221605459.png"></p><p><strong>旋转后</strong></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221606180.png"></p><p>要维护yellow顶上去之后的parent父子关系。<br>旋转前，通过<code>Node parent = pink.parent;</code> 拿到之前的根。<br>旋转后，需要判断之前pink是它的父的左还是右孩子，就可以判断之后，决定yellow是之前根到左还是右，所以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(parent.left == pink)&#123;<br>parent.left = yellow;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>parent.right = yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后再考虑之前的特殊情况，<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309221548839.png"></p><p>pink是之前的根，它的parent是null，那去给它的left、right赋值肯定是有问题的，所以应该排除这种情况，直接把yellow作为root即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(parent == <span class="hljs-literal">null</span>) root = yellow;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(parent.left == pink)&#123;<span class="hljs-comment">//把上面的非根情况逻辑补充上</span><br>parent.left = yellow;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>parent.right = yellow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p>其实左旋类似右旋，只不过反过来。可以通过着色法搞一下，比对右旋加深理解。</p><h3 id="新增或更新"><a href="#新增或更新" class="headerlink" title="新增或更新"></a>新增或更新</h3><p>新增的时候，跟基本的二叉搜索树一致，只不过多两件事</p><ul><li>1.要维护新增节点的parent属性</li><li>2.要维护红红的不平衡，因为新增的是默认红色</li></ul><p>红红不平衡，细分有四种case：<br>因为插入节点均视为红色🔴</p><ul><li>case 1.插入节点为根节点，将根节点变黑⚫️</li><li>case 2.插入节点的父节点若为黑色⚫️，树的红黑性质不变，无序调整<br>插入节点的父节点为红色🔴，触发红红相邻</li><li>case 3.叔叔为红色🔴<ul><li>1.父亲变为黑色⚫️，为了保证黑色平衡，连带叔叔也变成黑色⚫️</li><li>2.祖父如果是黑色不变，会造成这个子树黑色过多，因此祖父也变为红色🔴</li><li>3.祖父如果变成红色，可能会接着触发红红相邻，因此继续对祖父进行递归调整</li><li>4.直到根节点，如果root变为红色，改为红色就完成了</li></ul></li><li>case 4.叔叔为黑色⚫️<ul><li>1.父亲为左孩子，插入节点也是左孩子，此时即LL不平衡</li><li>2.父亲为左孩子，插入节点是右孩子，此时即LR不平衡</li><li>3.父亲为右孩子，插入节点也是右孩子，此时即RR不平衡</li><li>4.父亲为右孩子，插入节点是左孩子，此时即RL不平衡</li></ul></li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除可能触发双黑的情况，触发双黑，双黑的意思是，整个路径上少一个黑！需要调整也有很多case如下：</p><ul><li>case 0：如果删除节点有俩个孩子，化简成只有一个孩子或没有孩子（替换删除）</li><li>csae 1：删除到是根节点</li><li>case 2：删除的是黑⚫️，剩下的红🔴，剩下这个红节点变黑⚫️</li><li>case 3：被调整节点的兄弟为红🔴，此时俩个侄子定为黑⚫️</li><li>case 4：被调整节点的兄弟是黑⚫️，俩个侄子都为黑⚫️</li><li>case 5：被调整节点的兄弟是黑⚫️，至少一个红🔴侄子<ul><li>如果兄弟是左孩子，左侄子是红🔴，LL不平衡</li><li>如果兄弟是左孩子，右侄子是红🔴，LR不平衡</li><li>如果兄弟是右孩子，右侄子是红🔴，RR不平衡</li><li>如果兄弟是右孩子，左侄子是红🔴，RL不平衡</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红黑树</tag>
      
      <tag>左旋</tag>
      
      <tag>右旋</tag>
      
      <tag>变色</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（九）- AVL树</title>
    <link href="/posts/cbf454fc/"/>
    <url>/posts/cbf454fc/</url>
    
    <content type="html"><![CDATA[<p class="note note-light">二叉搜索树，如果不平衡，那么查找效率就会从对数级降级成O(n)。<br>可以通过旋转来恢复平衡，而且旋转并不影响二叉搜索树的特性。<br>那么，如何判断是否不平衡呢，是有个结论的：<br>如果一个节点的左右孩子，高度差超过1，则此节点失衡，才需要旋转。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212107467.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212109106.png"></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><ul><li>二叉搜索树在插入和删除时，节点可能失衡。</li><li>如果在插入和删除时通过旋转，始终让二叉搜索树保持平衡，称为自平衡的二叉搜索树。</li><li>AVL是自平衡二叉搜索树的实现之一。</li></ul></blockquote><h2 id="旋转分析"><a href="#旋转分析" class="headerlink" title="旋转分析"></a>旋转分析</h2><p>失衡有四种情况LL、LR、RL、RR，但基本的选择操作有俩种就是左旋或右旋。</p><h3 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h3><blockquote><ul><li>失衡节点（图中5红色）的bf &gt; 1，即左边更高</li><li>失衡节点的左孩子（图中3黄色）的bf &gt;&#x3D; 0，即左孩子也是左边更高或等高</li></ul></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212134218.png"></p><h3 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h3><blockquote><ul><li>失衡节点（图中6）的bf &gt; 1，即左边高</li><li>失衡节点的左孩子（图中2红色）的bf &lt; 0，即左孩子是右边高</li></ul></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212135453.png"></p><h3 id="RL"><a href="#RL" class="headerlink" title="RL"></a>RL</h3><blockquote><ul><li>失衡节点（图中2）的bf &lt; -1 ，即右边高</li><li>失衡节点的右孩子（图中6红色）的bf &gt; 0 ，即右孩子的左边更高</li></ul></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212135743.png"></p><h3 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h3><blockquote><ul><li>失衡节点（图中2红色）的bf &lt; -1 ，即右边更高</li><li>失衡节点（图中6黄色）的bf &lt;&#x3D; 0，即右孩子的右边更高或等高</li></ul></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212135380.png"></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> avl;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLTree</span> &#123;  <br>  <br>    AVLNode root;  <br>  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLNode</span> &#123;  <br>        <span class="hljs-type">int</span> key;  <br>        Object value;  <br>        AVLNode left;  <br>        AVLNode right;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//高度  </span><br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLNode</span><span class="hljs-params">(<span class="hljs-type">int</span> key, Object value)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLNode</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLNode</span><span class="hljs-params">(<span class="hljs-type">int</span> key, Object value, AVLNode left, AVLNode right)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>            <span class="hljs-built_in">this</span>.left = left;  <br>            <span class="hljs-built_in">this</span>.right = right;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//求节点的高度  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">height</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        <span class="hljs-keyword">return</span> node == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : node.height;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//更新节点高度(新增、删除、旋转)  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateHeight</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        <span class="hljs-comment">//就是找左或右深度加1  </span><br>        node.height = Integer.max(height(node.left), height(node.right)) + <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 平衡因子balance factor = 左子树高度-右子树高度  </span><br><span class="hljs-comment">     * 0 , -1, 1 都是平衡的  </span><br><span class="hljs-comment">     * bf&gt;1，不平衡，表示左边高  </span><br><span class="hljs-comment">     * bf&lt;-1，不平衡，表示右边高  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bf</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        <span class="hljs-keyword">return</span> height(node.left) - height(node.right);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 右旋，就是把根旋转下去，把左子树旋转上来  </span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 要旋转的节点  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 选装上去的新的根节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> AVLNode <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        <span class="hljs-type">AVLNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> node.left;<span class="hljs-comment">//找到左子树  </span><br>        left.right = node;<span class="hljs-comment">//顶上去  </span><br>        node.left = left.right;<span class="hljs-comment">//换爹的  </span><br>        updateHeight(node);<span class="hljs-comment">//更新高度  </span><br>        updateHeight(left);<span class="hljs-comment">//更新高度  </span><br>        <span class="hljs-keyword">return</span> left;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 左旋，就是把根旋转下去，把右子树旋转上来  </span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 要旋转的节点  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 选装上去的新的根节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> AVLNode <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        <span class="hljs-type">AVLNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> node.right;<span class="hljs-comment">//找到右子树  </span><br>        right.left = node;<span class="hljs-comment">//顶上去  </span><br>        node.right = right.left;<span class="hljs-comment">//换爹的  </span><br>        updateHeight(node);<span class="hljs-comment">//更新高度  </span><br>        updateHeight(right);<span class="hljs-comment">//更新高度  </span><br>        <span class="hljs-keyword">return</span> right;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//先左旋左子树，再右旋根节点  </span><br>    <span class="hljs-keyword">private</span> AVLNode <span class="hljs-title function_">leftRightRotate</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        node.left = leftRotate(node.left);  <br>        <span class="hljs-keyword">return</span> rightRotate(node);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//先右旋右子树，在左旋根节点  </span><br>    <span class="hljs-keyword">private</span> AVLNode <span class="hljs-title function_">rightLeftRotate</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        node.right = rightRotate(node.right);  <br>        <span class="hljs-keyword">return</span> leftRotate(node);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 检查节点是否失衡，重新平衡  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> AVLNode <span class="hljs-title function_">balance</span><span class="hljs-params">(AVLNode node)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> bf(node);  <br>        <span class="hljs-keyword">if</span> (bf &gt; <span class="hljs-number">1</span> &amp;&amp; bf(node.left) &gt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//LL 考虑删除引发的不平衡，加个等号  </span><br>            <span class="hljs-keyword">return</span> leftRotate(node);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bf &gt; <span class="hljs-number">1</span> &amp;&amp; bf(node.left) &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//LR  </span><br>            <span class="hljs-keyword">return</span> leftRightRotate(node);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bf &lt; -<span class="hljs-number">1</span> &amp;&amp; bf(node.right) &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//RL  </span><br>            <span class="hljs-keyword">return</span> rightLeftRotate(node);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bf &lt; -<span class="hljs-number">1</span> &amp;&amp; bf(node.right) &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//RR 考虑删除引发的不平衡，加个等号  </span><br>            <span class="hljs-keyword">return</span> rightRotate(node);  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> node;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 新增&amp;更新  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, Object value)</span> &#123;  <br>        root = doPut(root, key, value);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 递归实现put  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> AVLNode <span class="hljs-title function_">doPut</span><span class="hljs-params">(AVLNode node, <span class="hljs-type">int</span> key, Object value)</span> &#123;  <br>        <span class="hljs-comment">//1.找到空位，创建新节点  </span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AVLNode</span>(key, value);  <br>        &#125;  <br>        <span class="hljs-comment">//2.key已存在，更新  </span><br>        <span class="hljs-keyword">if</span> (key == node.key) &#123;  <br>            node.value = value;  <br>            <span class="hljs-keyword">return</span> node;  <br>        &#125;  <br>        <span class="hljs-comment">//3.继续查找  </span><br>        <span class="hljs-keyword">if</span> (key &lt; node.key) &#123;  <br>            node.left = doPut(node.left, key, value);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            node.right = doPut(node.right, key, value);  <br>        &#125;  <br>        updateHeight(node);  <br>        <span class="hljs-keyword">return</span> balance(node);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 删除  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;  <br>        root = doRemove(root, root.key);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> AVLNode <span class="hljs-title function_">doRemove</span><span class="hljs-params">(AVLNode node, <span class="hljs-type">int</span> key)</span> &#123;  <br>        <span class="hljs-comment">//1.node==null  </span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-comment">//2.没找到key继续递归  </span><br>        <span class="hljs-keyword">if</span> (key &lt; node.key) &#123;  <br>            node.left = doRemove(node.left, key);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.key &lt; key) &#123;  <br>            node.right = doRemove(node.right, key);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-comment">//3.找到key  1.没有孩子  2.只有一个孩子  3有俩个孩子  </span><br>            <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;  <br>                node = node.right;<span class="hljs-comment">//暂存给node 等待更新高度和平衡  </span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.right == <span class="hljs-literal">null</span>) &#123;  <br>                node = node.left;<span class="hljs-comment">//暂存给node 等待更新高度和平衡  </span><br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-comment">//找后续：右子树的最左  </span><br>                <span class="hljs-comment">//处理后事  </span><br>                <span class="hljs-comment">//顶替  </span><br>                <span class="hljs-type">AVLNode</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.right;  <br>                <span class="hljs-keyword">while</span> (s.left != <span class="hljs-literal">null</span>) &#123;  <br>                    s = s.left;  <br>                &#125;  <br>                s.right = doRemove(node.right, s.key);  <br>                s.left = node.left;  <br>                node = s;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-comment">//4.更新高度  </span><br>        updateHeight(node);  <br>        <span class="hljs-comment">//5.balance  </span><br>        <span class="hljs-keyword">return</span> balance(node);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AVL树</tag>
      
      <tag>失衡</tag>
      
      <tag>高度</tag>
      
      <tag>旋转</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（八）- 二叉搜索树</title>
    <link href="/posts/6ed67d4e/"/>
    <url>/posts/6ed67d4e/</url>
    
    <content type="html"><![CDATA[<blockquote><p>之前接触过了很多数据结果，包括动态数组、单向链表、双向链表、环形链表、优先级队列、大顶堆等等，在这些数据结构里查找一个元素效率都不太高，都是线性的时间。如果想实现快速查找，就得引入新的算法或者数据结构了。最早了解的二分查找算法查找效率不错，是logn的。但是排序也是成本比较高的，先排序再查找有些得不偿失。<br>那么有什么新的算法或数据结构呢，答案是有的。<br>接下来就来看一下二叉搜索树，也称为二叉排序树。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211606403.png"></p><p class="note note-primary">二叉搜索树有俩个特点：<br>1.树节点增加key属性，用来比较谁大谁小，key不可重复。<br>2.对于任意一个树节点，它的key比左子树的key都大，同时也比右子树的key都小。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><blockquote><p>查找的性能是对数级别的，但是有些情况比如树不平衡的时候，时间复杂度又回到了O(n)。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211610963.png"></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212009913.png"></p><p class="note note-light">以下是几个提前准备的算法基础。</p><p><strong>前任的算法</strong></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211951386.png"></p><p><strong>后任的算法</strong>（与前任相反）<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212008791.png"></p><p><strong>删除的算法</strong>（稍微复杂）<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309212014389.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> bst;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * Binary Search Tree二叉搜索树  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BSTTree</span>&lt;K <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;K&gt;, V&gt; &#123;  <br>  <br>    BSTNode&lt;K, V&gt; root;<span class="hljs-comment">//根节点  </span><br>  <br>  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BSTNode</span>&lt;K, V&gt; &#123;  <br>        K key;  <br>        V value;  <br>        BSTNode&lt;K, V&gt; left;  <br>        BSTNode&lt;K, V&gt; right;  <br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">BSTNode</span><span class="hljs-params">(K key)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">BSTNode</span><span class="hljs-params">(K key, V value)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">BSTNode</span><span class="hljs-params">(K key, V value, BSTNode&lt;K, V&gt; left, BSTNode&lt;K, V&gt; right)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.key = key;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>            <span class="hljs-built_in">this</span>.left = left;  <br>            <span class="hljs-built_in">this</span>.right = right;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找关键字对应的值  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;  <br>        <span class="hljs-comment">//对外隐藏了BSTNode的参数，不用暴露给外界  </span><br>        <span class="hljs-keyword">return</span> doGet(root, key);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 递归方式实现get  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> V <span class="hljs-title function_">doGet</span><span class="hljs-params">(BSTNode&lt;K, V&gt; p, K key)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没有节点了，没找到，结束递归  </span><br>        &#125;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> key.compareTo(p.key);  <br>        <span class="hljs-keyword">if</span> (result &lt; <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">return</span> doGet(p.left, key);<span class="hljs-comment">//如果待查找的key小于node，向左找  </span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">return</span> doGet(p.right, key);<span class="hljs-comment">//向右找  </span><br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> p.value;<span class="hljs-comment">//找到了就返回value  </span><br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 非递归实现get  </span><br><span class="hljs-comment">     * 尾递归的代码转换成非递归的实现非常简单，这样性能更好一些  </span><br><span class="hljs-comment">     * 比较java不支持尾递归自动优化，不妨都转换成循环的方式。  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">_get</span><span class="hljs-params">(K key)</span> &#123;  <br>        BSTNode&lt;K, V&gt; p = root;  <br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> key.compareTo(p.key);  <br>            <span class="hljs-comment">/*  </span><br><span class="hljs-comment">            compareTo            -1 key &lt; node.key            0 key == node.key            1 key &gt; node.key             */</span>            <span class="hljs-keyword">if</span> (result &lt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.left;  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.right;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">return</span> p.value;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找最小关键字的值  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> doMin(root);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 递归实现min  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">doMin</span><span class="hljs-params">(BSTNode&lt;K, V&gt; node)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//最小节点  </span><br>            <span class="hljs-keyword">return</span> node.value;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> doMin(node.left);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 非递归实现min  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">_doMin1</span><span class="hljs-params">(BSTNode node)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-keyword">while</span> (node.left != <span class="hljs-literal">null</span>) &#123;  <br>            node = node.left;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> node.value;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找最大关键字对应的值  </span><br><span class="hljs-comment">     * 最最小值类似，换找right即可，此处就省略了  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">max</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> _doMax(root);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 非递归实现max  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">_doMax</span><span class="hljs-params">(BSTNode&lt;K, V&gt; node)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-keyword">while</span> (node.right != <span class="hljs-literal">null</span>) &#123;  <br>            node = node.right;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> node.value;  <br>    &#125;  <br>  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 存储关键字和对应值  </span><br><span class="hljs-comment">     * 先比较，再判断是更新还是新增  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;  <br>        <span class="hljs-comment">//1.key存在，更新  </span><br>        <span class="hljs-comment">//2.key不存在，新增  </span><br>  <br>        <span class="hljs-comment">//get的实现拿过来  </span><br>        BSTNode&lt;K, V&gt; p = root;  <br>        BSTNode&lt;K, V&gt; parent = <span class="hljs-literal">null</span>;  <br>  <br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            parent = p;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> key.compareTo(p.key);  <br>            <span class="hljs-keyword">if</span> (result &lt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.left;  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.right;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-comment">//找到了，更新  </span><br>                p.value = value;  <br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-comment">//没找到，新增  </span><br>        <span class="hljs-comment">//父节点就是parent，因为if、else if变成null之后parent就是目标父节点  </span><br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) &#123;  <br>            root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BSTNode</span>&lt;&gt;(key, value);  <br>        &#125;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">compareTo</span> <span class="hljs-operator">=</span> key.compareTo(parent.key);  <br>        <span class="hljs-keyword">if</span> (compareTo &lt; <span class="hljs-number">0</span>) &#123;  <br>            parent.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BSTNode</span>&lt;&gt;(key, value);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (compareTo &gt; <span class="hljs-number">0</span>) &#123;  <br>            parent.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BSTNode</span>&lt;&gt;(key, value);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找关键字的前驱值（前任，比它小的里面最大的）  </span><br><span class="hljs-comment">     * 对二叉搜索树做一次中序遍历一下即可得到升序的结果，但这样不高效。  </span><br><span class="hljs-comment">     * &lt;p&gt;  </span><br><span class="hljs-comment">     * 而是要通过一下总结下来的规律得出的。  </span><br><span class="hljs-comment">     * 情况1：节点有左子树，此时前任就是左子树的最大值  </span><br><span class="hljs-comment">     * 情况2：节点没有左子树，若离它最近的、自左而来的祖先就是前任  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">predecessor</span><span class="hljs-params">(K key)</span> &#123;  <br>        BSTNode&lt;K, V&gt; p = root;  <br>        BSTNode&lt;K, V&gt; fromLeft = <span class="hljs-literal">null</span>;  <br>  <br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> key.compareTo(p.key);  <br>            <span class="hljs-keyword">if</span> (result &lt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.left;<span class="hljs-comment">//向左走，祖先自右而来  </span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.right;<span class="hljs-comment">//向右走，祖先自左而来  </span><br>                fromLeft = p;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-comment">//没找到节点  </span><br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        &#125;  <br>        <span class="hljs-comment">//情况1  </span><br>        <span class="hljs-keyword">if</span> (p.left != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> _doMax(p.left);<span class="hljs-comment">//左子树最大值  </span><br>        &#125;  <br>        <span class="hljs-comment">//情况2  </span><br>        <span class="hljs-keyword">return</span> fromLeft != <span class="hljs-literal">null</span> ? fromLeft.value : <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找关键字的后驱值（后任，比它大的里面最小的）  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">successor</span><span class="hljs-params">(K key)</span> &#123;  <br>        BSTNode&lt;K, V&gt; p = root;  <br>        BSTNode&lt;K, V&gt; fromRight = <span class="hljs-literal">null</span>;  <br>  <br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> key.compareTo(p.key);  <br>            <span class="hljs-keyword">if</span> (result &lt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.left;<span class="hljs-comment">//向左走，祖先自右而来  </span><br>                fromRight = p;  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;  <br>                p = p.right;<span class="hljs-comment">//向右走，祖先自左而来  </span><br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-comment">//没找到节点  </span><br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        &#125;  <br>        <span class="hljs-comment">//情况1 节点有右子树，此时后任就是右子树的最小值  </span><br>        <span class="hljs-keyword">if</span> (p.right != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> doMin(p.right);<span class="hljs-comment">//右子树最小值  </span><br>        &#125;  <br>        <span class="hljs-comment">//情况2 节点数没有右子树，若离它最近的、自右而来的祖先就是后任  </span><br>        <span class="hljs-keyword">return</span> fromRight != <span class="hljs-literal">null</span> ? fromRight.value : <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 根据关键字删除  </span><br><span class="hljs-comment">     * 核心概念：把被删除的节点的后继节点顶上去  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">delete</span><span class="hljs-params">(K key)</span> &#123;  <br>        BSTNode&lt;K, V&gt; p = root;  <br>        BSTNode&lt;K, V&gt; parent = <span class="hljs-literal">null</span>;  <br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> key.compareTo(p.key);  <br>            <span class="hljs-keyword">if</span> (result &lt; <span class="hljs-number">0</span>) &#123;  <br>                parent = p;  <br>                p = p.left;<span class="hljs-comment">//向左走，祖先自右而来  </span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;  <br>                parent = p;  <br>                p = p.right;<span class="hljs-comment">//向右走，祖先自左而来  </span><br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-comment">//删除操作  </span><br>        <span class="hljs-keyword">if</span> (p.left == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-comment">//删除情况1(含情况3，走1,2都可以)  </span><br>            shift(parent, p, p.right);  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.right == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-comment">//删除情况2  </span><br>            shift(parent, p, p.left);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-comment">//删除情况4  </span><br>            <span class="hljs-comment">//4.1被删除节点找后继  </span><br>            BSTNode&lt;K, V&gt; s = p.right;  <br>            BSTNode&lt;K, V&gt; sPrent = p;<span class="hljs-comment">//后继父亲  </span><br>            <span class="hljs-keyword">while</span> (s.left != <span class="hljs-literal">null</span>) &#123;  <br>                sPrent = s;  <br>                s = s.left;  <br>            &#125;<span class="hljs-comment">//s就是后继节点  </span><br>            <span class="hljs-comment">//4.2删除节点与后继节点不相邻处理后继的后事  </span><br>            <span class="hljs-keyword">if</span> (sPrent != p) &#123;<span class="hljs-comment">//不相邻  </span><br>                shift(sPrent, s, s.right);<span class="hljs-comment">//不可能有左孩子  </span><br>                s.right = p.right;<span class="hljs-comment">//顶上去的右  </span><br>            &#125;  <br>            <span class="hljs-comment">//4.3后继取代被删除节点  </span><br>            shift(parent, p, s);  <br>            s.left = p.left;<span class="hljs-comment">//顶上去的左  </span><br>        &#125;  <br>        <span class="hljs-keyword">return</span> p.value;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 托孤方法 shift  </span><br><span class="hljs-comment">     *     * <span class="hljs-doctag">@param</span> parent  被删除节点的父节点  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> deleted 被删除到节点  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> child   被顶上去的节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shift</span><span class="hljs-params">(BSTNode&lt;K, V&gt; parent, BSTNode&lt;K, V&gt; deleted, BSTNode&lt;K, V&gt; child)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) &#123;  <br>            root = child;  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deleted == parent.left) &#123;  <br>            parent.left = child;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            parent.right = child;  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉搜索树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（七）- 二叉树</title>
    <link href="/posts/d9d84fdb/"/>
    <url>/posts/d9d84fdb/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p class="note note-light">树中每个节点最多俩个子节点，不同于完全二叉树，不需要每层都满。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211458897.png"></p><p class="note note-secondary">这种数据结构表示方式有俩种：<br>一种是TreeNode。<br>一种是数组。</p><h3 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211459204.png"></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211459847.png"></p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211500904.png"></p><p class="note note-secondary">层序遍历即是广度优先遍历，需要配合队列实现。<br>注：<br>以队列来层序遍历时针对TreeNode这种方式表示的二叉树。<br>如果用数组形式实现二叉树，则直接遍历数组即可，自然为层序遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure.treetraversal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归方式遍历二叉树，前序、中序、后序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeTraversal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *         1</span><br><span class="hljs-comment">         *       /  \</span><br><span class="hljs-comment">         *      2    3</span><br><span class="hljs-comment">         *    /     /\</span><br><span class="hljs-comment">         *   4      5  6</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">4</span>), <span class="hljs-number">2</span>, <span class="hljs-literal">null</span>), <span class="hljs-number">1</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">5</span>), <span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">6</span>)<br>                )<br>        );<br><br>        System.out.println(<span class="hljs-string">&quot;前序遍历：&quot;</span>);<br>        preOrder(root);<br>        System.out.println(<span class="hljs-string">&quot;\n中序遍历：&quot;</span>);<br>        inOrder(root);<br>        System.out.println(<span class="hljs-string">&quot;\n后序遍历：&quot;</span>);<br>        postOrder(root);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前序遍历</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        System.out.print(node.val + <span class="hljs-string">&quot;\t&quot;</span>);<br>        preOrder(node.left);<br>        preOrder(node.right);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 中序遍历</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        inOrder(node.left);<br>        System.out.print(node.val + <span class="hljs-string">&quot;\t&quot;</span>);<br>        inOrder(node.right);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后序遍历</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        postOrder(node.left);<br>        postOrder(node.right);<br>        System.out.print(node.val + <span class="hljs-string">&quot;\t&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>广度优先遍历</tag>
      
      <tag>深度优先遍历</tag>
      
      <tag>前序</tag>
      
      <tag>中序</tag>
      
      <tag>后序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（六）- 堆</title>
    <link href="/posts/88ba86b6/"/>
    <url>/posts/88ba86b6/</url>
    
    <content type="html"><![CDATA[<p class="note note-light">在了解优先级队列中，接触过堆的概念，了解了堆的特性以及如何使用，这里看如何建立一个堆。</p><h2 id="大顶堆"><a href="#大顶堆" class="headerlink" title="大顶堆"></a>大顶堆</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 大顶堆</span><br><span class="hljs-comment"> * heapify建堆，使用弗洛伊德算符，时间复杂度O(n)</span><br><span class="hljs-comment"> * 1.找到最后一个非叶子节点</span><br><span class="hljs-comment"> * 2.从最后一个非叶子节点开始，依次下沉</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * heapify、down、up这是三个核心方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxHeap</span> &#123;<br>    <span class="hljs-type">int</span>[] array;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = array;<br>        <span class="hljs-built_in">this</span>.size = array.length;<br>        heapify();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 建堆</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//如何找到最后一个非叶子节点    size/2-1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            down(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除堆顶元素</span><br><span class="hljs-comment">     * 直接从索引0位置移除效率不高，所以先将它最后一个元素交换，</span><br><span class="hljs-comment">     * 尾部移除，size-1就可以了，但可能导致不满足大顶堆特性，</span><br><span class="hljs-comment">     * 需要做一次下潜</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>        swap(<span class="hljs-number">0</span>, size - <span class="hljs-number">1</span>);<br>        size--;<br>        down(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> top;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定索引处元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">deleted</span> <span class="hljs-operator">=</span> array[index];<br>        swap(index, size - <span class="hljs-number">1</span>);<br>        size--;<br>        down(index);<br>        <span class="hljs-keyword">return</span> deleted;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 替换堆顶元素</span><br><span class="hljs-comment">     * 替换后可能不满足大顶堆特性，需要做一次下潜</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replace</span><span class="hljs-params">(<span class="hljs-type">int</span> replaced)</span> &#123;<br>        array[<span class="hljs-number">0</span>] = replaced;<br>        down(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取堆顶元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> array[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向堆的尾部添加元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(<span class="hljs-type">int</span> offered)</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == array.length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        up(offered);<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将inserted元素上浮：直至offered小于父元素或到堆顶</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">(<span class="hljs-type">int</span> offered)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> size;<br>        <span class="hljs-keyword">while</span> (child &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<span class="hljs-comment">//父节点 公式</span><br>            <span class="hljs-keyword">if</span> (array[parent] &gt;= offered)<br>                array[child] = array[parent];<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>            child = parent;<br>        &#125;<br>        array[child] = offered;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将parent索引处元素下沉：与俩个孩子较大者交换，直至没孩子或孩子没它大</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> parent)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> parent * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">//左孩子 公式</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> left + <span class="hljs-number">1</span>;<span class="hljs-comment">//右孩子 公式</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> parent;<br>        <span class="hljs-keyword">if</span> (left &lt; size &amp;&amp; array[left] &gt; array[max]) max = left;<br>        <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp; array[right] &gt; array[max]) max = right;<br>        <span class="hljs-keyword">if</span> (max != parent) &#123;<span class="hljs-comment">//如果孩子比父亲大，就交换</span><br>            swap(max, parent);<br>            down(max);<span class="hljs-comment">//递归</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换俩个索引处元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> array[i];<br>        array[i] = array[j];<br>        array[j] = t;<br>    &#125;<br><br><br>    <span class="hljs-comment">//test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-type">MaxHeap</span> <span class="hljs-variable">maxHeap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MaxHeap</span>(array);<br>        System.out.println(Arrays.toString(maxHeap.array));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211454884.png"></p>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆</tag>
      
      <tag>大顶堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（五）- 栈</title>
    <link href="/posts/a110ea6d/"/>
    <url>/posts/a110ea6d/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p class="note note-primary">栈是一种线性数据结构，只能在其一端添加数据和移除数据。习惯来说，这一端称为栈顶，另一端不能操作数据的称为栈底，就如同生活中的一摞书籍。<br>还是老样子，看一下用不同方式实现栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*先定义一个Stack接口*/</span><br><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向栈顶压入元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待压入元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 压入成功返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E value)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从栈顶弹出元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 栈非空返回栈顶元素，否则返回null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回栈顶元素，但不弹出</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 栈非空返回栈顶元素，否则返回null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断栈是否为空</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 空返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断栈是否已满</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 已满返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 链表实现栈</span><br><span class="hljs-comment"> * 含哨兵单向链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListStack</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Stack</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        E value;<br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E value, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 哨兵节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListStack</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * head -&gt; 1 -&gt; null</span><br><span class="hljs-comment">     * head -&gt; 2 -&gt; 1 -&gt; null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//        Node&lt;E&gt; added = new Node&lt;&gt;(value, head.next);</span><br><span class="hljs-comment">//        head.next = added;</span><br>        head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(value, head.next);<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Node&lt;E&gt; first = head.next;<span class="hljs-comment">//找到第一个节点</span><br>        head.next = first.next;<span class="hljs-comment">//跳过(删除)第一个节点</span><br>        size--;<br>        <span class="hljs-keyword">return</span> first.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Node&lt;E&gt; first = head.next;<span class="hljs-comment">//找到第一个节点</span><br>        <span class="hljs-keyword">return</span> first.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        return head.next == null;</span><br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            Node&lt;E&gt; p = head.next;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Stack</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> top;<span class="hljs-comment">//栈顶指针</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 底            顶</span><br><span class="hljs-comment">     * 0  1  2  3  4</span><br><span class="hljs-comment">     * 因为右边数组更好操作，与链表是反方向的</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        array[top++] = value;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> array[--top];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> array[top - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == array.length;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> top;<span class="hljs-comment">//指向栈顶，从右往左遍历</span><br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p &gt; <span class="hljs-number">0</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> array[--p];<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h2><p class="note note-secondary">这个很简单：<br>遇到左括号，把要配对的右括号压入栈。<br>遇到右括号，把它与栈顶元素比对。<br>- 若相等，栈顶元素弹出，继续比对下一组。<br>- 若不等，无效括号直接返回false。<br></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309202202374.png"></p><h2 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h2><p class="note note-secondary">1 + 2 ，这是中缀表达式。<br>1 2 +，这是后缀表达式。<br>后缀表达式交给计算机计算非常方便，因为从左向右计算，且不需要考虑优先级，优先级就是从左到右给定的顺序。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309202204129.png"></p><p class="note note-primary">解题思路：<br>遇到数字就放入栈，如果遇到运算符就从栈中取出前俩个元素计算，计算结果再压入栈，栈中剩余的一个元素就是运算结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evalRPN</span><span class="hljs-params">(String[] tokens)</span> &#123;<br>        LinkedList&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String t : tokens) &#123;<br>            <span class="hljs-keyword">switch</span> (t) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span> -&gt; &#123;<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> stack.pop();<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> stack.pop();<br>                    stack.push(a + b);<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span> -&gt; &#123;<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> stack.pop();<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> stack.pop();<br>                    stack.push(a - b);<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span> -&gt; &#123;<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> stack.pop();<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> stack.pop();<br>                    stack.push(a * b);<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span> -&gt; &#123;<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> stack.pop();<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> stack.pop();<br>                    stack.push(a / b);<br>                &#125;<br>                <span class="hljs-keyword">default</span> -&gt; &#123;<span class="hljs-comment">//数字</span><br>                    stack.push(Integer.parseInt(t));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
      <tag>有效括号</tag>
      
      <tag>逆波兰表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（四）- 队列</title>
    <link href="/posts/18ca4eee/"/>
    <url>/posts/18ca4eee/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p class="note note-primary">计算机科学中，queue是以顺序的方式维护一组数据集合，在一端添加数据，从另一个端移除数据。习惯来说，添加的一端称为尾，移除的一端称为头，就如同生活中排队购买商品。</p><h2 id="链表实现队列"><a href="#链表实现队列" class="headerlink" title="链表实现队列"></a>链表实现队列</h2><p class="note note-secondary">下面以单向环形含哨兵链表方式来实现队列。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309202026177.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先定义队列的接口</span><br><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向队列尾部添加一个元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> val 待插入值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 插入成功返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E val)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从队列头部取出一个元素，并移除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果队列非空，返回队列头部元素，否则返回null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从队列头部取出一个元素，但不移除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果队列非空，返回队列头部元素，否则返回null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断队列是否为空</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 空返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断队列是否已满</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 已满返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于单向环形链表实现的队列</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 队列只需要操作头，尾部不需要操作，所以只需要一个指针即可</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListQueue</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 节点类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        E value;<br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E value, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    Node&lt;E&gt; head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    Node&lt;E&gt; tail = head;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<span class="hljs-comment">// 节点数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<span class="hljs-comment">// 队列容量</span><br><br>    &#123;<br>    <span class="hljs-comment">//构成环</span><br>        tail.next = head;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListQueue</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        Node&lt;E&gt; added = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(val, head);<br>        tail.next = added;<br>        tail = added;<span class="hljs-comment">//让新节点作为新的tail</span><br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Node&lt;E&gt; first = head.next;<br>        head.next = first.next;<br>        <span class="hljs-keyword">if</span> (first == tail) tail = head;<br>        size--;<br>        <span class="hljs-keyword">return</span> first.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> head.next.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head == tail;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            Node&lt;E&gt; p = head.next;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != head;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="环形数组实现队列"><a href="#环形数组实现队列" class="headerlink" title="环形数组实现队列"></a>环形数组实现队列</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309202148425.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309202148648.png"></p><p class="note note-secondary">判断头指针和尾指针是否指向同一个就是判空。<br>当尾指针+1等于头指针就是判断满，(tail+1)%5 == head。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue1</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> head;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tail;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue1</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-built_in">this</span>.capacity + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        array[tail] = val;<br>        tail = (tail + <span class="hljs-number">1</span>) % array.length;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> array[head];<br>        head = (head + <span class="hljs-number">1</span>) % array.length;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> array[head];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head == tail;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (tail + <span class="hljs-number">1</span>) % array.length == head;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[p];<br>                p = (p + <span class="hljs-number">1</span>) % array.length;<br>                <span class="hljs-keyword">return</span> e;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p class="note note-primary">双端队列特点：俩端都可以添加、删除</p><h3 id="基于双向环形链表实现"><a href="#基于双向环形链表实现" class="headerlink" title="基于双向环形链表实现"></a>基于双向环形链表实现</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309210856606.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双端队列</span><br><span class="hljs-comment"> * 两端都可以操作添加和删除</span><br><span class="hljs-comment"> * queue 普通队列</span><br><span class="hljs-comment"> * deque 双端队列   double-ended queue</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Deque</span>&lt;E&gt; &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向头部添加元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 待添加元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 添加成功返回true</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向尾部添加元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 待添加元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 添加成功返回true</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从队列头部删除元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 头部元素</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从尾部获取元素并删除</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 尾部元素</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从头部获取元素但不删除</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 头部元素</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从尾部获取元素但不删除</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 尾部元素</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 队列是否为空</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 空返回true, 否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 队列是否已满</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 满返回true, 否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于双向环形链表实现的双端队列</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 注：双向和双端是两个概念，</span><br><span class="hljs-comment"> * 双向是指链表节点有两个指针，一个指向前一个节点，一个指向后一个节点；</span><br><span class="hljs-comment"> * 双端是指队列两端都可以操作添加和删除。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 为什么要用双向链表？</span><br><span class="hljs-comment"> * 因为双端队列需要操作尾端，所以需要尾指针，而单向链表只有头指针，所以需要双向链表。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 为什么要用环形链表？</span><br><span class="hljs-comment"> * 因为环形链表可以用一个哨兵，即充当头指针又充当尾指针，这样就可以省去一个指针。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListDeque</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Deque</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        Node&lt;E&gt; prev;<br>        E value;<br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node&lt;E&gt; prev, E value, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>    <span class="hljs-type">int</span> size;<br>    Node&lt;E&gt; sentinel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//哨兵</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListDeque</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        <span class="hljs-comment">//初始化哨兵</span><br>        sentinel.prev = sentinel;<br>        sentinel.next = sentinel;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * a added b</span><br><span class="hljs-comment">     * 向头部添加</span><br><span class="hljs-comment">     * a就是哨兵，b就是哨兵的next</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        Node&lt;E&gt; a = sentinel;<br>        Node&lt;E&gt; b = sentinel.next;<br>        Node&lt;E&gt; added = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(a, e, b);<br>        a.next = added;<br>        b.prev = added;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * a added b</span><br><span class="hljs-comment">     * 向尾部添加</span><br><span class="hljs-comment">     * b就是哨兵，a就是哨兵的prev</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        Node&lt;E&gt; a = sentinel.prev;<br>        Node&lt;E&gt; b = sentinel;<br>        Node&lt;E&gt; added = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(a, e, b);<br>        a.next = added;<br>        b.prev = added;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * a removed b</span><br><span class="hljs-comment">     * 移除头部</span><br><span class="hljs-comment">     * a就是哨兵，b就是哨兵的next</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Node&lt;E&gt; a = sentinel;<br>        Node&lt;E&gt; removed = sentinel.next;<br>        Node&lt;E&gt; b = removed.next;<br>        a.next = b;<br>        b.prev = a;<br>        size--;<br>        <span class="hljs-keyword">return</span> removed.value;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * a removed b</span><br><span class="hljs-comment">     * 移除尾部</span><br><span class="hljs-comment">     * b就是哨兵，a就是哨兵的prev</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Node&lt;E&gt; b = sentinel;<br>        Node&lt;E&gt; removed = sentinel.prev;<br>        Node&lt;E&gt; a = removed.prev;<br>        a.next = b;<br>        b.prev = a;<br>        size--;<br>        <span class="hljs-keyword">return</span> removed.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> sentinel.next.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> sentinel.prev.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            Node&lt;E&gt; p = sentinel.next;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != sentinel;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="基于数组实现"><a href="#基于数组实现" class="headerlink" title="基于数组实现"></a>基于数组实现</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309210857074.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于循环数组实现的双端队列</span><br><span class="hljs-comment"> * 循环数组动的是头尾指针，不动的是数组元素</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * tail 停下来的位置不存储，会浪费一个位置</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * h - head</span><br><span class="hljs-comment"> * tail - tail</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * h</span><br><span class="hljs-comment"> * t</span><br><span class="hljs-comment"> * 0  1  2  3</span><br><span class="hljs-comment"> * a  b     c</span><br><span class="hljs-comment"> * offerLast(a)     先添加元素 tail++</span><br><span class="hljs-comment"> * offerLast(b)</span><br><span class="hljs-comment"> * offerFirst(c)    先head-- 再添加元素</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * pollFirst()      先取元素 head++</span><br><span class="hljs-comment"> * pollLast()       先tail-- 再取元素</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * head==tail 空</span><br><span class="hljs-comment"> * head~tail == 数组长度-1 满</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDeque1</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Deque</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    E[] array;<br>    <span class="hljs-type">int</span> head;<br>    <span class="hljs-type">int</span> tail;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayDeque1</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &gt;= length)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dec</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> i - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        head = dec(head, array.length);<br>        array[head] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        array[tail] = e;<br>        tail = inc(tail, array.length);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[head];<br>        array[head] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help gc</span><br>        head = inc(head, array.length);<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        tail = dec(tail, array.length);<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[tail];<br>        array[tail] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help gc</span><br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> array[head];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> array[dec(tail, array.length)];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head == tail;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (tail &gt; head) &#123;<br>            <span class="hljs-keyword">return</span> tail - head == array.length - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tail &lt; head) &#123;<br>            <span class="hljs-keyword">return</span> head - tail == <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[p];<br>                p = inc(p, array.length);<br>                <span class="hljs-keyword">return</span> e;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p class="note note-primary">优先级队列特点：一端进，另一端出，但出的时候按照优先级出！</p><h3 id="基于无序数组实现"><a href="#基于无序数组实现" class="headerlink" title="基于无序数组实现"></a>基于无序数组实现</h3><p class="note note-success">无序数组实现的优势：<br>入队就直接加入对尾。<br>出队就遍历找到最大值，并删除，然后把后续的往前顺延。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> priorityqueue;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 队列接口</span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 向队列尾部添加一个元素  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> val 待插入值  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 插入成功返回true，否则返回false  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E val)</span>;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 从队列头部取出一个元素，并移除  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果队列非空，返回队列头部元素，否则返回null  </span><br><span class="hljs-comment">     */</span>    E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span>;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 从队列头部取出一个元素，但不移除  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果队列非空，返回队列头部元素，否则返回null  </span><br><span class="hljs-comment">     */</span>    E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span>;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 判断队列是否为空  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 空返回true，否则返回false  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;  <br>  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 判断队列是否已满  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 已满返回true，否则返回false  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> priorityqueue;  <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 优先级接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Priority</span> &#123;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 返回对象的优先级，约定数字越大，优先级越高  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">priority</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> priorityqueue;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 基于无序数组实现  </span><br><span class="hljs-comment"> * 入队：把元素加到数组末尾  </span><br><span class="hljs-comment"> * 出队：找到最大优先级元素，删除，相当于进行了一次选择排序  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Priority</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;  <br>  <br>    Priority[] array;  <br>    <span class="hljs-type">int</span> size;  <br>  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;  <br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priority</span>[capacity];  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//O(1)  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>        array[size++] = e;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//返回优先级最高的索引值  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">selectMax</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;  <br>            <span class="hljs-keyword">if</span> (array[i].priority() &gt; array[max].priority()) &#123;  <br>                max = i;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> max;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (index &lt; size - <span class="hljs-number">1</span>) &#123;  <br>            <span class="hljs-comment">//移动  </span><br>            System.arraycopy(array, index + <span class="hljs-number">1</span>, array, index, size - <span class="hljs-number">1</span> - index);  <br>        &#125;  <br>        array[--size]=<span class="hljs-literal">null</span>;<span class="hljs-comment">//help GC </span><br>    &#125;  <br>  <br>    <span class="hljs-comment">//O(n)  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> selectMax();  <br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) array[max];  <br>        remove(max);  <br>        <span class="hljs-keyword">return</span> e;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> selectMax();  <br>        <span class="hljs-keyword">return</span> (E) array[max];  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == array.length;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于有序数组实现"><a href="#基于有序数组实现" class="headerlink" title="基于有序数组实现"></a>基于有序数组实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> priorityqueue;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 基于有序数组实现  </span><br><span class="hljs-comment"> * 优先级最高的在队尾，优点是出队操作变的简单，直接size--就行。  </span><br><span class="hljs-comment"> * 缺点是，入队操作需要做一次排序，插入到正确位置。相当于一次插入排序。  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue2</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Priority</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;  <br>  <br>    Priority[] array;  <br>    <span class="hljs-type">int</span> size;  <br>  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue2</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;  <br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priority</span>[capacity];  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//O(n)  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br><span class="hljs-comment">//        array[size++] = e;  </span><br>        insert(e);  <br>        size++;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 插入排序  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(E e)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; array[i].priority() &gt; e.priority()) &#123;  <br>            array[i + <span class="hljs-number">1</span>] = array[i];  <br>            i--;  <br>        &#125;  <br>        array[i + <span class="hljs-number">1</span>] = e;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//O(1)  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br><span class="hljs-comment">//        int max = selectMax();  </span><br><span class="hljs-comment">//        E e = (E) array[max];  </span><br><span class="hljs-comment">//        remove(max);  </span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) array[size - <span class="hljs-number">1</span>];  <br>        array[--size] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help GC  </span><br>        <span class="hljs-keyword">return</span> e;  <br>    &#125;  <br><span class="hljs-comment">//O(1)  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br><span class="hljs-comment">//        int max = selectMax();  </span><br><span class="hljs-comment">//        return (E) array[max];  </span><br>        <span class="hljs-keyword">return</span> (E) array[size - <span class="hljs-number">1</span>];  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == array.length;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">基于无序和基于有序数组实现俩种的差别在于：<br>无序：入队O(1)，出队O(n)<br>有序：入队O(n)，出队O(1)<br><br>BUT，这俩种都不是最优的实现方式，接下来看看更优解。</p><h3 id="基于堆实现"><a href="#基于堆实现" class="headerlink" title="基于堆实现"></a>基于堆实现</h3><blockquote><p>堆是一种基于树的数据结构，通常用完全二叉树实现。堆的特性如下：</p><ul><li>在大顶堆中，任意节点C与它的父节点P符合P.value &gt;&#x3D; C.value。</li><li>在小顶堆中，任意节点C与它的父节点P符合P.vlaue &lt;&#x3D; C.value。</li><li>最顶层节点(没有父亲)称之为root根节点。</li></ul></blockquote><blockquote><p>二叉树，简单理解就是一个节点最多有俩个子节点。</p></blockquote><blockquote><p>完全二叉树，就是说树的每一层除了最后一层都是填满的（都是俩个子节点）。<br>另外，向完全二叉树加入节点时，必须从左开始添加。</p></blockquote><p class="note note-info">它是非线性的数据结构，但是存储的时候可以使用线性的数组结构存储。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309210937016.png"></p><p class="note note-primary">这种数据结构具备一些特征，前辈总结了一些规律公式，可以在已知父节点的时候快速找到子节点，或者已知子节点的时候快速找到父节点。<br>堆存在数组中有俩种方式，一种是从索引0直接存根，另一种是索引0空着从1开始存根节点。<br>- 如果从索引0开始存储节点数据<br>    1. 节点 i 的父节点为 (i-1)/2，当i>0时。<br>    2. 节点 i 的左子节点为 2i+1 ，右子节点为 2i+2，当然它们得小于size。<br>- 如果从索引1开始存储节点数据<br>    1. 节点i的父节点为 i/2 ，当 i>1 时。<br>    2. 节点 i 的左子节点为 2i ，右子节点为 2i+1 ，同样得小于size。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309210948549.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> priorityqueue;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 基于大顶堆实现  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 入队  </span><br><span class="hljs-comment"> * 1.入堆新元素，加入到数组末尾  </span><br><span class="hljs-comment"> * 2.不断比较新元素与它父节点优先级  </span><br><span class="hljs-comment"> * （上浮）  </span><br><span class="hljs-comment"> * - 如果父节点优先级低，则向下移动，并找到下一个parent  </span><br><span class="hljs-comment"> * - 直至父节点优先级更高或child==0为止。  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 出队  </span><br><span class="hljs-comment"> * 1.交换堆顶和尾部元素，让尾部出队  </span><br><span class="hljs-comment"> * 2.（下潜）  </span><br><span class="hljs-comment"> * - 从堆顶开始，将父元素与俩个孩子较大者交换  </span><br><span class="hljs-comment"> * - 直到父元素大于俩个孩子，或者没有孩子为止。  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue3</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Priority</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;  <br>  <br>    Priority[] array;  <br>    <span class="hljs-type">int</span> size;  <br>  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue3</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;  <br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priority</span>[capacity];  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//O(logn)  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E offered)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> size++;<span class="hljs-comment">//确定索引，先不同填充值，可能要调整堆  </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<span class="hljs-comment">//找到父节点  </span><br>        <span class="hljs-keyword">while</span> (child &gt; <span class="hljs-number">0</span> &amp;&amp; offered.priority() &gt; array[parent].priority()) &#123;  <br>            array[child] = array[parent];<span class="hljs-comment">//下移  </span><br>            child = parent;  <br>            parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;  <br>        &#125;  <br>        <span class="hljs-comment">//循环结束找到目标待插入节点  </span><br>        array[child] = offered;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 交换  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;  <br>        <span class="hljs-type">Priority</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> array[i];  <br>        array[i] = array[j];  <br>        array[j] = t;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * O(logn)     * 下潜  </span><br><span class="hljs-comment">     * 因为可以通过公式，已知父节点可以得到子节点，所以参数一个即可  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> parent)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * parent + <span class="hljs-number">1</span>;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> left + <span class="hljs-number">1</span>;<span class="hljs-comment">//等价于 2*parent+2  </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> parent;<span class="hljs-comment">//假设父元素优先级更高  </span><br>        <span class="hljs-keyword">if</span> (left &lt; size &amp;&amp; array[left].priority() &gt; array[max].priority()) &#123;<span class="hljs-comment">//left&lt;size因为通过公式得到的不一定存在  </span><br>            max = left;  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp; array[right].priority() &gt; array[max].priority()) &#123;  <br>            max = right;  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (max != parent) &#123;  <br>            <span class="hljs-comment">//说明被更新了  </span><br>            swap(max, parent);  <br>            <span class="hljs-comment">//递归调用  </span><br>            down(max);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        swap(<span class="hljs-number">0</span>, size - <span class="hljs-number">1</span>);<span class="hljs-comment">//交换堆顶和尾元素  </span><br>        size--;<span class="hljs-comment">//移除数组尾部元素,就是把size减1即可  </span><br>        <span class="hljs-type">Priority</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[size];  <br>        array[size] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help GC  </span><br>        <span class="hljs-comment">//下潜  </span><br>        down(<span class="hljs-number">0</span>);  <br>        <span class="hljs-keyword">return</span> (E) e;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//O(1)  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        <span class="hljs-keyword">return</span> (E) array[<span class="hljs-number">0</span>];  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == array.length;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">三种实现区别<br>无序：入队O(1)，出队O(n)<br>有序：入队O(n)，出队O(1)<br>堆：入队O(logn)，出队O(logn)  推荐<br></p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><blockquote><p>目前队列存在的问题<br>1.很多场景要求分离生产者、消费者俩个角色，它们由不同的线程来担当，而之前的实现并没有考虑线程安全问题。<br>2.队列为空，那么在之前的实现里会返回null，如果就是硬要拿到一个元素呢？只能不能循环尝试。<br>3.队列为满，那么在之前的实现里会返回false，如果就是硬要塞入一个元素呢？只能不断循环尝试。</p></blockquote><h3 id="单锁实现"><a href="#单锁实现" class="headerlink" title="单锁实现"></a>单锁实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> blockqueue;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 目前队列存在的问题  </span><br><span class="hljs-comment"> * &gt; 1.很多场景要求分离生产者、消费者俩个角色，它们由不同的线程来担当，而之前的实现并没有考虑线程安全问题。  </span><br><span class="hljs-comment"> * &gt; 2.队列为空，那么在之前的实现里会返回null，如果就是硬要拿到一个元素呢？只能不能循环尝试。  </span><br><span class="hljs-comment"> * &gt; 3.队列为满，那么在之前的实现里会返回false，如果就是硬要塞入一个元素呢？只能不断循环尝试。  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 解决方法：  </span><br><span class="hljs-comment"> * 1.用锁保证线程安全  </span><br><span class="hljs-comment"> * 2.用条件变量让poll或offer线程进入等待状态  </span><br><span class="hljs-comment"> */</span>  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlockQueue</span>&lt;E&gt; &#123;<span class="hljs-comment">//阻塞队列  </span><br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 入队不再需要返回值，因为会进入阻塞状态  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException;  <br>  <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e, <span class="hljs-type">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException;  <br>  <br>    E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> blockqueue;  <br>  <br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;  <br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;  <br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 单锁实现  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockQueue1</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockQueue</span>&lt;E&gt; &#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> head;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tail;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">headWaits</span> <span class="hljs-operator">=</span> lock.newCondition();<span class="hljs-comment">//配合poll方法使用 因为队列先入先出，出队的时候就用head表示  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">tailWaits</span> <span class="hljs-operator">=</span> lock.newCondition();<span class="hljs-comment">//配合offer方法使用 入队  </span><br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size == array.length;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockQueue1</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;  <br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>        lock.lockInterruptibly();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">while</span> (isFull()) &#123;  <br>                <span class="hljs-comment">//不能用if，防止虚假唤醒  </span><br>                tailWaits.await();<span class="hljs-comment">//进入阻塞状态  </span><br>            &#125;  <br>            <span class="hljs-comment">//不满，可以添加  </span><br>            array[tail] = e;  <br>            <span class="hljs-keyword">if</span> (++tail == array.length) &#123;  <br>                tail = <span class="hljs-number">0</span>;  <br>            &#125;  <br>            size++;  <br>            <span class="hljs-comment">//此时，poll可能在等待队列非空要取数据，所以要去唤醒  </span><br>            headWaits.signal();  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            lock.unlock();  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 可以设置等待时间，上面的offer会一直等  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e, <span class="hljs-type">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>        lock.lockInterruptibly();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> TimeUnit.MILLISECONDS.toNanos(timeout);<span class="hljs-comment">//传过来毫秒转换一下  </span><br>            <span class="hljs-keyword">while</span> (isFull()) &#123;  <br>                <span class="hljs-keyword">if</span> (t &lt;= <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>                &#125;  <br>                t = tailWaits.awaitNanos(t);<span class="hljs-comment">//最多等待多少纳秒 1s 4s 返回值代表剩余时间  </span><br>            &#125;  <br>            <span class="hljs-comment">//不满，可以添加  </span><br>            array[tail] = e;  <br>            <span class="hljs-keyword">if</span> (++tail == array.length) &#123;  <br>                tail = <span class="hljs-number">0</span>;  <br>            &#125;  <br>            size++;  <br>            <span class="hljs-comment">//此时，poll可能在等待队列非空要取数据，所以要去唤醒  </span><br>            headWaits.signal();  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            lock.unlock();  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>        lock.lockInterruptibly();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">while</span> (isEmpty()) &#123;  <br>                headWaits.await();  <br>            &#125;  <br>            <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[head];  <br>            array[head] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help GC  </span><br>            <span class="hljs-keyword">if</span> (++head == array.length) &#123;  <br>                head = <span class="hljs-number">0</span>;  <br>            &#125;  <br>            size--;  <br>            <span class="hljs-comment">//此时，offer可能在等待队列不满要取数据，所以要去唤醒  </span><br>            tailWaits.signal();  <br>            <span class="hljs-keyword">return</span> e;  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            lock.unlock();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双锁实现"><a href="#双锁实现" class="headerlink" title="双锁实现"></a>双锁实现</h3><blockquote><p>上面单锁实现加锁是为了多线程下产生指令交错，结果达不到预期，所以加了一一把锁来实现。<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211132224.png"><br>加锁来保证多行代码的原子性，保证左边执行完，右边再执行。这是为什么加锁。</p><p>但是加锁后，会产生新的问题，offer和poll都需要加锁，而且用到同一把锁。<br><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309211134026.png"><br>offer和poll线程是互相影响的，offer在加锁状态下，poll加不上锁会处于阻塞状态，得等offer执行完了解锁，poll才能获得锁。读写不能同时进行！这样是不合理的。一个操作头，一个操作尾，按理来讲应该互不干扰。所以可以用双锁来实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> blockqueue;  <br>  <br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;  <br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;  <br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;  <br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 双锁实现  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockQueue2</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockQueue</span>&lt;E&gt; &#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> head;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tail;  <br>    <span class="hljs-comment">//    private int size;  </span><br>    <span class="hljs-keyword">private</span> AtomicInteger size;  <br>  <br>    <span class="hljs-comment">//    private ReentrantLock lock = new ReentrantLock();  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">tailLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<span class="hljs-comment">//给offer用  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">tailWaits</span> <span class="hljs-operator">=</span> tailLock.newCondition();  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">headLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<span class="hljs-comment">//给poll方法用  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">headWaits</span> <span class="hljs-operator">=</span> headLock.newCondition();  <br>  <br><span class="hljs-comment">//    private Condition headWaits = lock.newCondition();//配合poll方法使用 因为队列先入先出，出队的时候就用head表示  </span><br><span class="hljs-comment">//    private Condition tailWaits = lock.newCondition();//配合offer方法使用 入队  </span><br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size.get() == <span class="hljs-number">0</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> size.get() == array.length;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockQueue2</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;  <br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>        <span class="hljs-type">int</span> c;<span class="hljs-comment">//添加前元素个数 c=0的时候进行加锁和唤醒操作  </span><br>        tailLock.lockInterruptibly();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">while</span> (isFull()) &#123;  <br>                <span class="hljs-comment">//不能用if，防止虚假唤醒  </span><br>                tailWaits.await();<span class="hljs-comment">//进入阻塞状态  </span><br>            &#125;  <br>            <span class="hljs-comment">//不满，可以添加  </span><br>            array[tail] = e;  <br>            <span class="hljs-keyword">if</span> (++tail == array.length) &#123;  <br>                tail = <span class="hljs-number">0</span>;  <br>            &#125;  <br>            <span class="hljs-comment">//修改size  </span><br>            <span class="hljs-comment">/*             * 1.读取成员变量size的值  </span><br><span class="hljs-comment">             * 2.自增  </span><br><span class="hljs-comment">             * 3.结果写会成员变量size  </span><br><span class="hljs-comment">             */</span>            c = size.getAndIncrement();<span class="hljs-comment">//size++ 但能保证原子性  </span><br>            <span class="hljs-keyword">if</span> (c + <span class="hljs-number">1</span> &lt; array.length) &#123;  <br>                tailWaits.signal();  <br>            &#125;  <br>  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            tailLock.unlock();  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-comment">//解决死锁的方法很简单，不要写成嵌套的方式即可  </span><br>            headLock.lock();  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                headWaits.signal();<span class="hljs-comment">//signal和await必须搭配对应的锁  </span><br>            &#125; <span class="hljs-keyword">finally</span> &#123;  <br>                headLock.unlock();  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 可以设置等待时间，上面的offer会一直等  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e, <span class="hljs-type">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>        <span class="hljs-type">int</span> c;<span class="hljs-comment">//添加前元素个数 c=0的时候进行加锁和唤醒操作  </span><br>        tailLock.lockInterruptibly();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> TimeUnit.MILLISECONDS.toNanos(timeout);<span class="hljs-comment">//传过来毫秒转换一下  </span><br>            <span class="hljs-keyword">while</span> (isFull()) &#123;  <br>                <span class="hljs-keyword">if</span> (t &lt;= <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>                &#125;  <br>                t = tailWaits.awaitNanos(t);<span class="hljs-comment">//最多等待多少纳秒 1s 4s 返回值代表剩余时间  </span><br>            &#125;  <br>            <span class="hljs-comment">//不满，可以添加  </span><br>            array[tail] = e;  <br>            <span class="hljs-keyword">if</span> (++tail == array.length) &#123;  <br>                tail = <span class="hljs-number">0</span>;  <br>            &#125;  <br>            <span class="hljs-comment">//修改size  </span><br>            <span class="hljs-comment">/*             * 1.读取成员变量size的值  </span><br><span class="hljs-comment">             * 2.自增  </span><br><span class="hljs-comment">             * 3.结果写会成员变量size  </span><br><span class="hljs-comment">             */</span><span class="hljs-comment">//            size++;  </span><br>            c = size.getAndIncrement();<span class="hljs-comment">//size++ 但能保证原子性  </span><br>            <span class="hljs-comment">//此时，poll可能在等待队列非空要取数据，所以要去唤醒  </span><br><span class="hljs-comment">//            headWaits.signal();  </span><br>            <span class="hljs-keyword">if</span> (c + <span class="hljs-number">1</span> &lt; array.length) &#123;<span class="hljs-comment">//如果不是从满到不满，自己唤醒剩余的  </span><br>                tailWaits.signal();  <br>            &#125;  <br>  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            tailLock.unlock();  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-comment">//唤醒等待的poll线程  </span><br>            headLock.lock();<span class="hljs-comment">// offer_3 offer_3  </span><br>            <span class="hljs-keyword">try</span> &#123;  <br>                headWaits.signal();<span class="hljs-comment">// offer_1 让offer_1唤醒一次，offer_2和3不做唤醒操作，让poll自己内部唤醒，减少锁的使用  </span><br>            &#125; <span class="hljs-keyword">finally</span> &#123;  <br>                headLock.unlock();  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>        E e;  <br>        <span class="hljs-type">int</span> c;<span class="hljs-comment">//取走前的元素个数  </span><br>        headLock.lockInterruptibly();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">while</span> (isEmpty()) &#123;  <br>                headWaits.await();<span class="hljs-comment">// poll_1 poll_2 poll_3  .   poll_1被唤醒后，自己唤醒poll2和3，这种思想叫做级联通知。  </span><br>            &#125;  <br>            e = array[head];  <br>            array[head] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//help GC  </span><br>            <span class="hljs-keyword">if</span> (++head == array.length) &#123;  <br>                head = <span class="hljs-number">0</span>;  <br>            &#125;  <br>            <span class="hljs-comment">//修改size  </span><br>            <span class="hljs-comment">/*             * 1.读取成员变量size的值  </span><br><span class="hljs-comment">             * 2.自增  </span><br><span class="hljs-comment">             * 3.结果写会成员变量size  </span><br><span class="hljs-comment">             */</span><span class="hljs-comment">//            size--;  </span><br>            c = size.getAndDecrement();  <br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//如果还有剩余元素，级联通知去唤醒剩下的  </span><br>                headWaits.signal();  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            headLock.unlock();  <br>        &#125;  <br>        <span class="hljs-comment">//但是这样写，可能会产生死锁！！offer和poll中tailLock和headLock交叉引用了！  </span><br>        <span class="hljs-comment">//所以要改成平级的，不要嵌套的。  </span><br>        <span class="hljs-comment">//唤醒等待的offer线程  </span><br>        <span class="hljs-keyword">if</span> (c == array.length) &#123;<span class="hljs-comment">//从队列满到不满时，由poll唤醒等待不满offer线程  </span><br>            tailLock.lock();  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                tailWaits.signal();<span class="hljs-comment">//signal和await必须搭配对应的锁  </span><br>            &#125; <span class="hljs-keyword">finally</span> &#123;  <br>                tailLock.unlock();  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> e;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">其实这也是阻塞队列的源码，我们自己实现之后，就会更加清晰。双锁实现的阻塞队列的设计思想是值得反复去斟酌学习的。</p>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>队列</tag>
      
      <tag>双端队列</tag>
      
      <tag>优先级队列</tag>
      
      <tag>阻塞队列</tag>
      
      <tag>级联通知</tag>
      
      <tag>可重入锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（三）- 递归</title>
    <link href="/posts/1bf3c967/"/>
    <url>/posts/1bf3c967/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p class="note note-primary">在计算机科学中，递归是一种解决计算问题的方法，其中解决方案取决于同一类问题的更小子集。<br>比如，单链表递归遍历的例子。<br>void f(Node node){<br>&nbsp;&nbsp;f(node.next);<br>}<br>说明：<br>1.自己调用自己，如果每个函数对应着一种解决方案，自己调用自己意味着解决方案是一样的（有规律的）<br>2.每次调用，函数处理的数据会比上次缩减（子集），而且最后会缩减至无需继续递归。<br>3.内存函数调用（子集处理）完成，外层函数才能算调用完成！</p><h2 id="单链表递归分析"><a href="#单链表递归分析" class="headerlink" title="单链表递归分析"></a>单链表递归分析</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201838927.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201839255.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201839734.png"></p><h2 id="递归思路"><a href="#递归思路" class="headerlink" title="递归思路"></a>递归思路</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201840039.png"></p><p class="note note-primary">深入到最里面叫做递。<br>从最里面出来叫做归。<br>在递的过程中，外层函数的局部变量以及方法参数并未消失，归的时候还可以使用。</p><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201841987.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> n * f(n-<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-secondary">伪代码，分析执行流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">f(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * f(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反向打印字符串"><a href="#反向打印字符串" class="headerlink" title="反向打印字符串"></a>反向打印字符串</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201844478.png"></p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201845599.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">因为递的时候是正序的，归的时候逆序的，所以把递归调用放在前面，打印放在后面，即可实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReversePrintString</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n, String str)</span>&#123;<br><span class="hljs-keyword">if</span>(n == str.length()) <span class="hljs-keyword">return</span>;<br>f(n + <span class="hljs-number">1</span>, str);<span class="hljs-comment">//递</span><br>System.out.println(str.charAt(n));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201848656.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">递归实现二分查找</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionBinarySearch</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">21</span>,<span class="hljs-number">30</span>,<span class="hljs-number">38</span>,<span class="hljs-number">44</span>,<span class="hljs-number">52</span>,<span class="hljs-number">53</span>&#125;;<br>System.out.println(search(a, <span class="hljs-number">7</span>)); <span class="hljs-comment">//0</span><br>System.out.println(search(a, <span class="hljs-number">13</span>));<span class="hljs-comment">//1</span><br>System.out.println(search(a, <span class="hljs-number">21</span>));<span class="hljs-comment">//2</span><br>System.out.println(search(a, <span class="hljs-number">53</span>));<span class="hljs-comment">//7</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span>&#123;<br><span class="hljs-comment">//让调用者少传参数, 隐藏具体实现</span><br><span class="hljs-keyword">return</span> f(a, target, <span class="hljs-number">0</span>, a.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* left和right不对外暴露，让调用者使用更简单</span><br><span class="hljs-comment">* 返回目标索引</span><br><span class="hljs-comment">* 找不到返回-1</span><br><span class="hljs-comment">*/</span><br>priavte <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br><span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//递归终止条件</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (left + right) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(target &lt; a[m])&#123;<br><span class="hljs-keyword">return</span> f(a, target, left, m - <span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[m] &lt; target)&#123;<br><span class="hljs-keyword">return</span> f(a, targetm m + <span class="hljs-number">1</span>, right);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> m;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="冒泡排序0-n-2"><a href="#冒泡排序0-n-2" class="headerlink" title="冒泡排序0(n^2)"></a>冒泡排序0(n^2)</h2><p>以下是冒泡排序的实现原理步骤：</p><ol><li>从列表的第一个元素开始，比较它与下一个元素的大小。</li><li>如果第一个元素大于第二个元素（逆序），则交换它们的位置。</li><li>移动到下一个元素，重复步骤1和步骤2，直到列表的末尾。</li><li>重复上述步骤，每次内部循环将最大的元素 “冒泡” 到列表的最后一个位置。</li><li>外部循环减小待排序元素的范围，直到没有需要交换的元素为止，表示排序完成。</li></ol><p>冒泡排序的特点是每一轮内部循环都将当前未排序部分中的最大元素移动到了最后。这意味着在每一轮后，最后的元素都会是当前未排序部分的最大值。排序过程中，如果一轮内部循环没有发生任何交换，就可以提前结束排序，因为列表已经是有序的。</p><p class="note note-info">用递归实现冒泡过程分析：<br>1.将数组划分成俩部分 [0..j]，[j+1 .. a.length-1]。<br>2.左边[0..j] 是未排序的部分。<br>3.右边[j+1 .. a.length-1]是已排序部分。<br>4.未排序区间内，相邻俩个元素比较，如果前一个大，则交换位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span>&#123;<br>bubble(a, a.length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//j 代表未排序区域的右边界</span><br><span class="hljs-comment">//bubble内部首先是递归结束条件，然后for循环是一次冒泡，然后调用自身</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> j)</span>&#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; j; i++)&#123;<br><span class="hljs-keyword">if</span>(a[i] &gt; a[i+<span class="hljs-number">1</span>])&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> a[i];<br>a[i] = a[i+<span class="hljs-number">1</span>];<br>a[i+<span class="hljs-number">1</span>] = t;<br>&#125;<br>&#125;<br>bubble(a, j-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201908139.png"></p><blockquote><p>这种情况下，未排序区域还很大，但是只需要在冒泡一次，把2和1交换就达到目的了，但是未排序边界 j 还没有到 0 ，会做很多无用功。尝试优化一下。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201910581.png"></p><blockquote><p>可以搞一个 x ，初始为0，如果当次产生交换，就让所以 i 的索引赋给 x，如果没有产生交换，x 就保持上一次的不变，那么 x 就能当做无序和有序的边界了，下次递归就不用 j 去递减了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span>&#123;<br>bubble(a, a.length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//j 代表未排序区域的右边界</span><br><span class="hljs-comment">//bubble内部首先是递归结束条件，然后for循环是一次冒泡，然后调用自身</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> j)</span>&#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; j; i++)&#123;<br><span class="hljs-keyword">if</span>(a[i] &gt; a[i+<span class="hljs-number">1</span>])&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> a[i];<br>a[i] = a[i+<span class="hljs-number">1</span>];<br>a[i+<span class="hljs-number">1</span>] = t;<br>x = i;<br>&#125;<br>&#125;<br>bubble(a, x);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入排序O-n-2"><a href="#插入排序O-n-2" class="headerlink" title="插入排序O(n^2)"></a>插入排序O(n^2)</h2><p>它的工作方式优点像整理一手扑克牌，以下是插入排序的实现原理步骤：</p><ol><li>从第二个元素开始（索引为1），将当前元素视为待插入的元素。</li><li>将待插入的元素与已排序部分的元素逐个比较，直到找到一个比待插入元素小的元素，或者已经遍历完已排序部分。</li><li>将待插入元素插入到找到的位置，使得已排序部分仍然保持有序。</li><li>重复上述步骤，逐个处理未排序部分的元素，直到整个列表都有序。</li></ol><p>插入排序的特点是在每一轮内部循环中，将当前未排序元素插入到已排序部分的合适位置，逐步扩展已排序部分。这使得已排序部分始终保持有序。插入排序适用于小型数据集或基本有序的数据集，因为它的时间复杂度为 O(n^2)，在大型数据集上性能较差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span>&#123;<br>insertion(a, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">用递归实现</span><br><span class="hljs-comment">low是未排序的左边界，从1开始</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertion</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> low)</span>&#123;<br><span class="hljs-keyword">if</span>(low == a.length)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> a[low];<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> low - <span class="hljs-number">1</span>;<span class="hljs-comment">//已排序区域指针</span><br><span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; a[i]&gt;t)&#123;<span class="hljs-comment">//没有找到插入位置</span><br>a[i+<span class="hljs-number">1</span>] = a[i];<span class="hljs-comment">//空出插入位置</span><br>i--;<br>&#125;<br><span class="hljs-comment">//找到插入位置</span><br>a[i+<span class="hljs-number">1</span>] = t;<br><br>insertion(a, low+<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="斐波那契数列-多路递归"><a href="#斐波那契数列-多路递归" class="headerlink" title="斐波那契数列(多路递归)"></a>斐波那契数列(多路递归)</h2><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201931055.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fibonacci</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> f(n - <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> f(n - <span class="hljs-number">2</span>)；<br><span class="hljs-keyword">return</span> x + y;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-danger">斐波那契是多路递归的典型案例，整个计算过程相当于二叉树了，其中很多重复的步骤，造成时间复杂度很差。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201934609.png"></p><p class="note note-success">可以看出，上面计算过程有很多重复，可以定义一个数组，存储 f(n) 的解，将来计算到哪一项的时候，如果数组有就直接从数组取，可以大大优化；<br>这种方式称为记忆法，也称为备忘录，其实就是剪枝的过程。<br>改进之后时间复杂度从O(1.68n)优化为O(n)。但因额外产生数组，这就是空间换时间。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201936305.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fbonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-type">int</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>Arrays.fill(cache, -<span class="hljs-number">1</span>);<span class="hljs-comment">//都填充-1</span><br>cache[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>cache[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> f(n, cache);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[] cache)</span>&#123;<br><span class="hljs-keyword">if</span>(cache[n] != -<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> cache[n];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> f(n-<span class="hljs-number">1</span>, cache);<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> f(n-<span class="hljs-number">2</span>, cache);<br>cache[n] = x + y;<span class="hljs-comment">//存入数组</span><br><span class="hljs-keyword">return</span> cache[n];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递归求和"><a href="#递归求和" class="headerlink" title="递归求和"></a>递归求和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sum</span>&#123;<br><span class="hljs-comment">//f(n) = f(n-1) + n;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span>&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> sum(n-<span class="hljs-number">1</span>) + n;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201948253.png"></p><p class="note note-danger">递归求和，属于单路递归，很容易就想到了思路，为什么贴上这个呢。可以把n等于15000试一下，就很发现为什么了。因为栈内存溢出了！也就是爆栈了！<br>只有最内层的sum(n = 1)的函数执行完了，才能一层一层往外归。也就是说递的过程必须递到最深处才能归！！！每个方法调用是需要消耗内存的，需要存储方法的相关信息，比如说方法的参数信息，方法内的局部变量，方法的返回地址，这些信息都需要存放在栈内存中，在最内层n = 1没有结束之前，前面14999个方法都需要等着！！它们占用的内存也不能得到释放。所以会导致占内存溢出。</p><h3 id="尾调用-amp-尾递归"><a href="#尾调用-amp-尾递归" class="headerlink" title="尾调用&amp;尾递归"></a>尾调用&amp;尾递归</h3><p class="note note-success">在解决爆栈问题之前，需要掌握几个其他知识。<br>尾调用：如果函数的最后一步是调用一个函数，称为尾调用。<br>尾递归：在函数内部最后调用自己，称为尾递归。<br>能对尾递归优化的语言有c++、scala，它们会把逐级递归的方式改成平级的形式。scala也属于java的近亲，也是编译成class类在JVM上运行，有幸了解过一些。<br>当然，从根本上避免爆栈问题，就是避免使用递归。把递归代码改成循环代码。理论上所有递归都能改写成循环代码。</p><p class="note note-secondary">经典白学，哈哈哈哈</p>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>多路递归</tag>
      
      <tag>尾递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（二）- 链表</title>
    <link href="/posts/60be154/"/>
    <url>/posts/60be154/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p class="note note-primary">在计算机科学中，链表是数据元素的线性集合，其每个元素都指向下一个元素，元素存储上并不连续。<br>可分类为：<br>- 单向链表：每个元素只知道其下一个元素<br>- 双向链表：每个元素知道其上一个元素和下一个元素<br>- 循环链表：通常的链表尾节点tail指向null，而循环链表的tail指向的头结点head<br><br>链表内还有一种特殊的节点，称为哨兵(Sentinel)节点，也叫做哑元(Dummy)节点，它不存储数据，通常用作头尾，用来简化边界判断。<br></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><p>根据index查找，时间复杂度O(n)，因为需要一个节点next、next找到目标。</p><h3 id="插入或删除"><a href="#插入或删除" class="headerlink" title="插入或删除"></a>插入或删除</h3><ul><li>起始位置：O(1)。</li><li>结束位置：如果已知tail节点则是O(1)，不知道tail节点则是O(n)。</li><li>中间位置：根据index查找时间+O(1)。</li></ul><h2 id="单向链表之无哨兵节点"><a href="#单向链表之无哨兵节点" class="headerlink" title="单向链表之无哨兵节点"></a>单向链表之无哨兵节点</h2><p class="note note-light">talk is cheap, show me the code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单向链表 基础实现 无哨兵节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicSingleLinkedList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span> &#123;<span class="hljs-comment">//整体</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//头节点，默认为null</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部类关系，对外隐藏实现细节</span><br><span class="hljs-comment">     * 对外部调用者只需要LinkedList即可</span><br><span class="hljs-comment">     * 内部类一半都加上static</span><br><span class="hljs-comment">     * 节点类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//节点</span><br>        <span class="hljs-type">int</span> value;<span class="hljs-comment">//值</span><br>        Node next;<span class="hljs-comment">//下一个节点</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向链表头添加元素</span><br><span class="hljs-comment">     * 多理解！！</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-comment">//链表为空</span><br><span class="hljs-comment">//        head = new Node(value, null);</span><br>        <span class="hljs-comment">//链表非空</span><br>        <span class="hljs-comment">//因为head默认为null，所以不需要判断，链表空不空都能能用</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, head);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向列表尾添加元素</span><br><span class="hljs-comment">     * 先找到尾节点，再添加</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> findLast();<br>        <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>) &#123;<br>            addFirst(value);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        last.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向索引位置插入节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待插入值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            addFirst(value);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//找不到前一个节点</span><br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        prev.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, prev.next);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除头节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        head = head.next;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引删除节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            removeFirst();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//找不到前一个节点</span><br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> prev.next;<br>        <span class="hljs-keyword">if</span> (removed == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        prev.next = removed.next;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IllegalArgumentException <span class="hljs-title function_">illegalIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;index illegal&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 找到最后一个节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//链表为空，没有最后一个节点</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//利用for循环特性获取最后一个节点</span><br>        Node p;<br>        <span class="hljs-keyword">for</span> (p = head; p.next != <span class="hljs-literal">null</span>; p = p.next) &#123;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询指定位置元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//利用for循环特性获取指定index位置节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head; p != <span class="hljs-literal">null</span>; p = p.next, i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == index) &#123;<br>                <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * get方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> findNode(index);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.value;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 循环1 while</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop1</span><span class="hljs-params">(Consumer&lt;Integer&gt; consumer)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> head;<span class="hljs-comment">//初始值指向头节点</span><br>        <span class="hljs-keyword">while</span> (pointer != <span class="hljs-literal">null</span>) &#123;<br>            consumer.accept(pointer.value);<span class="hljs-comment">//提供给外部的方法</span><br>            pointer = pointer.next;<span class="hljs-comment">//指向下一个节点</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 循环2 for</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop2</span><span class="hljs-params">(Consumer&lt;Integer&gt; consumer)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> head; pointer != <span class="hljs-literal">null</span>; pointer = pointer.next) &#123;<br>            consumer.accept(pointer.value);<span class="hljs-comment">//提供给外部的方法</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 循环3 iterator</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 匿名内部类 -&gt; 带名字的内部类</span><br><span class="hljs-comment">         * 这个抽取出来的内部类MyIterator，它是不加static的</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 当内部类用到了外部类的成员变量时候，就不能加static</span><br><span class="hljs-comment">         * 因为static的意思是不依赖外部类实例的存在，而成员变量是依赖外部类的对象的</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 而Node节点类是可以加static的，因为它不依赖外部类的对象的</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 内部类能加就加，不能加就不加，建议加static</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIterator</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> head;<span class="hljs-comment">//初始值指向头节点</span><br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//是否有下一个元素</span><br>            <span class="hljs-keyword">return</span> pointer != <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//返回当前值，并指向下一个元素</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> pointer.value;<br>            pointer = pointer.next;<br>            <span class="hljs-keyword">return</span> v;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="单向链表之含哨兵节点"><a href="#单向链表之含哨兵节点" class="headerlink" title="单向链表之含哨兵节点"></a>单向链表之含哨兵节点</h2><p class="note note-light">talk is cheap, show me the code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单向链表 优化实现 含哨兵节点</span><br><span class="hljs-comment"> * 带哨兵节点的单向链表可以减少很多边界判断</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelSinglyLinkedList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 头指针指向哨兵节点，哨兵节点值无所谓</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">111</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//头节点</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部类关系，对外隐藏实现细节</span><br><span class="hljs-comment">     * 对外部调用者只需要LinkedList即可</span><br><span class="hljs-comment">     * 内部类一般都加上static</span><br><span class="hljs-comment">     * 节点类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//节点</span><br>        <span class="hljs-type">int</span> value;<span class="hljs-comment">//值</span><br>        Node next;<span class="hljs-comment">//下一个节点</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 向链表头添加元素</span><br><span class="hljs-comment">     * 多理解！！</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-comment">//不需要判断链表是否为空，因为链表一定不为空</span><br><span class="hljs-comment">//        //1.链表为空</span><br><span class="hljs-comment">////        head = new Node(value, null);</span><br><span class="hljs-comment">//        //2.链表非空</span><br><span class="hljs-comment">//        //因为head默认为null，所以不需要判断，链表空不空都能能用</span><br><span class="hljs-comment">//        head = new Node(value, head);</span><br>        insert(<span class="hljs-number">0</span>, value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 向列表尾添加元素</span><br><span class="hljs-comment">     * 先找到尾节点，再添加</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> findLast();<br>        <span class="hljs-comment">//含哨兵节点，不需要判断链表是否为空，因为链表一定不为空</span><br><span class="hljs-comment">//        if (last == null) &#123;</span><br><span class="hljs-comment">//            addFirst(value);</span><br><span class="hljs-comment">//            return;</span><br><span class="hljs-comment">//        &#125;</span><br>        last.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 向索引位置插入节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待插入值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-comment">//        if (index == 0) &#123;</span><br><span class="hljs-comment">//            addFirst(value);</span><br><span class="hljs-comment">//            return;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//找不到前一个节点</span><br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        prev.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, prev.next);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 删除头节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        if (head == null) &#123;</span><br><span class="hljs-comment">//            throw illegalIndex();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        head = head.next;</span><br>        remove(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 根据索引删除节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br><span class="hljs-comment">//        if (index == 0) &#123;</span><br><span class="hljs-comment">//            removeFirst();</span><br><span class="hljs-comment">//            return;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//找不到前一个节点</span><br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> prev.next;<br>        <span class="hljs-keyword">if</span> (removed == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        prev.next = removed.next;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IllegalArgumentException <span class="hljs-title function_">illegalIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;index illegal&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * 找到最后一个节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//含哨兵节点，不需要判断链表是否为空，因为链表一定不为空</span><br><span class="hljs-comment">//        if (head == null) &#123;</span><br><span class="hljs-comment">//            //链表为空，没有最后一个节点</span><br><span class="hljs-comment">//            return null;</span><br><span class="hljs-comment">//        &#125;</span><br>        Node p;<br>        <span class="hljs-keyword">for</span> (p = head; p.next != <span class="hljs-literal">null</span>; p = p.next) &#123;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 查询指定位置元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//为什么i=-1？ 因为哨兵节点也占一位。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head; p != <span class="hljs-literal">null</span>; p = p.next, i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == index) &#123;<br>                <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * get方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> findNode(index);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.value;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 循环1 while</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop1</span><span class="hljs-params">(Consumer&lt;Integer&gt; consumer)</span> &#123;<br>        <span class="hljs-comment">//遍历的起点变了</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> head.next;<span class="hljs-comment">//初始值指向头节点</span><br>        <span class="hljs-keyword">while</span> (pointer != <span class="hljs-literal">null</span>) &#123;<br>            consumer.accept(pointer.value);<span class="hljs-comment">//提供给外部的方法</span><br>            pointer = pointer.next;<span class="hljs-comment">//指向下一个节点</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加哨兵后修改</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 循环2 for</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop2</span><span class="hljs-params">(Consumer&lt;Integer&gt; consumer)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> head.next; pointer != <span class="hljs-literal">null</span>; pointer = pointer.next) &#123;<br>            consumer.accept(pointer.value);<span class="hljs-comment">//提供给外部的方法</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 循环3 iterator</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 匿名内部类 -&gt; 带名字的内部类</span><br><span class="hljs-comment">         * 这个抽取出来的内部类MyIterator，它是不加static的</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 当内部类用到了外部类的成员变量时候，就不能加static</span><br><span class="hljs-comment">         * 因为static的意思是不依赖外部类实例的存在，而成员变量是依赖外部类的对象的</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 而Node节点类是可以加static的，因为它不依赖外部类的对象的</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 内部类能加就加，不能加就不加，建议加static</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIterator</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> head.next;<span class="hljs-comment">//初始值指向头节点</span><br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//是否有下一个元素</span><br>            <span class="hljs-keyword">return</span> pointer != <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//返回当前值，并指向下一个元素</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> pointer.value;<br>            pointer = pointer.next;<br>            <span class="hljs-keyword">return</span> v;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双向链表之含哨兵节点"><a href="#双向链表之含哨兵节点" class="headerlink" title="双向链表之含哨兵节点"></a>双向链表之含哨兵节点</h2><p class="note note-light">talk is cheap, show me the code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双向链表 带哨兵节点</span><br><span class="hljs-comment"> * 俩个哨兵节点，一个头哨兵，一个尾哨兵</span><br><span class="hljs-comment"> * 也就是说，链表中至少有俩个节点</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 双向链表的优点：从尾部直接能获取最后一个节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyLinkedListSentinel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node prev;<span class="hljs-comment">//上一个节点</span><br>        <span class="hljs-type">int</span> value;<span class="hljs-comment">//值</span><br>        Node next;<span class="hljs-comment">//下一个节点</span><br><br>        <span class="hljs-comment">//构造方法 方便初始化</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node prev, <span class="hljs-type">int</span> value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node head;<span class="hljs-comment">//头哨兵</span><br>    <span class="hljs-keyword">private</span> Node tail;<span class="hljs-comment">//尾哨兵</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoublyLinkedListSentinel</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//头尾节点随便给个值就行</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">666</span>, <span class="hljs-literal">null</span>);<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">888</span>, <span class="hljs-literal">null</span>);<br>        head.next = tail;<br>        tail.prev = head;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引查找节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//头哨兵也要参与遍历所以从-1开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head; p != tail; p = p.next, i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == index) &#123;<br>                <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        insert(<span class="hljs-number">0</span>, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>        remove(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向列表尾添加元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> tail.prev;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">added</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(last, value, tail);<br>        last.next = added;<br>        tail.prev = added;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除列表尾元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> tail.prev;<br>        <span class="hljs-keyword">if</span> (removed == head) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> removed.prev;<br>        prev.next = tail;<br>        tail.prev = prev;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向索引位置插入节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> prev.next;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">inserted</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(prev, value, next);<span class="hljs-comment">//新节点的上一个节点是prev，下一个节点是next</span><br>        prev.next = inserted;<span class="hljs-comment">//prev的下一个节点是inserted</span><br>        next.prev = inserted;<span class="hljs-comment">//next的上一个节点是inserted</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除索引位置的节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> prev.next;<br>        <span class="hljs-keyword">if</span> (removed == tail) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex();<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> removed.next;<br><br>        prev.next = next;<br>        next.prev = prev;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IllegalArgumentException <span class="hljs-title function_">illegalIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;index illegal&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Integer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head.next;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> v;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双向环形含哨兵链表"><a href="#双向环形含哨兵链表" class="headerlink" title="双向环形含哨兵链表"></a>双向环形含哨兵链表</h2><p class="note note-light">talk is cheap, show me the code.<br> 这个有些特殊，此时哨兵即作为头，也作为尾。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201522659.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 环形双向含哨兵链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RingDoublyLinkedListSentinel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node prev;<br>        <span class="hljs-type">int</span> value;<br>        Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node prev, <span class="hljs-type">int</span> value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">sentinel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">666</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RingDoublyLinkedListSentinel</span><span class="hljs-params">()</span> &#123;<br>        sentinel.next = sentinel;<br>        sentinel.prev = sentinel;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加到链表头部</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sentinel;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sentinel.next;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">added</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(a, value, b);<br>        a.next = added;<br>        b.prev = added;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加到链表尾部</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sentinel.prev;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sentinel;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">added</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(a, value, b);<br>        a.next = added;<br>        b.prev = added;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除第一个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> sentinel.next;<br>        <span class="hljs-keyword">if</span> (removed == sentinel) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal argument&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> removed.prev;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> removed.next;<br>        a.next = b;<br>        b.prev = a;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除最后一个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> sentinel.prev;<br>        <span class="hljs-keyword">if</span> (removed == sentinel) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal argument&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> removed.prev;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> removed.next;<br>        a.next = b;<br>        b.prev = a;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据值删除节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeByValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> findByValue(value);<br>        <span class="hljs-keyword">if</span> (removed == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal argument&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> removed.prev;<span class="hljs-comment">//前一个节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> removed.next;<span class="hljs-comment">//后一个节点</span><br>        a.next = b;<span class="hljs-comment">//前一个节点的next指向后一个节点</span><br>        b.prev = a;<span class="hljs-comment">//后一个节点的prev指向前一个节点</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据值找到节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findByValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> sentinel.next;<br>        <span class="hljs-keyword">while</span> (p != sentinel) &#123;<br>            <span class="hljs-keyword">if</span> (p.value == value) &#123;<br>                <span class="hljs-keyword">return</span> p;<br>            &#125;<br>            p = p.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Integer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> sentinel.next;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> pointer != sentinel;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> pointer.value;<br>                pointer = pointer.next;<br>                <span class="hljs-keyword">return</span> v;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单向链表的递归遍历"><a href="#单向链表的递归遍历" class="headerlink" title="单向链表的递归遍历"></a>单向链表的递归遍历</h2><p class="note note-light">talk is cheap, show me the code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-keyword">import</span> java.util.Iterator;  <br><span class="hljs-keyword">import</span> java.util.function.Consumer;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 单向链表 基础实现  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * ！！！递归遍历！！！  </span><br><span class="hljs-comment"> * 它是链表的一种非常重要的遍历方式  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionLinkedList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span> &#123;<span class="hljs-comment">//整体  </span><br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//头节点，默认为null  </span><br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 内部类关系，对外隐藏实现细节  </span><br><span class="hljs-comment">     * 对外部调用者只需要LinkedList即可  </span><br><span class="hljs-comment">     * 内部类一半都加上static  </span><br><span class="hljs-comment">     * 节点类  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-comment">//节点  </span><br>        <span class="hljs-type">int</span> value;<span class="hljs-comment">//值  </span><br>        Node next;<span class="hljs-comment">//下一个节点  </span><br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value, Node next)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>            <span class="hljs-built_in">this</span>.next = next;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 向链表头添加元素  </span><br><span class="hljs-comment">     * 多理解！！  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;  <br>        <span class="hljs-comment">//1.链表为空  </span><br><span class="hljs-comment">//        head = new Node(value, null);  </span><br>        <span class="hljs-comment">//2.链表非空  </span><br>        <span class="hljs-comment">//因为head默认为null，所以不需要判断，链表空不空都能能用  </span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, head);  <br>    &#125;  <br>  <br>  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 向列表尾添加元素  </span><br><span class="hljs-comment">     * 先找到尾节点，再添加  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> findLast();  <br>        <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>) &#123;  <br>            addFirst(value);  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        last.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-literal">null</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 向索引位置插入节点  </span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待插入值  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;  <br>            addFirst(value);  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);  <br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//找不到前一个节点  </span><br>            <span class="hljs-keyword">throw</span> illegalIndex();  <br>        &#125;  <br>        prev.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, prev.next);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 删除头节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">throw</span> illegalIndex();  <br>        &#125;  <br>        head = head.next;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 根据索引删除节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;  <br>            removeFirst();  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);  <br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//找不到前一个节点  </span><br>            <span class="hljs-keyword">throw</span> illegalIndex();  <br>        &#125;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> prev.next;  <br>        <span class="hljs-keyword">if</span> (removed == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">throw</span> illegalIndex();  <br>        &#125;  <br>        prev.next = removed.next;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IllegalArgumentException <span class="hljs-title function_">illegalIndex</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;index illegal&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 找到最后一个节点  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findLast</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-comment">//链表为空，没有最后一个节点  </span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        &#125;  <br>        Node p;  <br>        <span class="hljs-keyword">for</span> (p = head; p.next != <span class="hljs-literal">null</span>; p = p.next) &#123;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> p;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查询指定位置元素  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head; p != <span class="hljs-literal">null</span>; p = p.next, i++) &#123;  <br>            <span class="hljs-keyword">if</span> (i == index) &#123;  <br>                <span class="hljs-keyword">return</span> p;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * get方法  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> findNode(index);  <br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">throw</span> illegalIndex();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> node.value;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 循环3 iterator  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-comment">/**  </span><br><span class="hljs-comment">         * 匿名内部类 -&gt; 带名字的内部类  </span><br><span class="hljs-comment">         * 这个抽取出来的内部类MyIterator，它是不加static的  </span><br><span class="hljs-comment">         *  </span><br><span class="hljs-comment">         * 当内部类用到了外部类的成员变量时候，就不能加static  </span><br><span class="hljs-comment">         * 因为static的意思是不依赖外部类实例的存在，而成员变量是依赖外部类的对象的  </span><br><span class="hljs-comment">         *  </span><br><span class="hljs-comment">         * 而Node节点类是可以加static的，因为它不依赖外部类的对象的  </span><br><span class="hljs-comment">         *  </span><br><span class="hljs-comment">         * 内部类能加就加，不能加就不加，建议加static  </span><br><span class="hljs-comment">         */</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIterator</span>();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;  <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> head;<span class="hljs-comment">//初始值指向头节点  </span><br>  <br>        <span class="hljs-meta">@Override</span>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//是否有下一个元素  </span><br>            <span class="hljs-keyword">return</span> pointer != <span class="hljs-literal">null</span>;  <br>        &#125;  <br>  <br>        <span class="hljs-meta">@Override</span>  <br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//返回当前值，并指向下一个元素  </span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> pointer.value;  <br>            pointer = pointer.next;  <br>            <span class="hljs-keyword">return</span> v;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">(Node curr, Consumer&lt;String&gt; before, Consumer&lt;String&gt; after)</span>&#123; <br>        <span class="hljs-keyword">if</span> (curr == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//递归需要一个终止条件  </span><br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        before.accept(<span class="hljs-string">&quot;before: &quot;</span> + curr.value);  <br>        recursion(curr.next, before, after);<span class="hljs-comment">//这样自己调用自己称为递归  </span><br>        after.accept(<span class="hljs-string">&quot;after: &quot;</span> + curr.value);  <br>    &#125;  <br>  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>    <span class="hljs-type">RecursionLinkedList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecursionLinkedList</span>();  <br>    list.addLast(<span class="hljs-number">55</span>);  <br>    list.addLast(<span class="hljs-number">66</span>);  <br>    list.addLast(<span class="hljs-number">77</span>);  <br>    list.addLast(<span class="hljs-number">88</span>);  <br>    list.recursion(list.findNode(<span class="hljs-number">0</span>),System.out::println, System.out::println);  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过递归方式遍历打印的时候，发现了有趣的现象，不同情况，打印结果却不同<br>打印在前，递归在后<br>递归在前，递归在后<br>俩种情况的呈现方式相差很大，如下图。</p></blockquote><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201607691.png"></p><blockquote><p>下一篇，会详细探讨一下递归，来解释为什么有这种现象。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>单向链表</tag>
      
      <tag>双向链表</tag>
      
      <tag>环形链表</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（一）- 数组</title>
    <link href="/posts/743df8dd/"/>
    <url>/posts/743df8dd/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在计算机科学中，数组是由一组元素(值或变量)组成的数据结构，每个元素有至少一个索引来标识；因为数组内元素是连续存储的，所以数组中的元素的地址，可以通过其索引计算出来，例如：<img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201048552.png"></p><p>数组的特点：<strong>随机访问</strong>。即根据索引查找元素，时间复杂度是O(1)。</p></blockquote><h2 id="自定义动态数组"><a href="#自定义动态数组" class="headerlink" title="自定义动态数组"></a>自定义动态数组</h2><p class="note note-info">数组是静态数组，不能够动态调整大小。Java是有提供好的动态数组，其实就是ArrayList，但目前是为了学习数据结构，下面自己来实现一个动态数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.datastructure;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.stream.IntStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicArray</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//逻辑大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<span class="hljs-comment">//容量 ,java中arraylist默认是10</span><br><br>    <span class="hljs-comment">//    private int[] array = new int[capacity];//延迟加载</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] array = &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加元素到数组末尾</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element 待添加的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> element)</span> &#123;<br>        <span class="hljs-comment">//array[size] = element;</span><br>        <span class="hljs-comment">//size++;</span><br>        add(size, element);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加元素到指定位置</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index   索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element 待添加的元素</span><br><span class="hljs-comment">     * 时间复杂度</span><br><span class="hljs-comment">     *    头部插入：O(n)</span><br><span class="hljs-comment">     *    中间插入：O(n)</span><br><span class="hljs-comment">     *    尾部插入：O(1)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> element)</span> &#123;<br>        <span class="hljs-comment">//扩容检查</span><br>        checkAndGrow();<br>        <span class="hljs-comment">//检查index是否合法</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;index:&quot;</span> + index + <span class="hljs-string">&quot;,size:&quot;</span> + size);<br>        &#125;<br>        <span class="hljs-comment">//拷贝，把目标index后的元素都往后移动一位</span><br>        System.arraycopy(array, index, array, index + <span class="hljs-number">1</span>, size - index);<br>        array[index] = element;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扩容检查</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAndGrow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[capacity];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (size == capacity) &#123;<br>            <span class="hljs-comment">//扩容，1.5倍、1.618倍、2倍：建议这些</span><br>            capacity += capacity &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span>[] newArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[capacity];<br>            <span class="hljs-comment">//拷贝</span><br>            System.arraycopy(array, <span class="hljs-number">0</span>, newArray, <span class="hljs-number">0</span>, size);<br>            <span class="hljs-comment">//替换</span><br>            array = newArray;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定位置的元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<span class="hljs-comment">//[0..size)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> array[index];<br>        <span class="hljs-keyword">if</span> (index &lt; size - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//拷贝，把目标index后的元素都往前移动一位</span><br>            System.arraycopy(array, index + <span class="hljs-number">1</span>, array, index, size - index - <span class="hljs-number">1</span>);<br>            size--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> removed;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询指定位置的元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 时间复杂度：O(1)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<span class="hljs-comment">// [0..size)</span><br>        <span class="hljs-keyword">return</span> array[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用函数式接口Consumer,遍历数组，</span><br><span class="hljs-comment">     * 对每个元素执行consumer.accept(array[i])，令调用方执行自定义的操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> consumer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreach</span><span class="hljs-params">(Consumer&lt;Integer&gt; consumer)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-comment">// 提供array[i]</span><br>            <span class="hljs-comment">// 返回void</span><br>            consumer.accept(array[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 迭代器遍历</span><br><span class="hljs-comment">     * 实现Iterable接口，使得DynamicArray可以使用foreach语法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Integer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> index &lt; size;<span class="hljs-comment">//index &lt; size表示还有元素</span><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> array[index++];<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取流对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> IntStream <span class="hljs-title function_">stream</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> IntStream.of(Arrays.copyOfRange(array, <span class="hljs-number">0</span>, size));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy"></a>System.arraycopy</h2><p class="note note-warning">注：System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length);</br>- src：源数组，即要复制的数组。</br>- srcPos：源数组的起始位置，从源数组的哪个索引开始复制。</br>- dest：目标数组，即复制到的数组。</br>- destPos：目标数组的起始位置，复制到目标数组的哪个索引位置。</br>- length：要复制的元素数量。</br></br>System.arrayCopy 的主要特点和注意事项：</br>1. **低级别操作：** 这是一种低级别的数组操作，直接在内存中复制数组内容，效率较高。    </br>2. **复制范围控制：** 你可以控制复制的范围，包括源数组的起始位置、目标数组的起始位置和要复制的元素数量。    </br>3. **原地复制：** 它允许在不创建新数组的情况下，将源数组的一部分复制到目标数组中，适用于需要在原地进行数据移动的情况。    </br>4. **数据类型检查：** `System.arrayCopy` 不会进行数据类型检查，因此要确保源和目标数组的数据类型一致，否则可能会导致运行时异常。    </br>5. **不会自动扩展：** 它不会自动扩展目标数组，如果目标数组长度不足以容纳复制的数据，会导致数组越界异常。    </br>6. **效率高：** 由于是底层操作，因此通常情况下比使用迭代或循环来复制数组要更高效</p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p class="note note-primary">这个很有趣，推荐平常多使用函数式接口来优化代码，这里总结汇总一下吧。</p><h3 id="Runnable-和-Callable"><a href="#Runnable-和-Callable" class="headerlink" title="Runnable 和 Callable"></a>Runnable 和 Callable</h3><ul><li><code>Runnable</code> 通常用于<strong>多线程编程，用于定义线程要执行的任务</strong>。它没有输入参数，也没有返回值。</li><li><code>Callable</code> 类似于 <code>Runnable</code>，但<strong>允许任务返回结果</strong>。通常与线程池一起使用，可以获得任务执行的结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用Runnable创建线程任务</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello from Runnable&quot;</span>);<br>&#125;;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnable);<br>thread.start();<br><br><span class="hljs-comment">// 使用Callable和ExecutorService获取线程任务的返回值</span><br>Callable&lt;Integer&gt; callable = () -&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>;<br>&#125;;<br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>Future&lt;Integer&gt; result = executorService.submit(callable);<br>System.out.println(<span class="hljs-string">&quot;Result from Callable: &quot;</span> + result.get());<br>executorService.shutdown();<br></code></pre></td></tr></table></figure><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><ul><li><code>Comparator</code> 用于<strong>比较两个对象的顺序</strong>。它通常用于集合的排序操作。</li><li>可以使用 <code>Comparator</code> 的 <code>comparing</code> 方法创建比较器，也可以使用 <code>reversed</code> 方法反转比较器的顺序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Charlie&quot;</span>);<br>names.sort((s1, s2) -&gt; s1.compareTo(s2));<br><span class="hljs-comment">// 或者使用Comparator.comparing方法</span><br>names.sort(Comparator.comparing(String::length));<br></code></pre></td></tr></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><ul><li>直译有”消费者”的含义。</li><li><code>Consumer</code> 用于<strong>接受一个参数并执行操作，通常没有返回值</strong>。它常用于集合的遍历和元素处理。</li><li>可以使用 <code>andThen</code> 方法组合多个 <code>Consumer</code>，形成一个连续的操作链。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>Consumer&lt;Integer&gt; printSquare = (num) -&gt; System.out.println(num * num);<br>numbers.forEach(printSquare);<br></code></pre></td></tr></table></figure><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><ul><li>直译有“供应者”的含义。</li><li><code>Supplier</code> <strong>通常不接受参数，用于生成一个值</strong>。它可以用于延迟加载或惰性计算。</li><li>可以在需要值的地方<strong>调用 <code>get</code> 方法来获取值</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Supplier&lt;Double&gt; randomNumberSupplier = () -&gt; Math.random();<br><span class="hljs-type">double</span> <span class="hljs-variable">randomValue</span> <span class="hljs-operator">=</span> randomNumberSupplier.get();<br>System.out.println(<span class="hljs-string">&quot;Random Value: &quot;</span> + randomValue);<br></code></pre></td></tr></table></figure><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><ul><li>直译有”谓语”的含义。</li><li><code>Predicate</code> <strong>接受一个参数并返回布尔值，用于进行条件判断</strong>。它通常用于过滤和筛选数据。</li><li>可以使用 <code>and</code>、<code>or</code> 和 <code>negate</code> 方法来组合多个谓词。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>Predicate&lt;Integer&gt; isEven = (num) -&gt; num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>List&lt;Integer&gt; evenNumbers = numbers.stream().filter(isEven).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul><li><code>Function</code> <strong>接受一个参数并返回一个值，用于将输入映射到输出</strong>。它通常用于数据转换和处理。</li><li>可以使用 <code>andThen</code> 和 <code>compose</code> 方法来组合多个函数，形成一个函数链。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;Integer, String&gt; intToString = (i) -&gt; String.valueOf(i);<br><span class="hljs-type">String</span> <span class="hljs-variable">stringValue</span> <span class="hljs-operator">=</span> intToString.apply(<span class="hljs-number">42</span>);<br>System.out.println(<span class="hljs-string">&quot;String Value: &quot;</span> + stringValue);<br></code></pre></td></tr></table></figure><h3 id="BiFunction"><a href="#BiFunction" class="headerlink" title="BiFunction"></a>BiFunction</h3><ul><li><code>BiFunction</code> <strong>接受两个参数并返回一个值，用于处理两个输入并产生一个输出</strong>。它通常用于需要两个输入的操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">BiFunction&lt;Integer, Integer, Integer&gt; add = (a, b) -&gt; a + b;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> add.apply(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>System.out.println(<span class="hljs-string">&quot;Sum: &quot;</span> + sum);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>二维数组</tag>
      
      <tag>函数式接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法之旅（零）- 认识算法</title>
    <link href="/posts/24ec10c/"/>
    <url>/posts/24ec10c/</url>
    
    <content type="html"><![CDATA[<p class="note note-secondary">通过二分查找算法，认识算法。</br>需求：在有序数组A内，查找值target：</br>1.如果找到返回索引；</br>2.如果找不到返回-1；</p><h2 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>根据需求，可以直观的想出来的解法如下：</p><ul><li>前提：给定一个内含n个元素的有序数组A，查找指定值target;</li><li>1.设置<code>i = 0</code>为左边界索引，<code>j = n - 1</code>为右边界索引;</li><li>2.如果<code>i &gt; j</code>，结束查找，没找到；</li><li>3.设置<code>m = medium((i+j)/2)</code>，m为中间索引，medium是向下取整的最小整数；</li><li>4.如果<code>target &lt; A[m]</code>，设置 <code>j = m - 1</code>，转第二步；</li><li>5.如果<code>A[m] &lt; target</code>，设置<code>i = m + 1</code>，转第二步；</li><li>6.如果<code>A[m] = target</code>，结束查找，说明找到了；</li></ul><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchBasic</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<span class="hljs-comment">//设置指针和初值</span><br><span class="hljs-keyword">while</span>(i&lt;=j)&#123;<br><span class="hljs-comment">//int m = (i+j)/2;//java除法自动取整，但除法有隐患，当然数值范围不大可以忽略</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i+j)&gt;&gt;&gt;<span class="hljs-number">1</span>;<span class="hljs-comment">//无符号右移，相当于除以2，且能避免隐患</span><br><span class="hljs-keyword">if</span>(target&lt;a[m])&#123;<br><span class="hljs-comment">//如果目标在中间值的左边，设置右边界指针为中间索引-1</span><br>j = m - <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[m]&lt;target)&#123;<br><span class="hljs-comment">//如果目标在中间值的右边，设置左边界指针为中间索引+1</span><br>i = m + <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//找到了</span><br><span class="hljs-keyword">return</span> m;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p class="note note-danger">Q：为什么是i <= j 意味着区间内有未比较的元素，而不是i < j ？</p><p class="note note-success">A：因为i=j 指向的元素也有可能是要查找的目标，如果没有等号，就会漏掉一次比较；</p><p class="note note-danger">Q：(i+j)/2 有没有问题？为什么使用右移代替？</p><p class="note note-success">A：因为如果数组无限大，j初始是Integer.MAX_VALUE - 1。第一次(i+j)/2没问题，但是如果此时，目标值比中间值大，需要把左侧i边界设置为m+1，那么此时，再进行取中间索引时候，(i+j)/2. 一个是Integer.MAX_VALUE的一半，一个是MAX_VALUE就会超过正整数能表达的范围，就会得到一个负数。负数是补码的形式，符号位不变，数值为取反。所以会得到一个负数；java里面二进制数都是有符号的，最高位是符号位。</p><p class="note note-danger">Q：为什么判断条件都写小于符号？</p><p class="note note-success">A：因为这里数组a是升序排列的，写成小于符号，相当于与数组排列的顺序是一致的。</p><h2 id="二分查找的应用"><a href="#二分查找的应用" class="headerlink" title="二分查找的应用"></a>二分查找的应用</h2><h3 id="重复元素"><a href="#重复元素" class="headerlink" title="重复元素"></a>重复元素</h3><p class="note note-secondary">需求，如果存在重复元素，希望找到最左侧的第一个元素</br>这种形式称为LeftMost，找最右侧的第一个元素，即为RightMost</p><p class="note note-info">首先，还是二分查找的解法，只不过在找到了的分支，追加向左区间继续找或向右区间继续找目标值的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 二分查找 - LeftMost  </span><br><span class="hljs-comment"> * 重复元素的数组中，查找最左侧的  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchLeftMost</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//候选  </span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;  <br>            j = m - <span class="hljs-number">1</span>;  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;  <br>            i = m + <span class="hljs-number">1</span>;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-comment">//只需要修改这里，找到目标需要存为候选，然后继续向左边找  </span><br>            candidate = m;  <br>            <span class="hljs-comment">//继续向左边找，则需要设置右侧指针移至中间索引-1  </span><br>            j = m - <span class="hljs-number">1</span>;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> candidate;  <br>&#125;<br><br><br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 二分查找 - RightMost  </span><br><span class="hljs-comment"> * 重复元素的数组中，查找最右侧的  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchRightMost</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//候选  </span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;  <br>            j = m - <span class="hljs-number">1</span>;  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;  <br>            i = m + <span class="hljs-number">1</span>;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-comment">//只需要修改这里，找到目标需要存为候选，然后继续向右边找  </span><br>            candidate = m;  <br>            <span class="hljs-comment">//继续向右边找，则需要设置左侧指针移至中间索引+1  </span><br>            i = m + <span class="hljs-number">1</span>;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> candidate;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求排名"><a href="#求排名" class="headerlink" title="求排名"></a>求排名</h3><p class="note note-secondary">求排名，其实是LeftMost的应用，看一个图就了解了</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201022852.png"></p><p class="note note-info">所以，求排名的解法就是：LeftMost+1。</p><h3 id="求前任后任"><a href="#求前任后任" class="headerlink" title="求前任后任"></a>求前任后任</h3><p class="note note-secondary">还是这张图，也是最左和最右的应用。</p><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201022852.png"></p><p class="note note-info">分析可知，</br>求前任解法即：LeftMost-1</br>求后任解法即：RightMost+1</p><h3 id="最近邻居"><a href="#最近邻居" class="headerlink" title="最近邻居"></a>最近邻居</h3><p class="note note-info">比如5的最近邻居是4，因为4和5差1，5和7差2，</br>就是找到前任和后任，然后比对，找到其中最小的。</p><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p class="note note-info">比如想找所有小于4的目标，0 .. LeftMost(4) - 1</br>比如找所有小于等于4的目标， 0 .. RightMost(4)</br>比如找所有大于4的目标， RightMost(4)+1 .. 无穷大</br>比如找所有大于等于4的目标，LeftMost(4) .. 无穷大</br>找 4 <= x <=7 ，LeftMost(4) .. RightMost(7)</br>找 4 < x <=7，RightMost(4)+1 .. LeftMost(7)-1</p><h3 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h3><p><img src="https://hexo-img-bucket-1306020160.cos.ap-beijing.myqcloud.com/pic/202309201038568.png"></p><p class="note note-info">抱一丝，仍然是leftMost和rightMost的应用，有了最左和最右就可以得到结果，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">pubic <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> leftMost(a, target);<br><span class="hljs-keyword">if</span>(left == -<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;left, rightMost(a, traget)&#125;;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data&amp;algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
